
#include "Transactions.h"
#include <string.h>
#include <ctime>

#include "tools.h"
#include "buildJson.h"
//#include "UnpackJson.h"
//#include <json_spirit_stream_reader.h>
#include "CodeFieldsTransaction.h"
#include "NMCLog.h"


//logs
//#define logbegin	cout<<"["<<__FUNCTION__<<"] ["<<__LINE__<<"] -- Begin"<<endl
//#define logend      cout<<"["<<__FUNCTION__<<"] ["<<__LINE__<<"] -- End"<<endl
//#define heavylog	    cout<<"["<<__FUNCTION__<<"] ["<<__LINE__<<"] -- "
//#define logbasic	cout<<"["<<__FUNCTION__<<"] ["<<__LINE__<<"] -- "
//#define __DEBUG_DATA_2_SEND

#if defined(logbegin) || defined (logend) || defined (logbasic) || defined (__DEBUG_DATA_2_SEND) || defined (heavylog)
    #include <iostream>
    #define _BYTES_PER_LINE 10
#endif


//#define __TRANSACTIONS_DEBUG_


//if the transaction is invalid
string ProcessDefaultTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifdef logbasic
    logbasic<<"Invalid Transaction"<<endl;
#endif
    NMCLog::Log("Invalid Transaction");
    return "Invalid ID Transaction";
}




////User
string ProcessValidateUserTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
    nameTransaction="Validate User";
    NMCLog::Log("Validate User");
    dataLog =   string("User Name [") + hData[__userName] +
                string("] User Type [") + hData[__userType] +
                string("]");

    try
    {

        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="VALUSER";

		//P114.26
		hResult["114.26"]=hData[__userName]; //39

		//P52
		hResult["52"]=hData[__password]; //17

        //114.123
        hResult["114.123"]=hData[__userType];



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/validateUser?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else

        Object obj;
        Value valOut;

        NoMoreCardsSession *nmcSesson;

        nmcSesson=new NoMoreCardsSession;

        //build data of test
        nmcSesson->user.isAvailable=true;
        nmcSesson->user.id=1;
        nmcSesson->user.companyName="name company";
        nmcSesson->user.nickName="andres";
        nmcSesson->user.firstName="andres";
        nmcSesson->user.lastName="andres";
        nmcSesson->user.middleName="andres";
        nmcSesson->user.email="@email.com";
        nmcSesson->user.type="CONSUMER";
        nmcSesson->user.atclass="com.nomorecards.webportal.commons.beans.Consumer";

        nmcSesson->user.numGroups=1;
        UserGroup usergroup;
        nmcSesson->user.usergroup=&usergroup;
        usergroup.groupName="group";
        usergroup.numPermissions=1;
        Permissions permissions;
        permissions.permissionName="permission";
        permissions.canEdit=false;
        permissions.canDelete=false;
        permissions.canRead=false;
        permissions.canAdd=false;
        usergroup.permissions=&permissions;
        usergroup.groupId=5;

        nmcSesson->user.numPaymentMethod=1;
        PaymentMethod paymentmethod;
        nmcSesson->user.paymentmethod=&paymentmethod;
        paymentmethod.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
        paymentmethod.id=5;
        paymentmethod.responsible="alguien";
        paymentmethod.type="AMERICAN_EXPRESS";

        nmcSesson->user.numPhones=1;
        Phones phones;
        nmcSesson->user.phones=&phones;
        phones.country.available = true;
        phones.country.code="12";
        phones.country.name="USA";
        phones.country.shortName="US";


        phones.phoneNumber="123";
        phones.type="MOBILE";


        nmcSesson->user.numPermissions=1;
        Permissions permissions1;
        nmcSesson->user.permissions=&permissions1;

        permissions1.permissionName="permission";
        permissions1.canEdit=false;
        permissions1.canDelete=false;
        permissions1.canRead=false;
        permissions1.canAdd=false;

        //app settings


        nmcSesson->appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
        nmcSesson->appSettings.language="spanglish";
        nmcSesson->appSettings.screenLockMinutes=1;
        nmcSesson->appSettings.screenLockSeconds=1;

        nmcSesson->loyaltySettings.numCategory=1;
        Category category;
        nmcSesson->loyaltySettings.category=&category;
        category.id=1;
        category.name="123";
        //category.category=NULL;



       // // // // user as merchant

        nmcSesson->loyaltySettings.numMerchant=1;
        User merchant;
        nmcSesson->loyaltySettings.merchant=&merchant;
            merchant.atclass="com.nomorecards.webportal.commons.beans.Merchant";
            merchant.isAvailable=true;
            merchant.id=1;
            merchant.companyName="name company";
            merchant.nickName="andres";
            merchant.firstName="andres";
            merchant.lastName="andres";
            merchant.middleName="andres";
            merchant.email="email@email.com";
            merchant.country="usa";
            merchant.type="CONSUMER";

            merchant.numGroups=1;
                UserGroup usergroup1;
                merchant.usergroup=&usergroup1;
                usergroup1.groupName="group";
                usergroup1.numPermissions=1;
                    Permissions permissions2;
                    permissions2.permissionName="permission";
                    permissions2.canEdit=false;
                    permissions2.canDelete=false;
                    permissions2.canRead=false;
                    permissions2.canAdd=false;
                    usergroup1.numPermissions=1;
                    usergroup1.permissions=&permissions2;
                    usergroup1.groupId=5;

            merchant.numPaymentMethod=1;
            PaymentMethod paymentmethod2;
                merchant.paymentmethod=&paymentmethod2;
                paymentmethod2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                paymentmethod2.id=5;
                paymentmethod2.responsible="alguien";
                paymentmethod2.type="AMERICAN_EXPRESS";

            merchant.numPhones=1;
                Phones phones2;
                merchant.phones=&phones2;
                phones2.country.available = true;
                phones2.country.code="12";
                phones2.country.name="USA";
                phones2.country.shortName="US";


                phones2.phoneNumber="123";
                phones2.type="MOBILE";


                merchant.numPermissions=1;
                Permissions permissions4;
                    merchant.permissions=&permissions4;

                    permissions4.permissionName="permission";
                    permissions4.canEdit=false;
                    permissions4.canDelete=false;
                    permissions4.canRead=false;
                    permissions4.canAdd=false;


      //loyaltysettings addres

        nmcSesson->loyaltySettings.numAddress=1;
                Address address;
                nmcSesson->loyaltySettings.address=&address;


                address.addressLine1="address1";
                address.addressline2="address2";
                address.country="USA";
                address.state="state";
                address.city="city";
                address.zipCode="12345";
                address.type="HOME";
                address.mainAddress=false;



        nmcSesson->loyaltySettings.recievePushNotifications=true;
        nmcSesson->loyaltySettings.whenPromotionExpiresTomrrow=true;
        nmcSesson->loyaltySettings.onlyNewPromotionFromFavorites=true;
        nmcSesson->loyaltySettings.autodeleteUsedExpiredFromFavorites=true;
        nmcSesson->loyaltySettings.receiveNotificationUntil="01/01/2013";
        nmcSesson->loyaltySettings.receiveNotificationFrom="01/01/2013";

        buildJson buildJsonout;


       string jSon;

        buildJsonout.buildJsonNoMoreCardsSession(nmcSesson,0,obj,valOut);

        delete nmcSesson;

        jSon=write(obj);

        return jSon;

#endif

}


////AppSettings
string ProcessGetUserSettingsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get User Settings");

    try
    {
        hasresult hResult;
        string sFormatedRsp;


        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETUSESET";

        //P114.179 user id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__userId]).c_str()));
		hResult["114.179"]=Temp;




        string mti="0305";



        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/getUserSettings?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }

#else
        string jSon;
        Object obj;
        Value valOut;
//--------------------------------------------------------------------------
//                      AppSettings 1
//--------------------------------------------------------------------------

        AppSettings appsettings[5];

            appsettings[0].atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
            appsettings[0].language="spanish";
            appsettings[0].screenLockMinutes=1;
            appsettings[0].screenLockSeconds=1;

//--------------------------------------------------------------------------
//                      AppSettings 2
//--------------------------------------------------------------------------

            appsettings[1].atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
            appsettings[1].language="spanish";
            appsettings[1].screenLockMinutes=1;
            appsettings[1].screenLockSeconds=1;


//--------------------------------------------------------------------------
//                      AppSettings 3
//--------------------------------------------------------------------------

            appsettings[2].atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
            appsettings[2].language="spanish";
            appsettings[2].screenLockMinutes=1;
            appsettings[2].screenLockSeconds=1;
//--------------------------------------------------------------------------
//                      AppSettings 4
//--------------------------------------------------------------------------

            appsettings[3].atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
            appsettings[3].language="spanish";
            appsettings[3].screenLockMinutes=1;
            appsettings[3].screenLockSeconds=1;

//--------------------------------------------------------------------------
//                      AppSettings 5
//--------------------------------------------------------------------------

            appsettings[4].atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
            appsettings[4].language="spanish";
            appsettings[4].screenLockMinutes=1;
            appsettings[4].screenLockSeconds=1;


        buildJson buildJsonout;
        buildJsonout.buildJsonAppSettings(appsettings,5,obj,valOut);
        jSon=write(valOut);
        return jSon;

#endif

}

string ProcessGetUserActivityTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get User Activity");
    try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETUSACT";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetUserActivity?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetConsumerByEmailAndStatusTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer By Email And Status");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETUSEMAILSTAT";

        //P114.7
		hResult["114.7"]=hData[__email];

		//P114.143
		hResult["114.143"]=hData[__status];


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerByEmailAndStatus?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}



////Invoices
string ProcessGetInvoicesByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Invoices By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETINVCON";

		//P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetInvoicesByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
    string jSon;
    Object obj;
    Value valOut;

    //Invoice
    Invoice *listInvoice;
    listInvoice=new Invoice[3];
        listInvoice[0].id=1;
        listInvoice[0].transactionId="1";
        listInvoice[0].transactionType="something";
        listInvoice[0].transactionDate="01/01/2013";

            //Invoice - Merchant

            listInvoice[0].merchant.assignedTo="alguien";
            listInvoice[0].merchant.supervisor="alguien";
            listInvoice[0].merchant.department="comida";

                //Invoice - Merchant - Category
                listInvoice[0].merchant.category.id=1;
                listInvoice[0].merchant.category.name="123";
                //    listInvoice.merchant.category.category="123";

                //Invoice - Merchant - AppSettings
                listInvoice[0].merchant.appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                listInvoice[0].merchant.appSettings.language="spanglish";
                listInvoice[0].merchant.appSettings.screenLockMinutes=1;
                listInvoice[0].merchant.appSettings.screenLockSeconds=1;

                //Invoice - Merchant - Suscription
                listInvoice[0].merchant.numSuscription=1;
                Suscription suscription;
                    suscription.id=1;
                    suscription.name="name";
                    suscription.cost=5.0;
                    suscription.duration=1;
                    suscription.durationType="DAYS";
                    suscription.purchaseDate="01/01/2013";
                    suscription.autoRenew=true;
                listInvoice[0].merchant.suscriptions=&suscription;

                //Invoice - Merchant - Location
                Location locations;
                listInvoice[0].merchant.numLocation=1;
                listInvoice[0].merchant.locations=&locations;

                locations.numTerminal=1;
                    Terminal terminals;
                        terminals.id=1;
                        terminals.name="name";
                        terminals.details="details";
                    locations.terminals=&terminals;

                    locations.latitude=5.5;
                    locations.longitude=5.5;

                    locations.address.addressLine1="address1";
                    locations.address.addressline2="address2";
                    locations.address.country="USA";
                    locations.address.state="state";
                    locations.address.city="city";
                    locations.address.zipCode="12345";

                    locations.address.type="HOME";
                    locations.address.mainAddress=false;

                //Invoice - Merchant - User
                listInvoice[0].merchant.user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                listInvoice[0].merchant.user.isAvailable=true;
                listInvoice[0].merchant.user.id=1;
                listInvoice[0].merchant.user.companyName="name company";
                listInvoice[0].merchant.user.nickName="andres";
                listInvoice[0].merchant.user.firstName="andres";
                listInvoice[0].merchant.user.lastName="andres";
                listInvoice[0].merchant.user.middleName="andres";
                listInvoice[0].merchant.user.email="email@email.com";
                listInvoice[0].merchant.user.country="Colombia";
                listInvoice[0].merchant.user.type="CONSUMER";

                listInvoice[0].merchant.user.numGroups=1;
                UserGroup usergroup;
                listInvoice[0].merchant.user.usergroup=&usergroup;
                    usergroup.groupName="group";
                    usergroup.numPermissions=1;
                    Permissions permissions;
                        permissions.permissionName="permission";
                        permissions.canEdit=false;
                        permissions.canDelete=false;
                        permissions.canRead=false;
                        permissions.canAdd=false;
                    usergroup.permissions=&permissions;
                    usergroup.groupId=5;

                listInvoice[0].merchant.user.numPaymentMethod=1;
                PaymentMethod paymentmethod;
                listInvoice[0].merchant.user.paymentmethod=&paymentmethod;
                    paymentmethod.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod.id=5;
                    paymentmethod.responsible="alguien";
                    paymentmethod.type="AMERICAN_EXPRESS";

                listInvoice[0].merchant.user.numPhones=1;
                Phones phones;
                listInvoice[0].merchant.user.phones=&phones;
                    phones.country.available = true;
                    phones.country.code="12";
                    phones.country.name="USA";
                    phones.country.shortName="US";
                    phones.phoneNumber="123";
                    phones.type="MOBILE";

                listInvoice[0].merchant.user.numPermissions=1;
                Permissions permissions1_2;
                listInvoice[0].merchant.user.permissions=&permissions1_2;
                    permissions1_2.permissionName="permission";
                    permissions1_2.canEdit=false;
                    permissions1_2.canDelete=false;
                    permissions1_2.canRead=false;
                    permissions1_2.canAdd=false;

            //Invoice - Consumer
            //account.consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
            listInvoice[0].consumer.title="title";
            listInvoice[0].consumer.birthDate="01/01/2010";

            listInvoice[0].consumer.mainaddress.addressLine1 = "direction1";
            listInvoice[0].consumer.mainaddress.addressline2 = "direction2";
            listInvoice[0].consumer.mainaddress.country = "Spain";
            listInvoice[0].consumer.mainaddress.state = "Catalunia";
            listInvoice[0].consumer.mainaddress.city = "Barca";
            listInvoice[0].consumer.mainaddress.zipCode = "1234";
            listInvoice[0].consumer.mainaddress.type = "HOME";
            listInvoice[0].consumer.mainaddress.mainAddress = true;

                listInvoice[0].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                listInvoice[0].consumer.appsettings.language="espanol";
                listInvoice[0].consumer.appsettings.screenLockMinutes=44;
                listInvoice[0].consumer.appsettings.screenLockSeconds=55;

            listInvoice[0].consumer.loyaltysettings.numCategory=1;
                Category category;
                    category.id=1234;
                    category.name="nombre";
                    //category.category="parent";
            listInvoice[0].consumer.loyaltysettings.category=&category;

            // // // // user as merchant

            listInvoice[0].consumer.loyaltysettings.numMerchant=1;
            User merchant;
            listInvoice[0].consumer.loyaltysettings.merchant=&merchant;
                merchant.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant.isAvailable=true;
                merchant.id=1;
                merchant.companyName="name company";
                merchant.nickName="andres";
                merchant.firstName="andres";
                merchant.lastName="andres";
                merchant.middleName="andres";
                merchant.email="email@email.com";
                merchant.country="usa";
                merchant.type="CONSUMER";

                merchant.numGroups=1;
                    UserGroup usergroup1;
                    merchant.usergroup=&usergroup1;
                    usergroup1.groupName="group";
                    usergroup1.numPermissions=1;
                        Permissions permissions2;
                        permissions2.permissionName="permission";
                        permissions2.canEdit=false;
                        permissions2.canDelete=false;
                        permissions2.canRead=false;
                        permissions2.canAdd=false;
                        usergroup1.permissions=&permissions2;
                        usergroup1.groupId=5;

                merchant.numPaymentMethod=1;
                PaymentMethod paymentmethod2;
                    merchant.paymentmethod=&paymentmethod2;
                    paymentmethod2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod2.id=5;
                    paymentmethod2.responsible="alguien";
                    paymentmethod2.type="AMERICAN_EXPRESS";

                merchant.numPhones=1;
                    Phones phones2;
                    merchant.phones=&phones2;
                    phones2.country.available = true;
                    phones2.country.code="12";
                    phones2.country.name="USA";
                    phones2.country.shortName="US";


                    phones2.phoneNumber="123";
                    phones2.type="MOBILE";


                    merchant.numPermissions=1;
                    Permissions permissions4;
                        merchant.permissions=&permissions4;

                        permissions4.permissionName="permission";
                        permissions4.canEdit=false;
                        permissions4.canDelete=false;
                        permissions4.canRead=false;
                        permissions4.canAdd=false;


                    listInvoice[0].consumer.loyaltysettings.numAddress=1;
                        Address address1;
                            address1.addressLine1="address1";
                            address1.addressline2="address2";
                            address1.country="USA";
                            address1.state="state";
                            address1.city="city";
                            address1.zipCode="12345";
                            address1.type="HOME";
                            address1.mainAddress=false;
                    listInvoice[0].consumer.loyaltysettings.address=&address1;

                    listInvoice[0].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                    listInvoice[0].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                    listInvoice[0].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                    listInvoice[0].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                    listInvoice[0].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


            listInvoice[0].consumer.numAddress=1;
            Address address2;
                address2.addressLine1="address1";
                address2.addressline2="address2";
                address2.country="USA";
                address2.state="state";
                address2.city="city";
                address2.zipCode="12345";
                address2.type="HOME";
                address2.mainAddress=false;
            listInvoice[0].consumer.address=&address2;

            //Invoice - Address
            listInvoice[0].address.addressLine1="address1";
            listInvoice[0].address.addressline2="address2";
            listInvoice[0].address.country="USA";
            listInvoice[0].address.state="state";
            listInvoice[0].address.city="city";
            listInvoice[0].address.zipCode="12345";
            listInvoice[0].address.type="HOME";
            listInvoice[0].address.mainAddress=false;


        listInvoice[0].totalAmount=5.0;
        listInvoice[0].itemsAmount=5.0;
        listInvoice[0].savingAmount=5.0;

            //Invoice - PaymentMethod
            listInvoice[0].paymentmethod.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
            listInvoice[0].paymentmethod.id=5;
            listInvoice[0].paymentmethod.responsible="alguien";
            listInvoice[0].paymentmethod.type="AMERICAN_EXPRESS";

        listInvoice[0].numInvoiceItem=1;
        InvoiceItem invoiceitem;
            invoiceitem.quantity=1;
            invoiceitem.totalCost=5.5;
        listInvoice[0].invoiceitem=&invoiceitem;

        ///////////////////////////////////////////////////////////
        ////////////////      INVOICE 2      //////////////////////
        ///////////////////////////////////////////////////////////

        listInvoice[1].id=2;
        listInvoice[1].transactionId="2";
        listInvoice[1].transactionType="something2";
        listInvoice[1].transactionDate="01/01/2013";

            //Invoice - Merchant

            listInvoice[1].merchant.assignedTo="alguien2";
            listInvoice[1].merchant.supervisor="alguien2";
            listInvoice[1].merchant.department="comida2";

                //Invoice - Merchant - Category
                listInvoice[1].merchant.category.id=2;
                listInvoice[1].merchant.category.name="123";
                //    listInvoice.merchant.category.category="123";

                //Invoice - Merchant - AppSettings
                listInvoice[1].merchant.appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                listInvoice[1].merchant.appSettings.language="spanglish";
                listInvoice[1].merchant.appSettings.screenLockMinutes=2;
                listInvoice[1].merchant.appSettings.screenLockSeconds=2;

                //Invoice - Merchant - Suscription
                listInvoice[1].merchant.numSuscription=1;
                Suscription suscription2;
                    suscription2.id=2;
                    suscription2.name="name2";
                    suscription2.cost=5.0;
                    suscription2.duration=1;
                    suscription2.durationType="DAYS";
                    suscription2.purchaseDate="01/01/2013";
                    suscription2.autoRenew=true;
                listInvoice[1].merchant.suscriptions=&suscription2;

                //Invoice - Merchant - Location
                Location locations2;
                listInvoice[1].merchant.numLocation=1;
                listInvoice[1].merchant.locations=&locations2;

                locations2.numTerminal=1;
                    Terminal terminals2;
                        terminals2.id=1;
                        terminals2.name="name2";
                        terminals2.details="details2";
                    locations2.terminals=&terminals2;

                    locations2.latitude=5.5;
                    locations2.longitude=5.5;

                    locations2.address.addressLine1="address12";
                    locations2.address.addressline2="address22";
                    locations2.address.country="USA2";
                    locations2.address.state="state2";
                    locations2.address.city="city2";
                    locations2.address.zipCode="123452";

                    locations2.address.type="HOME";
                    locations2.address.mainAddress=false;

                //Invoice - Merchant - User
                listInvoice[1].merchant.user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                listInvoice[1].merchant.user.isAvailable=true;
                listInvoice[1].merchant.user.id=1;
                listInvoice[1].merchant.user.companyName="namecompany2";
                listInvoice[1].merchant.user.nickName="andres2";
                listInvoice[1].merchant.user.firstName="andres2";
                listInvoice[1].merchant.user.lastName="andres2";
                listInvoice[1].merchant.user.middleName="andres2";
                listInvoice[1].merchant.user.email="email2@email.com";
                listInvoice[1].merchant.user.country="Colombia2";
                listInvoice[1].merchant.user.type="CONSUMER";

                listInvoice[1].merchant.user.numGroups=1;
                UserGroup usergroup2;
                listInvoice[1].merchant.user.usergroup=&usergroup2;
                    usergroup2.groupName="group2";
                    usergroup2.numPermissions=1;
                    Permissions permissions_2;
                        permissions_2.permissionName="permission2";
                        permissions_2.canEdit=false;
                        permissions_2.canDelete=false;
                        permissions_2.canRead=false;
                        permissions_2.canAdd=false;
                    usergroup2.permissions=&permissions_2;
                    usergroup2.groupId=5;

                listInvoice[1].merchant.user.numPaymentMethod=1;
                PaymentMethod paymentmethod_2;
                listInvoice[1].merchant.user.paymentmethod=&paymentmethod2;
                    paymentmethod_2.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod_2.id=5;
                    paymentmethod_2.responsible="alguien2";
                    paymentmethod_2.type="AMERICAN_EXPRESS";

                listInvoice[1].merchant.user.numPhones=1;
                Phones phones_2;
                listInvoice[1].merchant.user.phones=&phones_2;
                    phones_2.country.available = true;
                    phones_2.country.code="12";
                    phones_2.country.name="USA2";
                    phones_2.country.shortName="US2";
                    phones_2.phoneNumber="123";
                    phones_2.type="MOBILE";

                listInvoice[1].merchant.user.numPermissions=1;
                Permissions permissions1;
                listInvoice[1].merchant.user.permissions=&permissions1;
                    permissions1.permissionName="permission2";
                    permissions1.canEdit=false;
                    permissions1.canDelete=false;
                    permissions1.canRead=false;
                    permissions1.canAdd=false;

            //Invoice - Consumer
            //account.consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
            listInvoice[1].consumer.title="title";
            listInvoice[1].consumer.birthDate="01/01/2010";

            listInvoice[1].consumer.mainaddress.addressLine1 = "direction1";
            listInvoice[1].consumer.mainaddress.addressline2 = "direction2";
            listInvoice[1].consumer.mainaddress.country = "Spain";
            listInvoice[1].consumer.mainaddress.state = "Catalunia";
            listInvoice[1].consumer.mainaddress.city = "Barca";
            listInvoice[1].consumer.mainaddress.zipCode = "1234";
            listInvoice[1].consumer.mainaddress.type = "HOME";
            listInvoice[1].consumer.mainaddress.mainAddress = true;

                listInvoice[1].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                listInvoice[1].consumer.appsettings.language="espanol";
                listInvoice[1].consumer.appsettings.screenLockMinutes=44;
                listInvoice[1].consumer.appsettings.screenLockSeconds=55;

            listInvoice[1].consumer.loyaltysettings.numCategory=1;
                Category category_2;
                    category_2.id=1234;
                    category_2.name="nombre";
                    //category_2.category="parent";
            listInvoice[1].consumer.loyaltysettings.category=&category_2;

            // // // // user as merchant

            listInvoice[1].consumer.loyaltysettings.numMerchant=1;
            User merchant_2;
            listInvoice[1].consumer.loyaltysettings.merchant=&merchant_2;
                merchant_2.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant_2.isAvailable=true;
                merchant_2.id=1;
                merchant_2.companyName="name company";
                merchant_2.nickName="andres";
                merchant_2.firstName="andres";
                merchant_2.lastName="andres";
                merchant_2.middleName="andres";
                merchant_2.email="email@email.com";
                merchant_2.country="usa";
                merchant_2.type="CONSUMER";

                merchant_2.numGroups=1;
                    UserGroup usergroup1_2;
                    merchant_2.usergroup=&usergroup1_2;
                    usergroup1_2.groupName="group";
                    usergroup1_2.numPermissions=1;
                        Permissions permissions2_2;
                        permissions2_2.permissionName="permission";
                        permissions2_2.canEdit=false;
                        permissions2_2.canDelete=false;
                        permissions2_2.canRead=false;
                        permissions2_2.canAdd=false;
                        usergroup1_2.permissions=&permissions2_2;
                        usergroup1_2.groupId=5;

                merchant_2.numPaymentMethod=1;
                PaymentMethod paymentmethod2_2;
                    merchant_2.paymentmethod=&paymentmethod2_2;
                    paymentmethod2_2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod2_2.id=5;
                    paymentmethod2_2.responsible="alguien";
                    paymentmethod2_2.type="AMERICAN_EXPRESS";

                merchant_2.numPhones=1;
                    Phones phones2_2;
                    merchant_2.phones=&phones2_2;
                    phones2_2.country.available = true;
                    phones2_2.country.code="12";
                    phones2_2.country.name="USA";
                    phones2_2.country.shortName="US";


                    phones2_2.phoneNumber="123";
                    phones2_2.type="MOBILE";


                    merchant_2.numPermissions=1;
                    Permissions permissions4_2;
                        merchant_2.permissions=&permissions4_2;

                        permissions4_2.permissionName="permission2";
                        permissions4_2.canEdit=false;
                        permissions4_2.canDelete=false;
                        permissions4_2.canRead=false;
                        permissions4_2.canAdd=false;


                    listInvoice[1].consumer.loyaltysettings.numAddress=1;
                        Address address1_2;
                            address1_2.addressLine1="address12";
                            address1_2.addressline2="address22";
                            address1_2.country="USA";
                            address1_2.state="state";
                            address1_2.city="city";
                            address1_2.zipCode="12345";
                            address1_2.type="HOME";
                            address1_2.mainAddress=false;
                    listInvoice[1].consumer.loyaltysettings.address=&address1_2;

                    listInvoice[1].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                    listInvoice[1].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                    listInvoice[1].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                    listInvoice[1].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                    listInvoice[1].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


            listInvoice[1].consumer.numAddress=1;
            Address address2_2;
                address2_2.addressLine1="address1";
                address2_2.addressline2="address2";
                address2_2.country="USA";
                address2_2.state="state";
                address2_2.city="city";
                address2_2.zipCode="12345";
                address2_2.type="HOME";
                address2_2.mainAddress=false;
            listInvoice[1].consumer.address=&address2_2;

            //Invoice - Address
            listInvoice[1].address.addressLine1="address1";
            listInvoice[1].address.addressline2="address2";
            listInvoice[1].address.country="USA";
            listInvoice[1].address.state="state";
            listInvoice[1].address.city="city";
            listInvoice[1].address.zipCode="12345";
            listInvoice[1].address.type="HOME";
            listInvoice[1].address.mainAddress=false;


        listInvoice[1].totalAmount=5.0;
        listInvoice[1].itemsAmount=5.0;
        listInvoice[1].savingAmount=5.0;

            //Invoice - PaymentMethod
            listInvoice[1].paymentmethod.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
            listInvoice[1].paymentmethod.id=5;
            listInvoice[1].paymentmethod.responsible="alguien";
            listInvoice[1].paymentmethod.type="AMERICAN_EXPRESS";

        listInvoice[1].numInvoiceItem=1;
        InvoiceItem invoiceitem_2;
            invoiceitem_2.quantity=1;
            invoiceitem_2.totalCost=5.5;
        listInvoice[1].invoiceitem=&invoiceitem_2;


        ///////////////////////////////////////////////////////////
        ////////////////      INVOICE 3      //////////////////////
        ///////////////////////////////////////////////////////////

        listInvoice[2].id=3;
        listInvoice[2].transactionId="3";
        listInvoice[2].transactionType="something3";
        listInvoice[2].transactionDate="01/01/2013";

            //Invoice - Merchant

            listInvoice[2].merchant.assignedTo="alguien3";
            listInvoice[2].merchant.supervisor="alguien3";
            listInvoice[2].merchant.department="comida3";

                //Invoice - Merchant - Category
                listInvoice[2].merchant.category.id=1;
                listInvoice[2].merchant.category.name="123";
                //    listInvoice.merchant.category.category="123";

                //Invoice - Merchant - AppSettings
                listInvoice[2].merchant.appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                listInvoice[2].merchant.appSettings.language="spanglish";
                listInvoice[2].merchant.appSettings.screenLockMinutes=1;
                listInvoice[2].merchant.appSettings.screenLockSeconds=1;

                //Invoice - Merchant - Suscription
                listInvoice[2].merchant.numSuscription=1;
                Suscription suscription_3;
                    suscription_3.id=1;
                    suscription_3.name="name3";
                    suscription_3.cost=5.0;
                    suscription_3.duration=1;
                    suscription_3.durationType="DAYS";
                    suscription_3.purchaseDate="01/01/2013";
                    suscription_3.autoRenew=true;
                listInvoice[2].merchant.suscriptions=&suscription_3;

                //Invoice - Merchant - Location
                Location locations_3;
                listInvoice[2].merchant.numLocation=1;
                listInvoice[2].merchant.locations=&locations_3;

                locations_3.numTerminal=1;
                    Terminal terminals_3;
                        terminals_3.id=1;
                        terminals_3.name="name3";
                        terminals_3.details="details3";
                    locations_3.terminals=&terminals_3;

                    locations_3.latitude=5.5;
                    locations_3.longitude=5.5;

                    locations_3.address.addressLine1="address13";
                    locations_3.address.addressline2="address23";
                    locations_3.address.country="USA3";
                    locations_3.address.state="state3";
                    locations_3.address.city="city3";
                    locations_3.address.zipCode="12345";

                    locations_3.address.type="HOME";
                    locations_3.address.mainAddress=false;

                //Invoice - Merchant - User
                listInvoice[2].merchant.user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                listInvoice[2].merchant.user.isAvailable=true;
                listInvoice[2].merchant.user.id=1;
                listInvoice[2].merchant.user.companyName="namecompany3";
                listInvoice[2].merchant.user.nickName="andres3";
                listInvoice[2].merchant.user.firstName="andres3";
                listInvoice[2].merchant.user.lastName="andres3";
                listInvoice[2].merchant.user.middleName="andres3";
                listInvoice[2].merchant.user.email="email3@email.com";
                listInvoice[2].merchant.user.country="Colombia3";
                listInvoice[2].merchant.user.type="CONSUMER";

                listInvoice[2].merchant.user.numGroups=1;
                UserGroup usergroup_3;
                listInvoice[2].merchant.user.usergroup=&usergroup_3;
                    usergroup_3.groupName="group3";
                    usergroup_3.numPermissions=1;
                    Permissions permissions_3;
                        permissions_3.permissionName="permission3";
                        permissions_3.canEdit=false;
                        permissions_3.canDelete=false;
                        permissions_3.canRead=false;
                        permissions_3.canAdd=false;
                    usergroup_3.permissions=&permissions_3;
                    usergroup_3.groupId=5;

                listInvoice[2].merchant.user.numPaymentMethod=1;
                PaymentMethod paymentmethod_3;
                listInvoice[2].merchant.user.paymentmethod=&paymentmethod_3;
                    paymentmethod_3.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod_3.id=5;
                    paymentmethod_3.responsible="alguien";
                    paymentmethod_3.type="AMERICAN_EXPRESS";

                listInvoice[2].merchant.user.numPhones=1;
                Phones phones_3;
                listInvoice[2].merchant.user.phones=&phones_3;
                    phones_3.country.available = true;
                    phones_3.country.code="12";
                    phones_3.country.name="USA";
                    phones_3.country.shortName="US";
                    phones_3.phoneNumber="123";
                    phones_3.type="MOBILE";

                listInvoice[2].merchant.user.numPermissions=1;
                Permissions permissions1_3;
                listInvoice[2].merchant.user.permissions=&permissions1_3;
                    permissions1_3.permissionName="permission";
                    permissions1_3.canEdit=false;
                    permissions1_3.canDelete=false;
                    permissions1_3.canRead=false;
                    permissions1_3.canAdd=false;

            //Invoice - Consumer
            //account.consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
            listInvoice[2].consumer.title="title";
            listInvoice[2].consumer.birthDate="01/01/2010";

            listInvoice[2].consumer.mainaddress.addressLine1 = "direction13";
            listInvoice[2].consumer.mainaddress.addressline2 = "direction23";
            listInvoice[2].consumer.mainaddress.country = "Spain3";
            listInvoice[2].consumer.mainaddress.state = "Catalunia3";
            listInvoice[2].consumer.mainaddress.city = "Barca3";
            listInvoice[2].consumer.mainaddress.zipCode = "1234";
            listInvoice[2].consumer.mainaddress.type = "HOME";
            listInvoice[2].consumer.mainaddress.mainAddress = true;

                listInvoice[2].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                listInvoice[2].consumer.appsettings.language="espanol";
                listInvoice[2].consumer.appsettings.screenLockMinutes=44;
                listInvoice[2].consumer.appsettings.screenLockSeconds=55;

            listInvoice[2].consumer.loyaltysettings.numCategory=1;
                Category category_3;
                    category_3.id=1234;
                    category_3.name="nombre";
                    //category_3.category="parent";
            listInvoice[2].consumer.loyaltysettings.category=&category_3;

            // // // // user as merchant

            listInvoice[2].consumer.loyaltysettings.numMerchant=1;
            User merchant_3;
            listInvoice[2].consumer.loyaltysettings.merchant=&merchant_3;
                merchant_3.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant_3.isAvailable=true;
                merchant_3.id=1;
                merchant_3.companyName="namecompany";
                merchant_3.nickName="andres";
                merchant_3.firstName="andres";
                merchant_3.lastName="andres";
                merchant_3.middleName="andres";
                merchant_3.email="email@email.com";
                merchant_3.country="usa";
                merchant_3.type="CONSUMER";

                merchant_3.numGroups=1;
                    UserGroup usergroup1_3;
                    merchant_3.usergroup=&usergroup1_3;
                    usergroup1_3.groupName="group";
                    usergroup1_3.numPermissions=1;
                        Permissions permissions2_3;
                        permissions2_3.permissionName="permission";
                        permissions2_3.canEdit=false;
                        permissions2_3.canDelete=false;
                        permissions2_3.canRead=false;
                        permissions2_3.canAdd=false;
                        usergroup1_3.permissions=&permissions2_3;
                        usergroup1_3.groupId=5;

                merchant_3.numPaymentMethod=1;
                PaymentMethod paymentmethod2_3;
                    merchant_3.paymentmethod=&paymentmethod2_3;
                    paymentmethod2_3.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod2_3.id=5;
                    paymentmethod2_3.responsible="alguien";
                    paymentmethod2_3.type="AMERICAN_EXPRESS";

                merchant_3.numPhones=1;
                    Phones phones2_3;
                    merchant_3.phones=&phones2_3;
                    phones2_3.country.available = true;
                    phones2_3.country.code="12";
                    phones2_3.country.name="USA";
                    phones2_3.country.shortName="US";

                    phones2_3.phoneNumber="123";
                    phones2_3.type="MOBILE";


                    merchant_3.numPermissions=1;
                    Permissions permissions4_3;
                        merchant_3.permissions=&permissions4_3;

                        permissions4_3.permissionName="permission";
                        permissions4_3.canEdit=false;
                        permissions4_3.canDelete=false;
                        permissions4_3.canRead=false;
                        permissions4_3.canAdd=false;


                    listInvoice[2].consumer.loyaltysettings.numAddress=1;
                        Address address1_3;
                            address1_3.addressLine1="address1";
                            address1_3.addressline2="address2";
                            address1_3.country="USA";
                            address1_3.state="state";
                            address1_3.city="city";
                            address1_3.zipCode="12345";
                            address1_3.type="HOME";
                            address1_3.mainAddress=false;
                    listInvoice[2].consumer.loyaltysettings.address=&address1_3;

                    listInvoice[2].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                    listInvoice[2].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                    listInvoice[2].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                    listInvoice[2].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                    listInvoice[2].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


            listInvoice[2].consumer.numAddress=1;
            Address address2_3;
                address2_3.addressLine1="address1";
                address2_3.addressline2="address2";
                address2_3.country="USA";
                address2_3.state="state";
                address2_3.city="city";
                address2_3.zipCode="12345";
                address2_3.type="HOME";
                address2_3.mainAddress=false;
            listInvoice[2].consumer.address=&address2_3;

            //Invoice - Address
            listInvoice[2].address.addressLine1="address1";
            listInvoice[2].address.addressline2="address2";
            listInvoice[2].address.country="USA";
            listInvoice[2].address.state="state";
            listInvoice[2].address.city="city";
            listInvoice[2].address.zipCode="12345";
            listInvoice[2].address.type="HOME";
            listInvoice[2].address.mainAddress=false;


        listInvoice[2].totalAmount=5.0;
        listInvoice[2].itemsAmount=5.0;
        listInvoice[2].savingAmount=5.0;

            //Invoice - PaymentMethod
            listInvoice[2].paymentmethod.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
            listInvoice[2].paymentmethod.id=5;
            listInvoice[2].paymentmethod.responsible="alguien";
            listInvoice[2].paymentmethod.type="AMERICAN_EXPRESS";

        listInvoice[2].numInvoiceItem=1;
        InvoiceItem invoiceitem_3;
            invoiceitem_3.quantity=1;
            invoiceitem_3.totalCost=5.5;
        listInvoice[2].invoiceitem=&invoiceitem_3;


     buildJson buildJsonout;
     buildJsonout.buildJsonInvoice(listInvoice,3,obj,valOut);
     jSon=write(valOut);
     delete []listInvoice;
    return jSon;

#endif
}




////Account
string ProcessGetPayableAccountsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Payable Accounts");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETPAYACC";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetPayableAccounts?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
       string jSon;
        Object obj;
        Value valOut;

        Account account[3];
            // Account
            account[0].id=9999;
            account[0].invoiceNumber=5432;
            account[0].ammount=10.0;
            account[0].companyName="compania";
            account[0].dateIssued="01/01/2010";
            account[0].dateDue="01/01/2010";
            account[0].type="PAYABLE";
            account[0].priority="NORMAL";

            // account  consumer
//            account[0].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[0].consumer.title="title";
                account[0].consumer.birthDate="01/01/2010";

                account[0].consumer.mainaddress.addressLine1 = "direction1";
                account[0].consumer.mainaddress.addressline2 = "direction2";
                account[0].consumer.mainaddress.country = "Spain";
                account[0].consumer.mainaddress.state = "Catalunia";
                account[0].consumer.mainaddress.city = "Barca";
                account[0].consumer.mainaddress.zipCode = "1234";
                account[0].consumer.mainaddress.type = "HOME";
                account[0].consumer.mainaddress.mainAddress = true;

                    account[0].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[0].consumer.appsettings.language="espanol";
                    account[0].consumer.appsettings.screenLockMinutes=44;
                    account[0].consumer.appsettings.screenLockSeconds=55;

                account[0].consumer.loyaltysettings.numCategory=1;
                    Category category;
                        category.id=1234;
                        category.name="nombre";
//                        category.category="parent";
                account[0].consumer.loyaltysettings.category=&category;

                // // // // user as merchant

                account[0].consumer.loyaltysettings.numMerchant=1;
                User merchant;
                account[0].consumer.loyaltysettings.merchant=&merchant;
                    merchant.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant.isAvailable=true;
                    merchant.id=1;
                    merchant.companyName="name company";
                    merchant.nickName="andres";
                    merchant.firstName="andres";
                    merchant.lastName="andres";
                    merchant.middleName="andres";
                    merchant.email="email@email.com";
                    merchant.country="usa";
                    merchant.type="CONSUMER";

                    merchant.numGroups=1;
                        UserGroup usergroup1;
                        merchant.usergroup=&usergroup1;
                        usergroup1.groupName="group";
                        usergroup1.numPermissions=1;
                            Permissions permissions2;
                            permissions2.permissionName="permission";
                            permissions2.canEdit=false;
                            permissions2.canDelete=false;
                            permissions2.canRead=false;
                            permissions2.canAdd=false;
                            usergroup1.permissions=&permissions2;
                            usergroup1.groupId=5;

                    merchant.numPaymentMethod=1;
                    PaymentMethod paymentmethod2;
                        merchant.paymentmethod=&paymentmethod2;
                        paymentmethod2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2.id=5;
                        paymentmethod2.responsible="alguien";
                        paymentmethod2.type="AMERICAN_EXPRESS";

                    merchant.numPhones=1;
                        Phones phones2;
                        merchant.phones=&phones2;
                        phones2.country.available = true;
                        phones2.country.code="12";
                        phones2.country.name="USA";
                        phones2.country.shortName="US";


                        phones2.phoneNumber="123";
                        phones2.type="MOBILE";


                        merchant.numPermissions=1;
                        Permissions permissions4;
                            merchant.permissions=&permissions4;

                            permissions4.permissionName="permission";
                            permissions4.canEdit=false;
                            permissions4.canDelete=false;
                            permissions4.canRead=false;
                            permissions4.canAdd=false;


                        account[0].consumer.loyaltysettings.numAddress=1;
                            Address address1;
                                address1.addressLine1="address1";
                                address1.addressline2="address2";
                                address1.country="USA";
                                address1.state="state";
                                address1.city="city";
                                address1.zipCode="12345";
                                address1.type="HOME";
                                address1.mainAddress=false;
                        account[0].consumer.loyaltysettings.address=&address1;

                        account[0].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[0].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[0].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[0].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[0].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[0].consumer.numAddress=1;
                Address address2;
                    address2.addressLine1="address1";
                    address2.addressline2="address2";
                    address2.country="USA";
                    address2.state="state";
                    address2.city="city";
                    address2.zipCode="12345";
                    address2.type="HOME";
                    address2.mainAddress=false;
            account[0].consumer.address=&address2;

            account[0].numInvoiceItem=1;
                InvoiceItem invoiceitem;
                    invoiceitem.quantity=100;
                    invoiceitem.totalCost=4.0;
            account[0].invoiceitem=&invoiceitem;



            ///////////////////////////////////////////////////////////
            ////////////////      ACCOUNT 2      //////////////////////
            ///////////////////////////////////////////////////////////

            // Account
            account[1].id=8888;
            account[1].invoiceNumber=3254;
            account[1].ammount=10.0;
            account[1].companyName="compania2";
            account[1].dateIssued="01/01/2010";
            account[1].dateDue="01/01/2010";
            account[1].type="PAYABLE";
            account[1].priority="NORMAL";

            // Account  consumer
//            account[1].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[1].consumer.title="title2";
                account[1].consumer.birthDate="01/01/2010";

                account[1].consumer.mainaddress.addressLine1 = "direction12";
                account[1].consumer.mainaddress.addressline2 = "direction22";
                account[1].consumer.mainaddress.country = "Spain2";
                account[1].consumer.mainaddress.state = "Catalunia2";
                account[1].consumer.mainaddress.city = "Barca2";
                account[1].consumer.mainaddress.zipCode = "12345";
                account[1].consumer.mainaddress.type = "HOME";
                account[1].consumer.mainaddress.mainAddress = true;

                    account[1].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[1].consumer.appsettings.language="espanol";
                    account[1].consumer.appsettings.screenLockMinutes=44;
                    account[1].consumer.appsettings.screenLockSeconds=55;

                account[1].consumer.loyaltysettings.numCategory=1;
                    Category category2;
                        category2.id=1234;
                        category2.name="nombre2";
//                        category.category="parent";
                account[1].consumer.loyaltysettings.category=&category2;

                // // // // user as merchant

                account[1].consumer.loyaltysettings.numMerchant=1;
                User merchant2;
                account[1].consumer.loyaltysettings.merchant=&merchant2;
                    merchant2.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant2.isAvailable=true;
                    merchant2.id=1;
                    merchant2.companyName="namecompany2";
                    merchant2.nickName="andres2";
                    merchant2.firstName="andres2";
                    merchant2.lastName="andres2";
                    merchant2.middleName="andres2";
                    merchant2.email="email2@email.com";
                    merchant2.country="usa2";
                    merchant2.type="CONSUMER";

                    merchant2.numGroups=1;
                        UserGroup usergroup1_2;
                        merchant2.usergroup=&usergroup1_2;
                        usergroup1_2.groupName="group2";
                        usergroup1_2.numPermissions=1;
                            Permissions permissions2_2;
                            permissions2_2.permissionName="permission2";
                            permissions2_2.canEdit=false;
                            permissions2_2.canDelete=false;
                            permissions2_2.canRead=false;
                            permissions2_2.canAdd=false;
                            usergroup1_2.permissions=&permissions2_2;
                            usergroup1_2.groupId=5;

                    merchant2.numPaymentMethod=1;
                    PaymentMethod paymentmethod2_2;
                        merchant2.paymentmethod=&paymentmethod2_2;
                        paymentmethod2_2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2_2.id=5;
                        paymentmethod2_2.responsible="alguien2";
                        paymentmethod2_2.type="AMERICAN_EXPRESS";

                    merchant2.numPhones=1;
                        Phones phones2_2;
                        merchant2.phones=&phones2_2;
                        phones2_2.country.available = true;
                        phones2_2.country.code="123";
                        phones2_2.country.name="USA2";
                        phones2_2.country.shortName="US";


                        phones2_2.phoneNumber="123";
                        phones2_2.type="MOBILE";


                        merchant2.numPermissions=1;
                        Permissions permissions4_2;
                            merchant2.permissions=&permissions4_2;

                            permissions4_2.permissionName="permission2";
                            permissions4_2.canEdit=false;
                            permissions4_2.canDelete=false;
                            permissions4_2.canRead=false;
                            permissions4_2.canAdd=false;


                        account[1].consumer.loyaltysettings.numAddress=1;
                            Address address1_2;
                                address1_2.addressLine1="address12";
                                address1_2.addressline2="address22";
                                address1_2.country="USA2";
                                address1_2.state="state2";
                                address1_2.city="city2";
                                address1_2.zipCode="12345";
                                address1_2.type="HOME";
                                address1_2.mainAddress=false;
                        account[1].consumer.loyaltysettings.address=&address1_2;

                        account[1].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[1].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[1].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[1].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[1].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[1].consumer.numAddress=1;
                Address address2_2;
                    address2_2.addressLine1="address12";
                    address2_2.addressline2="address22";
                    address2_2.country="USA2";
                    address2_2.state="state";
                    address2_2.city="city";
                    address2_2.zipCode="12345";
                    address2_2.type="HOME";
                    address2_2.mainAddress=false;
            account[1].consumer.address=&address2_2;

            account[1].numInvoiceItem=1;
                InvoiceItem invoiceitem2;
                    invoiceitem2.quantity=100;
                    invoiceitem2.totalCost=4.0;
            account[1].invoiceitem=&invoiceitem2;




            ///////////////////////////////////////////////////////////
            ////////////////      ACCOUNT 3      //////////////////////
            ///////////////////////////////////////////////////////////

            // Account
            account[2].id=7777;
            account[2].invoiceNumber=5454;
            account[2].ammount=10.0;
            account[2].companyName="compania3";
            account[2].dateIssued="01/01/2010";
            account[2].dateDue="01/01/2010";
            account[2].type="PAYABLE";
            account[2].priority="NORMAL";

            // Account  consumer
//            account[2].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[2].consumer.title="title3";
                account[2].consumer.birthDate="01/01/2010";

                account[2].consumer.mainaddress.addressLine1 = "direction13";
                account[2].consumer.mainaddress.addressline2 = "direction23";
                account[2].consumer.mainaddress.country = "Spain3";
                account[2].consumer.mainaddress.state = "Catalunia3";
                account[2].consumer.mainaddress.city = "Barca3";
                account[2].consumer.mainaddress.zipCode = "12343";
                account[2].consumer.mainaddress.type = "HOME";
                account[2].consumer.mainaddress.mainAddress = true;

                    account[2].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[2].consumer.appsettings.language="espanol";
                    account[2].consumer.appsettings.screenLockMinutes=44;
                    account[2].consumer.appsettings.screenLockSeconds=55;

                account[2].consumer.loyaltysettings.numCategory=1;
                    Category category3;
                        category3.id=1234;
                        category3.name="nombre";
//                        category.category="parent";
                account[2].consumer.loyaltysettings.category=&category3;

                // // // // user as merchant

                account[2].consumer.loyaltysettings.numMerchant=1;
                User merchant3;
                account[2].consumer.loyaltysettings.merchant=&merchant3;
                    merchant3.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant3.isAvailable=true;
                    merchant3.id=1;
                    merchant3.companyName="namecompany3";
                    merchant3.nickName="andres3";
                    merchant3.firstName="andres3";
                    merchant3.lastName="andres3";
                    merchant3.middleName="andres3";
                    merchant3.email="email3@email.com";
                    merchant3.country="usa3";
                    merchant3.type="CONSUMER";

                    merchant3.numGroups=1;
                        UserGroup usergroup1_3;
                        merchant3.usergroup=&usergroup1_3;
                        usergroup1_3.groupName="group3";
                        usergroup1_3.numPermissions=1;
                            Permissions permissions2_3;
                            permissions2_3.permissionName="permission3";
                            permissions2_3.canEdit=false;
                            permissions2_3.canDelete=false;
                            permissions2_3.canRead=false;
                            permissions2_3.canAdd=false;
                            usergroup1_3.permissions=&permissions2_3;
                            usergroup1_3.groupId=5;

                    merchant3.numPaymentMethod=1;
                    PaymentMethod paymentmethod2_3;
                        merchant3.paymentmethod=&paymentmethod2_3;
                        paymentmethod2_3.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2_3.id=5;
                        paymentmethod2_3.responsible="alguien";
                        paymentmethod2_3.type="AMERICAN_EXPRESS";

                    merchant3.numPhones=1;
                        Phones phones2_3;
                        merchant3.phones=&phones2_3;
                        phones2_3.country.available = true;
                        phones2_3.country.code="12";
                        phones2_3.country.name="USA";
                        phones2_3.country.shortName="US";


                        phones2_3.phoneNumber="123";
                        phones2_3.type="MOBILE";


                        merchant3.numPermissions=1;
                        Permissions permissions4_3;
                            merchant3.permissions=&permissions4_3;

                            permissions4_3.permissionName="permission3";
                            permissions4_3.canEdit=false;
                            permissions4_3.canDelete=false;
                            permissions4_3.canRead=false;
                            permissions4_3.canAdd=false;


                        account[2].consumer.loyaltysettings.numAddress=1;
                            Address address1_3;
                                address1_3.addressLine1="address13";
                                address1_3.addressline2="address23";
                                address1_3.country="USA3";
                                address1_3.state="state3";
                                address1_3.city="city3";
                                address1_3.zipCode="123453";
                                address1_3.type="HOME";
                                address1_3.mainAddress=false;
                        account[2].consumer.loyaltysettings.address=&address1_3;

                        account[2].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[2].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[2].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[2].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[2].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[2].consumer.numAddress=1;
                Address address2_3;
                    address2_3.addressLine1="address13";
                    address2_3.addressline2="address23";
                    address2_3.country="USA3";
                    address2_3.state="state3";
                    address2_3.city="city3";
                    address2_3.zipCode="123453";
                    address2_3.type="HOME";
                    address2_3.mainAddress=false;
            account[2].consumer.address=&address2_3;

            account[2].numInvoiceItem=1;
                InvoiceItem invoiceitem3;
                    invoiceitem3.quantity=100;
                    invoiceitem3.totalCost=4.0;
            account[2].invoiceitem=&invoiceitem3;



            buildJson buildJsonout;
            buildJsonout.buildJsonAccount(account,3,obj,valOut);
            jSon=write(valOut);
            return jSon;

    #endif


}

string ProcessGetReceivableAccountsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Receivable Accounts");
       try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRECACC";



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {

            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length(), true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetReceivableAccounts?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
       string jSon;
        Object obj;
        Value valOut;

        Account account[3];
            // Account
            account[0].id=9999;
            account[0].invoiceNumber=5432;
            account[0].ammount=10.0;
            account[0].companyName="compania";
            account[0].dateIssued="01/01/2010";
            account[0].dateDue="01/01/2010";
            account[0].type="PAYABLE";
            account[0].priority="NORMAL";

            // account  consumer
//            account[0].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[0].consumer.title="title";
                account[0].consumer.birthDate="01/01/2010";

                account[0].consumer.mainaddress.addressLine1 = "direction1";
                account[0].consumer.mainaddress.addressline2 = "direction2";
                account[0].consumer.mainaddress.country = "Spain";
                account[0].consumer.mainaddress.state = "Catalunia";
                account[0].consumer.mainaddress.city = "Barca";
                account[0].consumer.mainaddress.zipCode = "1234";
                account[0].consumer.mainaddress.type = "HOME";
                account[0].consumer.mainaddress.mainAddress = true;

                    account[0].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[0].consumer.appsettings.language="espanol";
                    account[0].consumer.appsettings.screenLockMinutes=44;
                    account[0].consumer.appsettings.screenLockSeconds=55;

                account[0].consumer.loyaltysettings.numCategory=1;
                    Category category;
                        category.id=1234;
                        category.name="nombre";
//                        category.category="parent";
                account[0].consumer.loyaltysettings.category=&category;

                // // // // user as merchant

                account[0].consumer.loyaltysettings.numMerchant=1;
                User merchant;
                account[0].consumer.loyaltysettings.merchant=&merchant;
                    merchant.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant.isAvailable=true;
                    merchant.id=1;
                    merchant.companyName="name company";
                    merchant.nickName="andres";
                    merchant.firstName="andres";
                    merchant.lastName="andres";
                    merchant.middleName="andres";
                    merchant.email="email@email.com";
                    merchant.country="usa";
                    merchant.type="CONSUMER";

                    merchant.numGroups=1;
                        UserGroup usergroup1;
                        merchant.usergroup=&usergroup1;
                        usergroup1.groupName="group";
                        usergroup1.numPermissions=1;
                            Permissions permissions2;
                            permissions2.permissionName="permission";
                            permissions2.canEdit=false;
                            permissions2.canDelete=false;
                            permissions2.canRead=false;
                            permissions2.canAdd=false;
                            usergroup1.permissions=&permissions2;
                            usergroup1.groupId=5;

                    merchant.numPaymentMethod=1;
                    PaymentMethod paymentmethod2;
                        merchant.paymentmethod=&paymentmethod2;
                        paymentmethod2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2.id=5;
                        paymentmethod2.responsible="alguien";
                        paymentmethod2.type="AMERICAN_EXPRESS";

                    merchant.numPhones=1;
                        Phones phones2;
                        merchant.phones=&phones2;
                        phones2.country.available = true;
                        phones2.country.code="12";
                        phones2.country.name="USA";
                        phones2.country.shortName="US";


                        phones2.phoneNumber="123";
                        phones2.type="MOBILE";


                        merchant.numPermissions=1;
                        Permissions permissions4;
                            merchant.permissions=&permissions4;

                            permissions4.permissionName="permission";
                            permissions4.canEdit=false;
                            permissions4.canDelete=false;
                            permissions4.canRead=false;
                            permissions4.canAdd=false;


                        account[0].consumer.loyaltysettings.numAddress=1;
                            Address address1;
                                address1.addressLine1="address1";
                                address1.addressline2="address2";
                                address1.country="USA";
                                address1.state="state";
                                address1.city="city";
                                address1.zipCode="12345";
                                address1.type="HOME";
                                address1.mainAddress=false;
                        account[0].consumer.loyaltysettings.address=&address1;

                        account[0].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[0].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[0].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[0].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[0].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[0].consumer.numAddress=1;
                Address address2;
                    address2.addressLine1="address1";
                    address2.addressline2="address2";
                    address2.country="USA";
                    address2.state="state";
                    address2.city="city";
                    address2.zipCode="12345";
                    address2.type="HOME";
                    address2.mainAddress=false;
            account[0].consumer.address=&address2;

            account[0].numInvoiceItem=1;
                InvoiceItem invoiceitem;
                    invoiceitem.quantity=100;
                    invoiceitem.totalCost=4.0;
            account[0].invoiceitem=&invoiceitem;



            ///////////////////////////////////////////////////////////
            ////////////////      ACCOUNT 2      //////////////////////
            ///////////////////////////////////////////////////////////

            // Account
            account[1].id=8888;
            account[1].invoiceNumber=3254;
            account[1].ammount=10.0;
            account[1].companyName="compania2";
            account[1].dateIssued="01/01/2010";
            account[1].dateDue="01/01/2010";
            account[1].type="PAYABLE";
            account[1].priority="NORMAL";

            // Account  consumer
//            account[1].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[1].consumer.title="title2";
                account[1].consumer.birthDate="01/01/2010";

                account[1].consumer.mainaddress.addressLine1 = "direction12";
                account[1].consumer.mainaddress.addressline2 = "direction22";
                account[1].consumer.mainaddress.country = "Spain2";
                account[1].consumer.mainaddress.state = "Catalunia2";
                account[1].consumer.mainaddress.city = "Barca2";
                account[1].consumer.mainaddress.zipCode = "12345";
                account[1].consumer.mainaddress.type = "HOME";
                account[1].consumer.mainaddress.mainAddress = true;

                    account[1].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[1].consumer.appsettings.language="espanol";
                    account[1].consumer.appsettings.screenLockMinutes=44;
                    account[1].consumer.appsettings.screenLockSeconds=55;

                account[1].consumer.loyaltysettings.numCategory=1;
                    Category category2;
                        category2.id=1234;
                        category2.name="nombre2";
//                        category.category="parent";
                account[1].consumer.loyaltysettings.category=&category2;

                // // // // user as merchant

                account[1].consumer.loyaltysettings.numMerchant=1;
                User merchant2;
                account[1].consumer.loyaltysettings.merchant=&merchant2;
                    merchant2.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant2.isAvailable=true;
                    merchant2.id=1;
                    merchant2.companyName="namecompany2";
                    merchant2.nickName="andres2";
                    merchant2.firstName="andres2";
                    merchant2.lastName="andres2";
                    merchant2.middleName="andres2";
                    merchant2.email="email2@email.com";
                    merchant2.country="usa2";
                    merchant2.type="CONSUMER";

                    merchant2.numGroups=1;
                        UserGroup usergroup1_2;
                        merchant2.usergroup=&usergroup1_2;
                        usergroup1_2.groupName="group2";
                        usergroup1_2.numPermissions=1;
                            Permissions permissions2_2;
                            permissions2_2.permissionName="permission2";
                            permissions2_2.canEdit=false;
                            permissions2_2.canDelete=false;
                            permissions2_2.canRead=false;
                            permissions2_2.canAdd=false;
                            usergroup1_2.permissions=&permissions2_2;
                            usergroup1_2.groupId=5;

                    merchant2.numPaymentMethod=1;
                    PaymentMethod paymentmethod2_2;
                        merchant2.paymentmethod=&paymentmethod2_2;
                        paymentmethod2_2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2_2.id=5;
                        paymentmethod2_2.responsible="alguien2";
                        paymentmethod2_2.type="AMERICAN_EXPRESS";

                    merchant2.numPhones=1;
                        Phones phones2_2;
                        merchant2.phones=&phones2_2;
                        phones2_2.country.available = true;
                        phones2_2.country.code="123";
                        phones2_2.country.name="USA2";
                        phones2_2.country.shortName="US";


                        phones2_2.phoneNumber="123";
                        phones2_2.type="MOBILE";


                        merchant2.numPermissions=1;
                        Permissions permissions4_2;
                            merchant2.permissions=&permissions4_2;

                            permissions4_2.permissionName="permission2";
                            permissions4_2.canEdit=false;
                            permissions4_2.canDelete=false;
                            permissions4_2.canRead=false;
                            permissions4_2.canAdd=false;


                        account[1].consumer.loyaltysettings.numAddress=1;
                            Address address1_2;
                                address1_2.addressLine1="address12";
                                address1_2.addressline2="address22";
                                address1_2.country="USA2";
                                address1_2.state="state2";
                                address1_2.city="city2";
                                address1_2.zipCode="12345";
                                address1_2.type="HOME";
                                address1_2.mainAddress=false;
                        account[1].consumer.loyaltysettings.address=&address1_2;

                        account[1].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[1].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[1].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[1].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[1].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[1].consumer.numAddress=1;
                Address address2_2;
                    address2_2.addressLine1="address12";
                    address2_2.addressline2="address22";
                    address2_2.country="USA2";
                    address2_2.state="state";
                    address2_2.city="city";
                    address2_2.zipCode="12345";
                    address2_2.type="HOME";
                    address2_2.mainAddress=false;
            account[1].consumer.address=&address2_2;

            account[1].numInvoiceItem=1;
                InvoiceItem invoiceitem2;
                    invoiceitem2.quantity=100;
                    invoiceitem2.totalCost=4.0;
            account[1].invoiceitem=&invoiceitem2;




            ///////////////////////////////////////////////////////////
            ////////////////      ACCOUNT 3      //////////////////////
            ///////////////////////////////////////////////////////////

            // Account
            account[2].id=7777;
            account[2].invoiceNumber=5454;
            account[2].ammount=10.0;
            account[2].companyName="compania3";
            account[2].dateIssued="01/01/2010";
            account[2].dateDue="01/01/2010";
            account[2].type="PAYABLE";
            account[2].priority="NORMAL";

            // Account  consumer
//            account[2].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[2].consumer.title="title3";
                account[2].consumer.birthDate="01/01/2010";

                account[2].consumer.mainaddress.addressLine1 = "direction13";
                account[2].consumer.mainaddress.addressline2 = "direction23";
                account[2].consumer.mainaddress.country = "Spain3";
                account[2].consumer.mainaddress.state = "Catalunia3";
                account[2].consumer.mainaddress.city = "Barca3";
                account[2].consumer.mainaddress.zipCode = "12343";
                account[2].consumer.mainaddress.type = "HOME";
                account[2].consumer.mainaddress.mainAddress = true;

                    account[2].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[2].consumer.appsettings.language="espanol";
                    account[2].consumer.appsettings.screenLockMinutes=44;
                    account[2].consumer.appsettings.screenLockSeconds=55;

                account[2].consumer.loyaltysettings.numCategory=1;
                    Category category3;
                        category3.id=1234;
                        category3.name="nombre";
//                        category.category="parent";
                account[2].consumer.loyaltysettings.category=&category3;

                // // // // user as merchant

                account[2].consumer.loyaltysettings.numMerchant=1;
                User merchant3;
                account[2].consumer.loyaltysettings.merchant=&merchant3;
                    merchant3.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant3.isAvailable=true;
                    merchant3.id=1;
                    merchant3.companyName="namecompany3";
                    merchant3.nickName="andres3";
                    merchant3.firstName="andres3";
                    merchant3.lastName="andres3";
                    merchant3.middleName="andres3";
                    merchant3.email="email3@email.com";
                    merchant3.country="usa3";
                    merchant3.type="CONSUMER";

                    merchant3.numGroups=1;
                        UserGroup usergroup1_3;
                        merchant3.usergroup=&usergroup1_3;
                        usergroup1_3.groupName="group3";
                        usergroup1_3.numPermissions=1;
                            Permissions permissions2_3;
                            permissions2_3.permissionName="permission3";
                            permissions2_3.canEdit=false;
                            permissions2_3.canDelete=false;
                            permissions2_3.canRead=false;
                            permissions2_3.canAdd=false;
                            usergroup1_3.permissions=&permissions2_3;
                            usergroup1_3.groupId=5;

                    merchant3.numPaymentMethod=1;
                    PaymentMethod paymentmethod2_3;
                        merchant3.paymentmethod=&paymentmethod2_3;
                        paymentmethod2_3.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2_3.id=5;
                        paymentmethod2_3.responsible="alguien";
                        paymentmethod2_3.type="AMERICAN_EXPRESS";

                    merchant3.numPhones=1;
                        Phones phones2_3;
                        merchant3.phones=&phones2_3;
                        phones2_3.country.available = true;
                        phones2_3.country.code="12";
                        phones2_3.country.name="USA";
                        phones2_3.country.shortName="US";


                        phones2_3.phoneNumber="123";
                        phones2_3.type="MOBILE";


                        merchant3.numPermissions=1;
                        Permissions permissions4_3;
                            merchant3.permissions=&permissions4_3;

                            permissions4_3.permissionName="permission3";
                            permissions4_3.canEdit=false;
                            permissions4_3.canDelete=false;
                            permissions4_3.canRead=false;
                            permissions4_3.canAdd=false;


                        account[2].consumer.loyaltysettings.numAddress=1;
                            Address address1_3;
                                address1_3.addressLine1="address13";
                                address1_3.addressline2="address23";
                                address1_3.country="USA3";
                                address1_3.state="state3";
                                address1_3.city="city3";
                                address1_3.zipCode="123453";
                                address1_3.type="HOME";
                                address1_3.mainAddress=false;
                        account[2].consumer.loyaltysettings.address=&address1_3;

                        account[2].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[2].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[2].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[2].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[2].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[2].consumer.numAddress=1;
                Address address2_3;
                    address2_3.addressLine1="address13";
                    address2_3.addressline2="address23";
                    address2_3.country="USA3";
                    address2_3.state="state3";
                    address2_3.city="city3";
                    address2_3.zipCode="123453";
                    address2_3.type="HOME";
                    address2_3.mainAddress=false;
            account[2].consumer.address=&address2_3;

            account[2].numInvoiceItem=1;
                InvoiceItem invoiceitem3;
                    invoiceitem3.quantity=100;
                    invoiceitem3.totalCost=4.0;
            account[2].invoiceitem=&invoiceitem3;



            buildJson buildJsonout;
            buildJsonout.buildJsonAccount(account,3,obj,valOut);
            jSon=write(valOut);
            return jSon;

    #endif


}

string ProcessGetPayableAccountsByTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Payable Accounts By");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETPAYACCBY";


        //P121.42
		hResult["121.42"]=hData[__dateIssued];

		//P121.43
		hResult["121.43"]=hData[__dateDue];

		//P121.46
		hResult["121.46"]=hData[__priority];



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetPayableAccountsBy?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
       string jSon;
        Object obj;
        Value valOut;

        Account account[3];
            // Account
            account[0].id=9999;
            account[0].invoiceNumber=5432;
            account[0].ammount=10.0;
            account[0].companyName="compania";
            account[0].dateIssued="01/01/2010";
            account[0].dateDue="01/01/2010";
            account[0].type="PAYABLE";
            account[0].priority="NORMAL";

            // account  consumer
//            account[0].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[0].consumer.title="title";
                account[0].consumer.birthDate="01/01/2010";

                account[0].consumer.mainaddress.addressLine1 = "direction1";
                account[0].consumer.mainaddress.addressline2 = "direction2";
                account[0].consumer.mainaddress.country = "Spain";
                account[0].consumer.mainaddress.state = "Catalunia";
                account[0].consumer.mainaddress.city = "Barca";
                account[0].consumer.mainaddress.zipCode = "1234";
                account[0].consumer.mainaddress.type = "HOME";
                account[0].consumer.mainaddress.mainAddress = true;

                    account[0].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[0].consumer.appsettings.language="espanol";
                    account[0].consumer.appsettings.screenLockMinutes=44;
                    account[0].consumer.appsettings.screenLockSeconds=55;

                account[0].consumer.loyaltysettings.numCategory=1;
                    Category category;
                        category.id=1234;
                        category.name="nombre";
//                        category.category="parent";
                account[0].consumer.loyaltysettings.category=&category;

                // // // // user as merchant

                account[0].consumer.loyaltysettings.numMerchant=1;
                User merchant;
                account[0].consumer.loyaltysettings.merchant=&merchant;
                    merchant.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant.isAvailable=true;
                    merchant.id=1;
                    merchant.companyName="name company";
                    merchant.nickName="andres";
                    merchant.firstName="andres";
                    merchant.lastName="andres";
                    merchant.middleName="andres";
                    merchant.email="email@email.com";
                    merchant.country="usa";
                    merchant.type="CONSUMER";

                    merchant.numGroups=1;
                        UserGroup usergroup1;
                        merchant.usergroup=&usergroup1;
                        usergroup1.groupName="group";
                        usergroup1.numPermissions=1;
                            Permissions permissions2;
                            permissions2.permissionName="permission";
                            permissions2.canEdit=false;
                            permissions2.canDelete=false;
                            permissions2.canRead=false;
                            permissions2.canAdd=false;
                            usergroup1.permissions=&permissions2;
                            usergroup1.groupId=5;

                    merchant.numPaymentMethod=1;
                    PaymentMethod paymentmethod2;
                        merchant.paymentmethod=&paymentmethod2;
                        paymentmethod2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2.id=5;
                        paymentmethod2.responsible="alguien";
                        paymentmethod2.type="AMERICAN_EXPRESS";

                    merchant.numPhones=1;
                        Phones phones2;
                        merchant.phones=&phones2;
                        phones2.country.available = true;
                        phones2.country.code="12";
                        phones2.country.name="USA";
                        phones2.country.shortName="US";


                        phones2.phoneNumber="123";
                        phones2.type="MOBILE";


                        merchant.numPermissions=1;
                        Permissions permissions4;
                            merchant.permissions=&permissions4;

                            permissions4.permissionName="permission";
                            permissions4.canEdit=false;
                            permissions4.canDelete=false;
                            permissions4.canRead=false;
                            permissions4.canAdd=false;


                        account[0].consumer.loyaltysettings.numAddress=1;
                            Address address1;
                                address1.addressLine1="address1";
                                address1.addressline2="address2";
                                address1.country="USA";
                                address1.state="state";
                                address1.city="city";
                                address1.zipCode="12345";
                                address1.type="HOME";
                                address1.mainAddress=false;
                        account[0].consumer.loyaltysettings.address=&address1;

                        account[0].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[0].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[0].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[0].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[0].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[0].consumer.numAddress=1;
                Address address2;
                    address2.addressLine1="address1";
                    address2.addressline2="address2";
                    address2.country="USA";
                    address2.state="state";
                    address2.city="city";
                    address2.zipCode="12345";
                    address2.type="HOME";
                    address2.mainAddress=false;
            account[0].consumer.address=&address2;

            account[0].numInvoiceItem=1;
                InvoiceItem invoiceitem;
                    invoiceitem.quantity=100;
                    invoiceitem.totalCost=4.0;
            account[0].invoiceitem=&invoiceitem;



            ///////////////////////////////////////////////////////////
            ////////////////      ACCOUNT 2      //////////////////////
            ///////////////////////////////////////////////////////////

            // Account
            account[1].id=8888;
            account[1].invoiceNumber=3254;
            account[1].ammount=10.0;
            account[1].companyName="compania2";
            account[1].dateIssued="01/01/2010";
            account[1].dateDue="01/01/2010";
            account[1].type="PAYABLE";
            account[1].priority="NORMAL";

            // Account  consumer
//            account[1].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[1].consumer.title="title2";
                account[1].consumer.birthDate="01/01/2010";

                account[1].consumer.mainaddress.addressLine1 = "direction12";
                account[1].consumer.mainaddress.addressline2 = "direction22";
                account[1].consumer.mainaddress.country = "Spain2";
                account[1].consumer.mainaddress.state = "Catalunia2";
                account[1].consumer.mainaddress.city = "Barca2";
                account[1].consumer.mainaddress.zipCode = "12345";
                account[1].consumer.mainaddress.type = "HOME";
                account[1].consumer.mainaddress.mainAddress = true;

                    account[1].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[1].consumer.appsettings.language="espanol";
                    account[1].consumer.appsettings.screenLockMinutes=44;
                    account[1].consumer.appsettings.screenLockSeconds=55;

                account[1].consumer.loyaltysettings.numCategory=1;
                    Category category2;
                        category2.id=1234;
                        category2.name="nombre2";
//                        category.category="parent";
                account[1].consumer.loyaltysettings.category=&category2;

                // // // // user as merchant

                account[1].consumer.loyaltysettings.numMerchant=1;
                User merchant2;
                account[1].consumer.loyaltysettings.merchant=&merchant2;
                    merchant2.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant2.isAvailable=true;
                    merchant2.id=1;
                    merchant2.companyName="namecompany2";
                    merchant2.nickName="andres2";
                    merchant2.firstName="andres2";
                    merchant2.lastName="andres2";
                    merchant2.middleName="andres2";
                    merchant2.email="email2@email.com";
                    merchant2.country="usa2";
                    merchant2.type="CONSUMER";

                    merchant2.numGroups=1;
                        UserGroup usergroup1_2;
                        merchant2.usergroup=&usergroup1_2;
                        usergroup1_2.groupName="group2";
                        usergroup1_2.numPermissions=1;
                            Permissions permissions2_2;
                            permissions2_2.permissionName="permission2";
                            permissions2_2.canEdit=false;
                            permissions2_2.canDelete=false;
                            permissions2_2.canRead=false;
                            permissions2_2.canAdd=false;
                            usergroup1_2.permissions=&permissions2_2;
                            usergroup1_2.groupId=5;

                    merchant2.numPaymentMethod=1;
                    PaymentMethod paymentmethod2_2;
                        merchant2.paymentmethod=&paymentmethod2_2;
                        paymentmethod2_2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2_2.id=5;
                        paymentmethod2_2.responsible="alguien2";
                        paymentmethod2_2.type="AMERICAN_EXPRESS";

                    merchant2.numPhones=1;
                        Phones phones2_2;
                        merchant2.phones=&phones2_2;
                        phones2_2.country.available = true;
                        phones2_2.country.code="123";
                        phones2_2.country.name="USA2";
                        phones2_2.country.shortName="US";


                        phones2_2.phoneNumber="123";
                        phones2_2.type="MOBILE";


                        merchant2.numPermissions=1;
                        Permissions permissions4_2;
                            merchant2.permissions=&permissions4_2;

                            permissions4_2.permissionName="permission2";
                            permissions4_2.canEdit=false;
                            permissions4_2.canDelete=false;
                            permissions4_2.canRead=false;
                            permissions4_2.canAdd=false;


                        account[1].consumer.loyaltysettings.numAddress=1;
                            Address address1_2;
                                address1_2.addressLine1="address12";
                                address1_2.addressline2="address22";
                                address1_2.country="USA2";
                                address1_2.state="state2";
                                address1_2.city="city2";
                                address1_2.zipCode="12345";
                                address1_2.type="HOME";
                                address1_2.mainAddress=false;
                        account[1].consumer.loyaltysettings.address=&address1_2;

                        account[1].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[1].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[1].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[1].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[1].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[1].consumer.numAddress=1;
                Address address2_2;
                    address2_2.addressLine1="address12";
                    address2_2.addressline2="address22";
                    address2_2.country="USA2";
                    address2_2.state="state";
                    address2_2.city="city";
                    address2_2.zipCode="12345";
                    address2_2.type="HOME";
                    address2_2.mainAddress=false;
            account[1].consumer.address=&address2_2;

            account[1].numInvoiceItem=1;
                InvoiceItem invoiceitem2;
                    invoiceitem2.quantity=100;
                    invoiceitem2.totalCost=4.0;
            account[1].invoiceitem=&invoiceitem2;




            ///////////////////////////////////////////////////////////
            ////////////////      ACCOUNT 3      //////////////////////
            ///////////////////////////////////////////////////////////

            // Account
            account[2].id=7777;
            account[2].invoiceNumber=5454;
            account[2].ammount=10.0;
            account[2].companyName="compania3";
            account[2].dateIssued="01/01/2010";
            account[2].dateDue="01/01/2010";
            account[2].type="PAYABLE";
            account[2].priority="NORMAL";

            // Account  consumer
//            account[2].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[2].consumer.title="title3";
                account[2].consumer.birthDate="01/01/2010";

                account[2].consumer.mainaddress.addressLine1 = "direction13";
                account[2].consumer.mainaddress.addressline2 = "direction23";
                account[2].consumer.mainaddress.country = "Spain3";
                account[2].consumer.mainaddress.state = "Catalunia3";
                account[2].consumer.mainaddress.city = "Barca3";
                account[2].consumer.mainaddress.zipCode = "12343";
                account[2].consumer.mainaddress.type = "HOME";
                account[2].consumer.mainaddress.mainAddress = true;

                    account[2].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[2].consumer.appsettings.language="espanol";
                    account[2].consumer.appsettings.screenLockMinutes=44;
                    account[2].consumer.appsettings.screenLockSeconds=55;

                account[2].consumer.loyaltysettings.numCategory=1;
                    Category category3;
                        category3.id=1234;
                        category3.name="nombre";
//                        category.category="parent";
                account[2].consumer.loyaltysettings.category=&category3;

                // // // // user as merchant

                account[2].consumer.loyaltysettings.numMerchant=1;
                User merchant3;
                account[2].consumer.loyaltysettings.merchant=&merchant3;
                    merchant3.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant3.isAvailable=true;
                    merchant3.id=1;
                    merchant3.companyName="namecompany3";
                    merchant3.nickName="andres3";
                    merchant3.firstName="andres3";
                    merchant3.lastName="andres3";
                    merchant3.middleName="andres3";
                    merchant3.email="email3@email.com";
                    merchant3.country="usa3";
                    merchant3.type="CONSUMER";

                    merchant3.numGroups=1;
                        UserGroup usergroup1_3;
                        merchant3.usergroup=&usergroup1_3;
                        usergroup1_3.groupName="group3";
                        usergroup1_3.numPermissions=1;
                            Permissions permissions2_3;
                            permissions2_3.permissionName="permission3";
                            permissions2_3.canEdit=false;
                            permissions2_3.canDelete=false;
                            permissions2_3.canRead=false;
                            permissions2_3.canAdd=false;
                            usergroup1_3.permissions=&permissions2_3;
                            usergroup1_3.groupId=5;

                    merchant3.numPaymentMethod=1;
                    PaymentMethod paymentmethod2_3;
                        merchant3.paymentmethod=&paymentmethod2_3;
                        paymentmethod2_3.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2_3.id=5;
                        paymentmethod2_3.responsible="alguien";
                        paymentmethod2_3.type="AMERICAN_EXPRESS";

                    merchant3.numPhones=1;
                        Phones phones2_3;
                        merchant3.phones=&phones2_3;
                        phones2_3.country.available = true;
                        phones2_3.country.code="12";
                        phones2_3.country.name="USA";
                        phones2_3.country.shortName="US";


                        phones2_3.phoneNumber="123";
                        phones2_3.type="MOBILE";


                        merchant3.numPermissions=1;
                        Permissions permissions4_3;
                            merchant3.permissions=&permissions4_3;

                            permissions4_3.permissionName="permission3";
                            permissions4_3.canEdit=false;
                            permissions4_3.canDelete=false;
                            permissions4_3.canRead=false;
                            permissions4_3.canAdd=false;


                        account[2].consumer.loyaltysettings.numAddress=1;
                            Address address1_3;
                                address1_3.addressLine1="address13";
                                address1_3.addressline2="address23";
                                address1_3.country="USA3";
                                address1_3.state="state3";
                                address1_3.city="city3";
                                address1_3.zipCode="123453";
                                address1_3.type="HOME";
                                address1_3.mainAddress=false;
                        account[2].consumer.loyaltysettings.address=&address1_3;

                        account[2].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[2].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[2].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[2].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[2].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[2].consumer.numAddress=1;
                Address address2_3;
                    address2_3.addressLine1="address13";
                    address2_3.addressline2="address23";
                    address2_3.country="USA3";
                    address2_3.state="state3";
                    address2_3.city="city3";
                    address2_3.zipCode="123453";
                    address2_3.type="HOME";
                    address2_3.mainAddress=false;
            account[2].consumer.address=&address2_3;

            account[2].numInvoiceItem=1;
                InvoiceItem invoiceitem3;
                    invoiceitem3.quantity=100;
                    invoiceitem3.totalCost=4.0;
            account[2].invoiceitem=&invoiceitem3;



            buildJson buildJsonout;
            buildJsonout.buildJsonAccount(account,3,obj,valOut);
            jSon=write(valOut);
            return jSon;

    #endif


}

string ProcessGetReceivableAccountsByTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{

#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Receivable Accounts By");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETRECACCBY";


         //P121.42
		hResult["121.42"]=hData[__dateIssued];

		//P121.43
		hResult["121.43"]=hData[__dateDue];

		//P121.46
		hResult["121.46"]=hData[__priority];




        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetReceivableAccountsBy?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
       string jSon;
        Object obj;
        Value valOut;

        Account account[3];
            // Account
            account[0].id=9999;
            account[0].invoiceNumber=5432;
            account[0].ammount=10.0;
            account[0].companyName="compania";
            account[0].dateIssued="01/01/2010";
            account[0].dateDue="01/01/2010";
            account[0].type="PAYABLE";
            account[0].priority="NORMAL";

            // account  consumer
//            account[0].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[0].consumer.title="title";
                account[0].consumer.birthDate="01/01/2010";

                account[0].consumer.mainaddress.addressLine1 = "direction1";
                account[0].consumer.mainaddress.addressline2 = "direction2";
                account[0].consumer.mainaddress.country = "Spain";
                account[0].consumer.mainaddress.state = "Catalunia";
                account[0].consumer.mainaddress.city = "Barca";
                account[0].consumer.mainaddress.zipCode = "1234";
                account[0].consumer.mainaddress.type = "HOME";
                account[0].consumer.mainaddress.mainAddress = true;

                    account[0].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[0].consumer.appsettings.language="espanol";
                    account[0].consumer.appsettings.screenLockMinutes=44;
                    account[0].consumer.appsettings.screenLockSeconds=55;

                account[0].consumer.loyaltysettings.numCategory=1;
                    Category category;
                        category.id=1234;
                        category.name="nombre";
//                        category.category="parent";
                account[0].consumer.loyaltysettings.category=&category;

                // // // // user as merchant

                account[0].consumer.loyaltysettings.numMerchant=1;
                User merchant;
                account[0].consumer.loyaltysettings.merchant=&merchant;
                    merchant.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant.isAvailable=true;
                    merchant.id=1;
                    merchant.companyName="name company";
                    merchant.nickName="andres";
                    merchant.firstName="andres";
                    merchant.lastName="andres";
                    merchant.middleName="andres";
                    merchant.email="email@email.com";
                    merchant.country="usa";
                    merchant.type="CONSUMER";

                    merchant.numGroups=1;
                        UserGroup usergroup1;
                        merchant.usergroup=&usergroup1;
                        usergroup1.groupName="group";
                        usergroup1.numPermissions=1;
                            Permissions permissions2;
                            permissions2.permissionName="permission";
                            permissions2.canEdit=false;
                            permissions2.canDelete=false;
                            permissions2.canRead=false;
                            permissions2.canAdd=false;
                            usergroup1.permissions=&permissions2;
                            usergroup1.groupId=5;

                    merchant.numPaymentMethod=1;
                    PaymentMethod paymentmethod2;
                        merchant.paymentmethod=&paymentmethod2;
                        paymentmethod2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2.id=5;
                        paymentmethod2.responsible="alguien";
                        paymentmethod2.type="AMERICAN_EXPRESS";

                    merchant.numPhones=1;
                        Phones phones2;
                        merchant.phones=&phones2;
                        phones2.country.available = true;
                        phones2.country.code="12";
                        phones2.country.name="USA";
                        phones2.country.shortName="US";


                        phones2.phoneNumber="123";
                        phones2.type="MOBILE";


                        merchant.numPermissions=1;
                        Permissions permissions4;
                            merchant.permissions=&permissions4;

                            permissions4.permissionName="permission";
                            permissions4.canEdit=false;
                            permissions4.canDelete=false;
                            permissions4.canRead=false;
                            permissions4.canAdd=false;


                        account[0].consumer.loyaltysettings.numAddress=1;
                            Address address1;
                                address1.addressLine1="address1";
                                address1.addressline2="address2";
                                address1.country="USA";
                                address1.state="state";
                                address1.city="city";
                                address1.zipCode="12345";
                                address1.type="HOME";
                                address1.mainAddress=false;
                        account[0].consumer.loyaltysettings.address=&address1;

                        account[0].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[0].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[0].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[0].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[0].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[0].consumer.numAddress=1;
                Address address2;
                    address2.addressLine1="address1";
                    address2.addressline2="address2";
                    address2.country="USA";
                    address2.state="state";
                    address2.city="city";
                    address2.zipCode="12345";
                    address2.type="HOME";
                    address2.mainAddress=false;
            account[0].consumer.address=&address2;

            account[0].numInvoiceItem=1;
                InvoiceItem invoiceitem;
                    invoiceitem.quantity=100;
                    invoiceitem.totalCost=4.0;
            account[0].invoiceitem=&invoiceitem;



            ///////////////////////////////////////////////////////////
            ////////////////      ACCOUNT 2      //////////////////////
            ///////////////////////////////////////////////////////////

            // Account
            account[1].id=8888;
            account[1].invoiceNumber=3254;
            account[1].ammount=10.0;
            account[1].companyName="compania2";
            account[1].dateIssued="01/01/2010";
            account[1].dateDue="01/01/2010";
            account[1].type="PAYABLE";
            account[1].priority="NORMAL";

            // Account  consumer
//            account[1].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[1].consumer.title="title2";
                account[1].consumer.birthDate="01/01/2010";

                account[1].consumer.mainaddress.addressLine1 = "direction12";
                account[1].consumer.mainaddress.addressline2 = "direction22";
                account[1].consumer.mainaddress.country = "Spain2";
                account[1].consumer.mainaddress.state = "Catalunia2";
                account[1].consumer.mainaddress.city = "Barca2";
                account[1].consumer.mainaddress.zipCode = "12345";
                account[1].consumer.mainaddress.type = "HOME";
                account[1].consumer.mainaddress.mainAddress = true;

                    account[1].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[1].consumer.appsettings.language="espanol";
                    account[1].consumer.appsettings.screenLockMinutes=44;
                    account[1].consumer.appsettings.screenLockSeconds=55;

                account[1].consumer.loyaltysettings.numCategory=1;
                    Category category2;
                        category2.id=1234;
                        category2.name="nombre2";
//                        category.category="parent";
                account[1].consumer.loyaltysettings.category=&category2;

                // // // // user as merchant

                account[1].consumer.loyaltysettings.numMerchant=1;
                User merchant2;
                account[1].consumer.loyaltysettings.merchant=&merchant2;
                    merchant2.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant2.isAvailable=true;
                    merchant2.id=1;
                    merchant2.companyName="namecompany2";
                    merchant2.nickName="andres2";
                    merchant2.firstName="andres2";
                    merchant2.lastName="andres2";
                    merchant2.middleName="andres2";
                    merchant2.email="email2@email.com";
                    merchant2.country="usa2";
                    merchant2.type="CONSUMER";

                    merchant2.numGroups=1;
                        UserGroup usergroup1_2;
                        merchant2.usergroup=&usergroup1_2;
                        usergroup1_2.groupName="group2";
                        usergroup1_2.numPermissions=1;
                            Permissions permissions2_2;
                            permissions2_2.permissionName="permission2";
                            permissions2_2.canEdit=false;
                            permissions2_2.canDelete=false;
                            permissions2_2.canRead=false;
                            permissions2_2.canAdd=false;
                            usergroup1_2.permissions=&permissions2_2;
                            usergroup1_2.groupId=5;

                    merchant2.numPaymentMethod=1;
                    PaymentMethod paymentmethod2_2;
                        merchant2.paymentmethod=&paymentmethod2_2;
                        paymentmethod2_2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2_2.id=5;
                        paymentmethod2_2.responsible="alguien2";
                        paymentmethod2_2.type="AMERICAN_EXPRESS";

                    merchant2.numPhones=1;
                        Phones phones2_2;
                        merchant2.phones=&phones2_2;
                        phones2_2.country.available = true;
                        phones2_2.country.code="123";
                        phones2_2.country.name="USA2";
                        phones2_2.country.shortName="US";


                        phones2_2.phoneNumber="123";
                        phones2_2.type="MOBILE";


                        merchant2.numPermissions=1;
                        Permissions permissions4_2;
                            merchant2.permissions=&permissions4_2;

                            permissions4_2.permissionName="permission2";
                            permissions4_2.canEdit=false;
                            permissions4_2.canDelete=false;
                            permissions4_2.canRead=false;
                            permissions4_2.canAdd=false;


                        account[1].consumer.loyaltysettings.numAddress=1;
                            Address address1_2;
                                address1_2.addressLine1="address12";
                                address1_2.addressline2="address22";
                                address1_2.country="USA2";
                                address1_2.state="state2";
                                address1_2.city="city2";
                                address1_2.zipCode="12345";
                                address1_2.type="HOME";
                                address1_2.mainAddress=false;
                        account[1].consumer.loyaltysettings.address=&address1_2;

                        account[1].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[1].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[1].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[1].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[1].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[1].consumer.numAddress=1;
                Address address2_2;
                    address2_2.addressLine1="address12";
                    address2_2.addressline2="address22";
                    address2_2.country="USA2";
                    address2_2.state="state";
                    address2_2.city="city";
                    address2_2.zipCode="12345";
                    address2_2.type="HOME";
                    address2_2.mainAddress=false;
            account[1].consumer.address=&address2_2;

            account[1].numInvoiceItem=1;
                InvoiceItem invoiceitem2;
                    invoiceitem2.quantity=100;
                    invoiceitem2.totalCost=4.0;
            account[1].invoiceitem=&invoiceitem2;




            ///////////////////////////////////////////////////////////
            ////////////////      ACCOUNT 3      //////////////////////
            ///////////////////////////////////////////////////////////

            // Account
            account[2].id=7777;
            account[2].invoiceNumber=5454;
            account[2].ammount=10.0;
            account[2].companyName="compania3";
            account[2].dateIssued="01/01/2010";
            account[2].dateDue="01/01/2010";
            account[2].type="PAYABLE";
            account[2].priority="NORMAL";

            // Account  consumer
//            account[2].consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
                account[2].consumer.title="title3";
                account[2].consumer.birthDate="01/01/2010";

                account[2].consumer.mainaddress.addressLine1 = "direction13";
                account[2].consumer.mainaddress.addressline2 = "direction23";
                account[2].consumer.mainaddress.country = "Spain3";
                account[2].consumer.mainaddress.state = "Catalunia3";
                account[2].consumer.mainaddress.city = "Barca3";
                account[2].consumer.mainaddress.zipCode = "12343";
                account[2].consumer.mainaddress.type = "HOME";
                account[2].consumer.mainaddress.mainAddress = true;

                    account[2].consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                    account[2].consumer.appsettings.language="espanol";
                    account[2].consumer.appsettings.screenLockMinutes=44;
                    account[2].consumer.appsettings.screenLockSeconds=55;

                account[2].consumer.loyaltysettings.numCategory=1;
                    Category category3;
                        category3.id=1234;
                        category3.name="nombre";
//                        category.category="parent";
                account[2].consumer.loyaltysettings.category=&category3;

                // // // // user as merchant

                account[2].consumer.loyaltysettings.numMerchant=1;
                User merchant3;
                account[2].consumer.loyaltysettings.merchant=&merchant3;
                    merchant3.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                    merchant3.isAvailable=true;
                    merchant3.id=1;
                    merchant3.companyName="namecompany3";
                    merchant3.nickName="andres3";
                    merchant3.firstName="andres3";
                    merchant3.lastName="andres3";
                    merchant3.middleName="andres3";
                    merchant3.email="email3@email.com";
                    merchant3.country="usa3";
                    merchant3.type="CONSUMER";

                    merchant3.numGroups=1;
                        UserGroup usergroup1_3;
                        merchant3.usergroup=&usergroup1_3;
                        usergroup1_3.groupName="group3";
                        usergroup1_3.numPermissions=1;
                            Permissions permissions2_3;
                            permissions2_3.permissionName="permission3";
                            permissions2_3.canEdit=false;
                            permissions2_3.canDelete=false;
                            permissions2_3.canRead=false;
                            permissions2_3.canAdd=false;
                            usergroup1_3.permissions=&permissions2_3;
                            usergroup1_3.groupId=5;

                    merchant3.numPaymentMethod=1;
                    PaymentMethod paymentmethod2_3;
                        merchant3.paymentmethod=&paymentmethod2_3;
                        paymentmethod2_3.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                        paymentmethod2_3.id=5;
                        paymentmethod2_3.responsible="alguien";
                        paymentmethod2_3.type="AMERICAN_EXPRESS";

                    merchant3.numPhones=1;
                        Phones phones2_3;
                        merchant3.phones=&phones2_3;
                        phones2_3.country.available = true;
                        phones2_3.country.code="12";
                        phones2_3.country.name="USA";
                        phones2_3.country.shortName="US";


                        phones2_3.phoneNumber="123";
                        phones2_3.type="MOBILE";


                        merchant3.numPermissions=1;
                        Permissions permissions4_3;
                            merchant3.permissions=&permissions4_3;

                            permissions4_3.permissionName="permission3";
                            permissions4_3.canEdit=false;
                            permissions4_3.canDelete=false;
                            permissions4_3.canRead=false;
                            permissions4_3.canAdd=false;


                        account[2].consumer.loyaltysettings.numAddress=1;
                            Address address1_3;
                                address1_3.addressLine1="address13";
                                address1_3.addressline2="address23";
                                address1_3.country="USA3";
                                address1_3.state="state3";
                                address1_3.city="city3";
                                address1_3.zipCode="123453";
                                address1_3.type="HOME";
                                address1_3.mainAddress=false;
                        account[2].consumer.loyaltysettings.address=&address1_3;

                        account[2].consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                        account[2].consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                        account[2].consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                        account[2].consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                        account[2].consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


                account[2].consumer.numAddress=1;
                Address address2_3;
                    address2_3.addressLine1="address13";
                    address2_3.addressline2="address23";
                    address2_3.country="USA3";
                    address2_3.state="state3";
                    address2_3.city="city3";
                    address2_3.zipCode="123453";
                    address2_3.type="HOME";
                    address2_3.mainAddress=false;
            account[2].consumer.address=&address2_3;

            account[2].numInvoiceItem=1;
                InvoiceItem invoiceitem3;
                    invoiceitem3.quantity=100;
                    invoiceitem3.totalCost=4.0;
            account[2].invoiceitem=&invoiceitem3;



            buildJson buildJsonout;
            buildJsonout.buildJsonAccount(account,3,obj,valOut);
            jSon=write(valOut);
            return jSon;

	#endif
}




////Category
string ProcessGetCategoriesTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{

#ifndef __TRANSACTIONS_DEBUG_
	NMCLog::Log("Get Categories");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCAT";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;


       string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetCategories?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;

    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        string jSon;
        Object obj;
        Value valOut;


//-----------------------------------------------------------------
//                  Category 1
//-----------------------------------------------------------------
        Category category[6];
            category[0].id=80801;
            category[0].name="Alberto1";
//          category[0].category="true";

//-----------------------------------------------------------------
//                  Category 2
//-----------------------------------------------------------------
            category[1].id=80802;
            category[1].name="Alberto2";
//          category[1].category="true";

//-----------------------------------------------------------------
//                  Category 3
//-----------------------------------------------------------------
            category[2].id=8083;
            category[2].name="Alberto3";
//          category[2].category="true";

//-----------------------------------------------------------------
//                  Category 4
//-----------------------------------------------------------------
            category[3].id=80804;
            category[3].name="Alberto4";
//          category[3].category="true";

//-----------------------------------------------------------------
//                  Category 5
//-----------------------------------------------------------------
            category[4].id=80805;
            category[4].name="Alberto5";
//          category[4].category="true";

//-----------------------------------------------------------------
//                  Category 6
//-----------------------------------------------------------------
            category[5].id=80806;
            category[5].name="Alberto6";
//          category[5].category="true";


         buildJson buildJsonout;
         buildJsonout.buildJsonCategories(category,6,obj,valOut);
        jSon=write(valOut);
        return jSon;

    #endif

}

string ProcessCreateCategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
    nameTransaction="Create Category";
    NMCLog::Log("Create Category");
    dataLog = string("Category Name [") + hData[__categoryName] + string("]");

    try
    {

        string dataIn;
        string sFormatedRsp;



	   hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="CRECOUCAT";


		//P114
		hResult["114.137"]=hData[__categoryName];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!this->ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","114.93","18","44"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[3]+string(" - ")+out[2];
        }

        return string("{")+out[1]+string("}");
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif


}

string ProcessCreateSubcategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Create Subcategory");
    log=true;
    nameTransaction="Create Subcategory";
    dataLog = string("Category Name [") + hData[__categoryName] + string("]");

    try
    {

        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="CRECOUCAT";


		//P114
		hResult["114.137"]=hData[__categoryName];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!this->ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","114.93","18","44"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[3]+string(" - ")+out[2];
        }

        return string("{")+out[1]+string("}");
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessGetSubcategoriesTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Subcategories");
   try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETSUBCAT";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetSubcategories?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
        string jSon;
        Object obj;
        Value valOut;


//-----------------------------------------------------------------
//                  Category 1
//-----------------------------------------------------------------
        Category category[6];
            category[0].id=80801;
            category[0].name="Alberto1";
//          category[0].category="true";

//-----------------------------------------------------------------
//                  Category 2
//-----------------------------------------------------------------
            category[1].id=80802;
            category[1].name="Alberto2";
//          category[1].category="true";

//-----------------------------------------------------------------
//                  Category 3
//-----------------------------------------------------------------
            category[2].id=8083;
            category[2].name="Alberto3";
//          category[2].category="true";

//-----------------------------------------------------------------
//                  Category 4
//-----------------------------------------------------------------
            category[3].id=80804;
            category[3].name="Alberto4";
//          category[3].category="true";

//-----------------------------------------------------------------
//                  Category 5
//-----------------------------------------------------------------
            category[4].id=80805;
            category[4].name="Alberto5";
//          category[4].category="true";

//-----------------------------------------------------------------
//                  Category 6
//-----------------------------------------------------------------
            category[5].id=80806;
            category[5].name="Alberto6";
//          category[5].category="true";





         buildJson buildJsonout;
         buildJsonout.buildJsonCategories(category,6,obj,valOut);
        jSon=write(valOut);
        return jSon;

#endif

}

string ProcessRemoveCategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Remove Category");
    log=true;
    nameTransaction="Remove Category";
    dataLog = string("Category Id [") + hData[__categoryId] + string("]");

    try
    {

        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="CATCHAST";

        //114.93
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__categoryId]).c_str()));
        hResult["114.93"] = Temp;

        //114.143
        hResult["114.143"]="0";



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return this->messageResponseTrue;
#endif
}


string ProcessEditCategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
    nameTransaction="Edit Category";
    NMCLog::Log("Edit Category");
    dataLog =   string("Category Id [") + hData[__categoryId] +
                string("] Category Name [") + hData[__categoryName] +
                string("] Category Parent Id [") + hData[__categoryParentId] + string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="COUCATEDT";

		//P104
		hResult["104"]="131001";

        //114.93
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__categoryId]).c_str()));
        hResult["114.93"] = Temp;

        //114.137
        hResult["114.137"]= hData[__categoryName];

        //114.150
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__categoryParentId]).c_str()));
        hResult["114.150"] = Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }

        return this->messageResponseTrue;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
		return this->messageResponseTrue;

#endif
}

string ProcessRemoveSubcategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    log=true;
    nameTransaction="Remove Subcategory";
    dataLog = string("Category Id [") + hData[__categoryId] + string("]");
    NMCLog::Log("Remove Subcategory");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="CATCHAST";


        //114.93
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__categoryId]).c_str()));
        hResult["114.93"] = Temp;

        //114.143
        hResult["114.143"]="0";


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return this->messageResponseTrue;
#endif
}

string ProcessEditSubcategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    log=true;
    nameTransaction="Create Category";
    NMCLog::Log("Create Category");
    dataLog =   string("Category Id [") + hData[__categoryId] +
                string("] Category Name [") + hData[__categoryName] +
                string("] Category Parent Id [") + hData[__categoryParentId] + string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="COUCATEDT";

        //114.93
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__categoryId]).c_str()));
        hResult["114.93"] = Temp;

        //114.137
        hResult["114.137"]= hData[__categoryName];

        //114.150
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__categoryParentId]).c_str()));
        hResult["114.150"] = Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
      return this->messageResponseTrue;

#endif
}


string ProcessAddAditionalCategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
    nameTransaction="Add aditional Category";
    NMCLog::Log("Add aditional Category");
    dataLog = string("Category Name [") + hData[__categoryName] + string("]");

    try
    {
		string dataIn;
        string sFormatedRsp;

		hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="CRECOUCAT";

		//P114
		hResult["114.137"]=hData[__categoryName];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!this->ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","114.93","18","44"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }

        return string("{") + out[1] + string("}");
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessEditAditionalCategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
    nameTransaction="Edit Aditional Category";
    NMCLog::Log("Edit Aditional Category");
    dataLog =   string("Category Id [") + hData[__categoryId] +
                string("] Category Name [") + hData[__categoryName] +
                string("] Category Parent Id [") + hData[__categoryParentId] + string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="COUCATEDT";

        //114.93
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__categoryId]).c_str()));
        hResult["114.93"] = Temp;

        //114.137
        hResult["114.137"]= hData[__categoryName];

        //114.150
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__categoryParentId]).c_str()));
        hResult["114.150"] = Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
      return this->messageResponseTrue;

#endif
}


string ProcessDeleteAditionalCategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    log=true;
    nameTransaction="Delete Aditional Category";
    NMCLog::Log("Delete Aditional Category");
    dataLog = string("Category Id [") + hData[__categoryId] + string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;



        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="CATCHAST";

        //114.93
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__categoryId]).c_str()));
        hResult["114.93"] = Temp;

        //114.143
        hResult["114.143"]="0";


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }

        return this->messageResponseTrue;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return this->messageResponseTrue;
#endif
}




////Tickets
string ProcessGetTicketsByConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{

#ifndef __TRANSACTIONS_DEBUG_
	NMCLog::Log("Get Tickets By Consumer");

    try
    {

        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETTICKCON";

        //P114.88 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTicketsByConsumer?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        string jSon;
        Object obj;
        Value valOut;
        string a="123";
        Ticket *ticket;
        ticket=new Ticket[3];

        ticket[0].isClosed=true;
        ticket[0].id=2525;
        ticket[0].subject="sujeto";
        ticket[0].assignedTo="asignado";
        ticket[0].name="name";
        ticket[0].dateOpen="01/02/2003";
        ticket[0].resolved="resolved";
        ticket[0].type="type";
        ticket[0].status="started";
        ticket[0].dateCreated="01/02/2003";
        ticket[0].lastActivity="01/02/2006";
        ticket[0].numNotes=1;
        ticket[0].notes=&a;

        ticket[1].isClosed=false;
        ticket[1].id=2524;
        ticket[1].subject="subject";
        ticket[1].assignedTo="COMERCE";
        ticket[1].name="ANONYMOUS";
        ticket[1].dateOpen="01/02/2003";
        ticket[1].resolved="resolved";
        ticket[1].type="SOME";
        ticket[1].status="started";
        ticket[1].dateCreated="01/02/2003";
        ticket[1].lastActivity="01/02/2006";
        ticket[1].numNotes=1;
        ticket[1].notes=&a;

        ticket[2].isClosed=true;
        ticket[2].id=2;
        ticket[2].subject="SUBJECT1";
        ticket[2].assignedTo="asignado";
        ticket[2].name="name";
        ticket[2].dateOpen="01/02/2003";
        ticket[2].resolved="resolved";
        ticket[2].type="type";
        ticket[2].status="started";
        ticket[2].dateCreated="01/02/2003";
        ticket[2].lastActivity="01/02/2006";
        ticket[2].numNotes=1;
        ticket[2].notes=&a;

        User *owner;
        owner = new User;
        owner->atclass="com.nomorecards.webportal.commons.beans.Consumer";
        owner->isAvailable=true;
        owner->id=1;
        owner->companyName="name company";
        owner->nickName="andres";
        owner->firstName="andres";
        owner->lastName="andres";
        owner->middleName="andres";
        owner->email="email@email.com";
        owner->country="colombia";
        owner->type="CONSUMER";

        //ticket user(owner) numgroups
        owner->numGroups=1;
            UserGroup usergroup;
            owner->usergroup=&usergroup;
            usergroup.groupName="group";
            usergroup.numPermissions=1;
                Permissions permissions;
                    permissions.permissionName="permission";
                    permissions.canEdit=false;
                    permissions.canDelete=false;
                    permissions.canRead=false;
                    permissions.canAdd=false;
            usergroup.permissions=&permissions;
            usergroup.groupId=5;

        //ticket user(owner) numpaymentmethod
        owner->numPaymentMethod=1;
        PaymentMethod paymentmethod;
            owner->paymentmethod=&paymentmethod;
            paymentmethod.id=5;
            paymentmethod.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
            paymentmethod.responsible="alguien";
            paymentmethod.type="AMERICAN_EXPRESS";

        //ticket user(owner) numphones
        owner->numPhones=1;
        Phones phones;
            owner->phones=&phones;
            phones.country.available = true;
            phones.country.code="12";
            phones.country.name="USA";
            phones.country.shortName="US";

            phones.phoneNumber="123";
            phones.type="MOBILE";

        //ticket user(owner) numpermissions
        owner->numPermissions=1;
        Permissions permissions1;
            owner->permissions=&permissions1;
            permissions1.permissionName="permission";
            permissions1.canEdit=false;
            permissions1.canDelete=false;
            permissions1.canRead=false;
            permissions1.canAdd=false;

    ticket[0].owner=*owner;
    ticket[1].owner=*owner;
    ticket[2].owner=*owner;

   buildJson buildJsonout;
   buildJsonout.buildJsonTicket(ticket,3,obj,valOut);

    delete owner;
    delete []ticket;


   jSon=write(valOut);

    return jSon;

    #endif

}

string ProcessGetSecurityTicketsByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{

#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Security Tickets By Consumer Id");
    try
    {
          hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETSECTICON";

		 //P114.88 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetSecurityTicketsByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        string jSon;
        Object obj;
        Value valOut;

        Ticket *ticket;
        ticket=new Ticket;

        ticket->isClosed=true;
        ticket->id=2525;
        ticket->subject="sujeto";
        ticket->assignedTo="asignado";
        ticket->name="name";
        ticket->dateOpen="01/02/2003";
        ticket->resolved="resolved";
        ticket->type="type";
        ticket->status="started";
        ticket->dateCreated="01/02/2003";
        ticket->lastActivity="01/02/2006";

        //  ticket User (owner);
        User *owner;
        owner = new User;
        owner->atclass="com.nomorecards.webportal.commons.beans.Consumer";
        owner->isAvailable=true;
        owner->id=1;
        owner->companyName="name company";
        owner->nickName="andres";
        owner->firstName="andres";
        owner->lastName="andres";
        owner->middleName="andres";
        owner->email="email@email.com";
        owner->country="colombia";
        owner->type="CONSUMER";

        //ticket user(owner) numgroups
        owner->numGroups=1;
            UserGroup usergroup;
            owner->usergroup=&usergroup;
            usergroup.groupName="group";
            usergroup.numPermissions=1;
                Permissions permissions;
                    permissions.permissionName="permission";
                    permissions.canEdit=false;
                    permissions.canDelete=false;
                    permissions.canRead=false;
                    permissions.canAdd=false;
            usergroup.permissions=&permissions;
            usergroup.groupId=5;

        //ticket user(owner) numpaymentmethod
        owner->numPaymentMethod=1;
        PaymentMethod paymentmethod;
            owner->paymentmethod=&paymentmethod;
            paymentmethod.id=5;
            paymentmethod.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
            paymentmethod.responsible="alguien";
            paymentmethod.type="AMERICAN_EXPRESS";

        //ticket user(owner) numphones
        owner->numPhones=1;
        Phones phones;
            owner->phones=&phones;
            phones.country.available = true;
            phones.country.code="12";
            phones.country.name="USA";
            phones.country.shortName="US";

            phones.phoneNumber="123";
            phones.type="MOBILE";

        //ticket user(owner) numpermissions
        owner->numPermissions=1;
        Permissions permissions1;
            owner->permissions=&permissions1;
            permissions1.permissionName="permission";
            permissions1.canEdit=false;
            permissions1.canDelete=false;
            permissions1.canRead=false;
            permissions1.canAdd=false;

    //  ticket Notes;
        ticket->numNotes=1;
        string a="123";
        ticket->notes=&a;

   buildJson buildJsonout;
   buildJsonout.buildJsonTicket(ticket,0,obj,valOut);

    delete owner;
    delete ticket;


   jSon=write(obj);

    //objJson
    return jSon;

    #endif

}




////Loyalty Program - ClubandMembership
string ProcessGetMerchantLoyaltyProgramsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{

#ifndef __TRANSACTIONS_DEBUG_
	NMCLog::Log("Get Merchant Loyalty Programs");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETMERCHLOYPRO";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetMerchantLoyaltyPrograms?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        string jSon;
        Object obj;
        Value valOut;

        LoyaltyProgram  loyaltyprogram[3];

        loyaltyprogram[0].id= 1053787537;
        loyaltyprogram[0].originalPrice=5000;
        loyaltyprogram[0].salePrice= 10000;
        loyaltyprogram[0].recurringCharge= true;
        loyaltyprogram[0].recurringChargeAmount= 600;
        loyaltyprogram[0].dateCreated= "05/07/2011";
        loyaltyprogram[0].dateActive="05/08/2011" ;
        loyaltyprogram[0].dateExpire="05/06/2012";
        loyaltyprogram[0].name="name";
        loyaltyprogram[0].termsAndConditios="termansconditions";
        loyaltyprogram[0].barcodeImage=" barimage";
        loyaltyprogram[0].upcCode="codeup ";
        loyaltyprogram[0].brand="marca";
        loyaltyprogram[0].image="imagen";

        loyaltyprogram[0].category.id=046743;
        loyaltyprogram[0].category.name="nombre";
//        loyaltyprogram[0].category.category="parent";

        loyaltyprogram[0].recurringChargesCurrency="cargos";

        //lista
        loyaltyprogram[0].numLocation=1;
            Location location;
            loyaltyprogram[0].location=&location;
            location.numTerminal=1;
                Terminal terminals;
                location.terminals=&terminals;
                terminals.id=1;
                terminals.name="name";
                terminals.details="details";
            location.latitude=5.5;
            location.longitude=5.5;

            location.address.addressLine1="address1";
            location.address.addressline2="address2";
            location.address.country="USA";
            location.address.state="state";
            location.address.city="city";
            location.address.zipCode="12345";
            location.address.type="HOME";
            location.address.mainAddress=false;

        loyaltyprogram[0].numRemoteItem=1;
            RemoteItem remoteitem;

            remoteitem.id=45;
            remoteitem.price=10.0;
            remoteitem.taxable=10.0;
            remoteitem.taxes=10.0;
            remoteitem.name="sdshi";
            remoteitem.description="adsjdnxjsa";
            remoteitem.termsAndConditions="sbfvdhvjbdfv";
            remoteitem.upcCode="code";
            remoteitem.skuCode="code";
            remoteitem.image="image"; // TODO where will the image be??
            remoteitem.option1Name="name1";
            remoteitem.option2Name="name2";
            remoteitem.option1="option1";
            remoteitem.option2="option2"; // TODO what the option is?
            remoteitem.barcodeImage="barcode";
            remoteitem.qrCodeImage="qr";

            remoteitem.category.id=3567;
            remoteitem.category.name="nombre";
//            remoteitem.category.category= "null";


            remoteitem.numShippingOption=1;

            ShippingOption shippingOptions;
            remoteitem.shippingOptions=&shippingOptions;
                shippingOptions.id=1;
                shippingOptions.name="name";
                shippingOptions.type="sadhs";
                shippingOptions.terms="sjs";
                shippingOptions.cost=9.0;
                shippingOptions.taxable=true;
                shippingOptions.taxes=9.0;
            loyaltyprogram[0].remoteitem=&remoteitem;

        ///////////////////////////////////////////////////////////
        /////////////     LOYALTY PROGRAM 2      //////////////////
        ///////////////////////////////////////////////////////////

        loyaltyprogram[1].id= 105373333;
        loyaltyprogram[1].originalPrice=500;
        loyaltyprogram[1].salePrice= 1000;
        loyaltyprogram[1].recurringCharge= true;
        loyaltyprogram[1].recurringChargeAmount= 60;
        loyaltyprogram[1].dateCreated= "05/07/2011";
        loyaltyprogram[1].dateActive="05/08/2011" ;
        loyaltyprogram[1].dateExpire="05/06/2012";
        loyaltyprogram[1].name="name2";
        loyaltyprogram[1].termsAndConditios="termansconditions2";
        loyaltyprogram[1].barcodeImage=" barimage2";
        loyaltyprogram[1].upcCode="codeup2";
        loyaltyprogram[1].brand="marca2";
        loyaltyprogram[1].image="imagen2";

        loyaltyprogram[1].category.id=046733;
        loyaltyprogram[1].category.name="nombre2";
//        loyaltyprogram[1].category.category="parent";

        loyaltyprogram[1].recurringChargesCurrency="cargos2";

        //lista
        loyaltyprogram[1].numLocation=1;
            Location location_2;
            loyaltyprogram[1].location=&location_2;
            location_2.numTerminal=1;
                Terminal terminals_2;
                location_2.terminals=&terminals_2;
                terminals_2.id=1;
                terminals_2.name="name2";
                terminals_2.details="details2";
            location_2.latitude=5.5;
            location_2.longitude=5.5;

            location_2.address.addressLine1="address12";
            location_2.address.addressline2="address22";
            location_2.address.country="USA2";
            location_2.address.state="state2";
            location_2.address.city="city2";
            location_2.address.zipCode="123452";
            location_2.address.type="HOME";
            location_2.address.mainAddress=false;

        loyaltyprogram[1].numRemoteItem=1;
            RemoteItem remoteitem_2;

            remoteitem_2.id=45;
            remoteitem_2.price=10.0;
            remoteitem_2.taxable=10.0;
            remoteitem_2.taxes=10.0;
            remoteitem_2.name="sdshi";
            remoteitem_2.description="atgbgbya";
            remoteitem_2.termsAndConditions="sbfrvgkv";
            remoteitem_2.upcCode="code2";
            remoteitem_2.skuCode="code2";
            remoteitem_2.image="image2"; // TODO where will the image be??
            remoteitem_2.option1Name="name12";
            remoteitem_2.option2Name="name22";
            remoteitem_2.option1="option12";
            remoteitem_2.option2="option22"; // TODO what the option is?
            remoteitem_2.barcodeImage="barcode2";
            remoteitem_2.qrCodeImage="qr2";

            remoteitem_2.category.id=3567;
            remoteitem_2.category.name="nombre";
//            remoteitem_2.category.category= "null";


            remoteitem_2.numShippingOption=1;

            ShippingOption shippingOptions_2;
            remoteitem_2.shippingOptions=&shippingOptions_2;
                shippingOptions_2.id=1;
                shippingOptions_2.name="name";
                shippingOptions_2.type="sadhs";
                shippingOptions_2.terms="sjs";
                shippingOptions_2.cost=9.0;
                shippingOptions_2.taxable=true;
                shippingOptions_2.taxes=9.0;
            loyaltyprogram[1].remoteitem=&remoteitem_2;


        ///////////////////////////////////////////////////////////
        /////////////     LOYALTY PROGRAM 3      //////////////////
        ///////////////////////////////////////////////////////////


        loyaltyprogram[2].id= 1053777777;
        loyaltyprogram[2].originalPrice=50;
        loyaltyprogram[2].salePrice= 100;
        loyaltyprogram[2].recurringCharge= true;
        loyaltyprogram[2].recurringChargeAmount= 60;
        loyaltyprogram[2].dateCreated= "05/07/2011";
        loyaltyprogram[2].dateActive="05/08/2011" ;
        loyaltyprogram[2].dateExpire="05/06/2012";
        loyaltyprogram[2].name="name3";
        loyaltyprogram[2].termsAndConditios="termansconditions3";
        loyaltyprogram[2].barcodeImage=" barimage3";
        loyaltyprogram[2].upcCode="codeup3";
        loyaltyprogram[2].brand="marca3";
        loyaltyprogram[2].image="imagen3";

        loyaltyprogram[2].category.id=046777;
        loyaltyprogram[2].category.name="nombre3";
//        loyaltyprogram[2].category.category="parent";

        loyaltyprogram[2].recurringChargesCurrency="cargos3";

        //lista
        loyaltyprogram[2].numLocation=1;
            Location location_3;
            loyaltyprogram[2].location=&location_3;
            location_3.numTerminal=1;
                Terminal terminals_3;
                location_3.terminals=&terminals_3;
                terminals_3.id=1;
                terminals_3.name="name3";
                terminals_3.details="details3";
            location_3.latitude=5.5;
            location_3.longitude=5.5;

            location_3.address.addressLine1="address13";
            location_3.address.addressline2="address23";
            location_3.address.country="USA3";
            location_3.address.state="state3";
            location_3.address.city="city3";
            location_3.address.zipCode="123453";
            location_3.address.type="HOME";
            location_3.address.mainAddress=false;

        loyaltyprogram[2].numRemoteItem=1;
            RemoteItem remoteitem_3;

            remoteitem_3.id=45;
            remoteitem_3.price=10.0;
            remoteitem_3.taxable=10.0;
            remoteitem_3.taxes=10.0;
            remoteitem_3.name="sdshi";
            remoteitem_3.description="adsjdnxjsa";
            remoteitem_3.termsAndConditions="sbfvdhvjbdfv";
            remoteitem_3.upcCode="code3";
            remoteitem_3.skuCode="code3";
            remoteitem_3.image="image3"; // TODO where will the image be??
            remoteitem_3.option1Name="name13";
            remoteitem_3.option2Name="name23";
            remoteitem_3.option1="option13";
            remoteitem_3.option2="option23"; // TODO what the option is?
            remoteitem_3.barcodeImage="barcode3";
            remoteitem_3.qrCodeImage="qr3";

            remoteitem_3.category.id=3567;
            remoteitem_3.category.name="nombre";
//            remoteitem_3.category.category= "null";


            remoteitem_3.numShippingOption=1;

            ShippingOption shippingOptions_3;
            remoteitem_3.shippingOptions=&shippingOptions_3;
                shippingOptions_3.id=1;
                shippingOptions_3.name="name";
                shippingOptions_3.type="sadhs";
                shippingOptions_3.terms="sjs";
                shippingOptions_3.cost=9.0;
                shippingOptions_3.taxable=true;
                shippingOptions_3.taxes=9.0;
            loyaltyprogram[2].remoteitem=&remoteitem_3;



        buildJson buildJsonout;
        buildJsonout.buildJsonLoyaltyProgram(loyaltyprogram ,3,obj,valOut);

        jSon=write(valOut);
        return jSon;
#endif


}

string ProcessGetConsumerClubsAndMembershipsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{

    #ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Clubs And Memberships");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCONSUCAM";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {

            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerClubsMemberships?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }

    #else
        string jSon;
        Object obj;
        Value valOut;



//====================================================================================
//                      ClubsAndMemberships 1
//====================================================================================
//
        ClubMembership listClubMembership[3];
 //       loyalty program

        listClubMembership[0].loyaltyProgram.atclass="com.nomorecards.webportal.commons.beans.Coupon";
        listClubMembership[0].loyaltyProgram.id= 1053787537;
        listClubMembership[0].loyaltyProgram.originalPrice=5000;
        listClubMembership[0].loyaltyProgram.salePrice= 10000;
        listClubMembership[0].loyaltyProgram.recurringCharge= true;
        listClubMembership[0].loyaltyProgram.recurringChargeAmount= 600;
        listClubMembership[0].loyaltyProgram.dateCreated= "05/07/2011";
        listClubMembership[0].loyaltyProgram.dateActive="05/08/2011" ;
        listClubMembership[0].loyaltyProgram.dateExpire="05/06/2012";
        listClubMembership[0].loyaltyProgram.name="name";
        listClubMembership[0].loyaltyProgram.termsAndConditios="termansconditions";
        listClubMembership[0].loyaltyProgram.barcodeImage=" barimage";
        listClubMembership[0].loyaltyProgram.upcCode="codeup ";
        listClubMembership[0].loyaltyProgram.brand="marca";
        listClubMembership[0].loyaltyProgram.image="imagen";

        //loyalty category
        listClubMembership[0].loyaltyProgram.category.id=046743;
        listClubMembership[0].loyaltyProgram.category.name="nombre";
//      listClubMembership[0].loyaltyProgram.category.category="parent";

        listClubMembership[0].loyaltyProgram.recurringChargesCurrency="DAILY";

        //loyalty location
        listClubMembership[0].loyaltyProgram.numLocation=1;
            Location location;
            listClubMembership[0].loyaltyProgram.location=&location;
        //loyalty location terminal
                location.numTerminal=1;
                Terminal terminals;
                location.terminals=&terminals;
                terminals.id=1;
                terminals.name="name";
                terminals.details="details";
            location.latitude=5.5;
            location.longitude=5.5;

        //loyalty address
            location.address.addressLine1="address1";
            location.address.addressline2="address2";
            location.address.country="USA";
            location.address.state="state";
            location.address.city="city";
            location.address.zipCode="12345";
            location.address.type="HOME";
            location.address.mainAddress=false;

        //loyalty remoteitem
        listClubMembership[0].loyaltyProgram.numRemoteItem=1;
            RemoteItem remoteitem;
            listClubMembership[0].loyaltyProgram.remoteitem=&remoteitem;

            remoteitem.id=45;
            remoteitem.price=10.0;
            remoteitem.taxable=10.0;
            remoteitem.taxes=10.0;
            remoteitem.name="sdshi";
            remoteitem.description="adsjdnxjsa";
            remoteitem.termsAndConditions="sbfvdhvjbdfv";
            remoteitem.upcCode="code";
            remoteitem.skuCode="code";
            remoteitem.image="image"; // TODO where will the image be??
            remoteitem.option1Name="name1";
            remoteitem.option2Name="name2";
            remoteitem.option1="option1";
            remoteitem.option2="option2"; // TODO what the option is?
            remoteitem.barcodeImage="barcode";
            remoteitem.qrCodeImage="qr";

            remoteitem.category.id=3567;
            remoteitem.category.name="nombre";
//            remoteitem.category.category= "null";

        //loyalty remoteitem shippingoption
            remoteitem.numShippingOption=1;

            ShippingOption shippingOptions;
            remoteitem.shippingOptions=&shippingOptions;
                shippingOptions.id=1;
                shippingOptions.name="name";
                shippingOptions.type="sadhs";
                shippingOptions.terms="sjs";
                shippingOptions.cost=9.0;
                shippingOptions.taxable=true;
                shippingOptions.taxes=9.0;


        listClubMembership[0].logoImage="name";
        listClubMembership[0].needsFaces=true;
        listClubMembership[0].numFaceImages=1;
        string a="123";
        listClubMembership[0].faceimages=&a;


//====================================================================================
//                      ClubsAndMemberships 2
//====================================================================================
//
        //ClubMembership listClubMembership
 //       loyalty program

        listClubMembership[1].loyaltyProgram.atclass="com.nomorecards.webportal.commons.beans.Coupon";
        listClubMembership[1].loyaltyProgram.id= 1053787537;
        listClubMembership[1].loyaltyProgram.originalPrice=5000;
        listClubMembership[1].loyaltyProgram.salePrice= 10000;
        listClubMembership[1].loyaltyProgram.recurringCharge= true;
        listClubMembership[1].loyaltyProgram.recurringChargeAmount= 600;
        listClubMembership[1].loyaltyProgram.dateCreated= "05/07/2011";
        listClubMembership[1].loyaltyProgram.dateActive="05/08/2011" ;
        listClubMembership[1].loyaltyProgram.dateExpire="05/06/2012";
        listClubMembership[1].loyaltyProgram.name="name";
        listClubMembership[1].loyaltyProgram.termsAndConditios="termansconditions";
        listClubMembership[1].loyaltyProgram.barcodeImage=" barimage";
        listClubMembership[1].loyaltyProgram.upcCode="codeup ";
        listClubMembership[1].loyaltyProgram.brand="marca";
        listClubMembership[1].loyaltyProgram.image="imagen";

        //loyalty category
        listClubMembership[1].loyaltyProgram.category.id=046743;
        listClubMembership[1].loyaltyProgram.category.name="nombre";
//      listClubMembership[0].loyaltyProgram.category.category="parent";

        listClubMembership[1].loyaltyProgram.recurringChargesCurrency="DAILY";

        //loyalty location
        listClubMembership[1].loyaltyProgram.numLocation=1;
            Location location1;
            listClubMembership[1].loyaltyProgram.location=&location1;
        //loyalty location terminal
                location1.numTerminal=1;
                Terminal terminals1;
                location1.terminals=&terminals1;
                    terminals1.id=1;
                    terminals1.name="name";
                    terminals1.details="details";
                location1.latitude=5.5;
                location1.longitude=5.5;

        //loyalty address
            location1.address.addressLine1="address1";
            location1.address.addressline2="address2";
            location1.address.country="USA";
            location1.address.state="state";
            location1.address.city="city";
            location1.address.zipCode="12345";
            location1.address.type="HOME";
            location1.address.mainAddress=false;

        //loyalty remoteitem
        listClubMembership[1].loyaltyProgram.numRemoteItem=1;
            RemoteItem remoteitem1;
            listClubMembership[1].loyaltyProgram.remoteitem=&remoteitem1;

            remoteitem1.id=45;
            remoteitem1.price=10.0;
            remoteitem1.taxable=10.0;
            remoteitem1.taxes=10.0;
            remoteitem1.name="sdshi";
            remoteitem1.description="adsjdnxjsa";
            remoteitem1.termsAndConditions="sbfvdhvjbdfv";
            remoteitem1.upcCode="code";
            remoteitem1.skuCode="code";
            remoteitem1.image="image"; // TODO where will the image be??
            remoteitem1.option1Name="name1";
            remoteitem1.option2Name="name2";
            remoteitem1.option1="option1";
            remoteitem1.option2="option2"; // TODO what the option is?
            remoteitem1.barcodeImage="barcode";
            remoteitem1.qrCodeImage="qr";

            remoteitem1.category.id=3567;
            remoteitem1.category.name="nombre";
//            remoteitem.category.category= "null";

        //loyalty remoteitem shippingoption
            remoteitem1.numShippingOption=1;

            ShippingOption shippingOptions1;
            remoteitem1.shippingOptions=&shippingOptions1;
                shippingOptions1.id=1;
                shippingOptions1.name="name";
                shippingOptions1.type="sadhs";
                shippingOptions1.terms="sjs";
                shippingOptions1.cost=9.0;
                shippingOptions1.taxable=true;
                shippingOptions1.taxes=9.0;


        listClubMembership[1].logoImage="name";
        listClubMembership[1].needsFaces=true;
        listClubMembership[1].numFaceImages=1;
        string a1="123";
        listClubMembership[1].faceimages=&a1;

//====================================================================================
//                      ClubsAndMemberships 3
//====================================================================================
//
        //ClubMembership listClubMembership
 //       loyalty program

        listClubMembership[2].loyaltyProgram.atclass="com.nomorecards.webportal.commons.beans.Coupon";
        listClubMembership[2].loyaltyProgram.id= 1053787537;
        listClubMembership[2].loyaltyProgram.originalPrice=5000;
        listClubMembership[2].loyaltyProgram.salePrice= 10000;
        listClubMembership[2].loyaltyProgram.recurringCharge= true;
        listClubMembership[2].loyaltyProgram.recurringChargeAmount= 600;
        listClubMembership[2].loyaltyProgram.dateCreated= "05/07/2011";
        listClubMembership[2].loyaltyProgram.dateActive="05/08/2011" ;
        listClubMembership[2].loyaltyProgram.dateExpire="05/06/2012";
        listClubMembership[2].loyaltyProgram.name="name";
        listClubMembership[2].loyaltyProgram.termsAndConditios="termansconditions";
        listClubMembership[2].loyaltyProgram.barcodeImage=" barimage";
        listClubMembership[2].loyaltyProgram.upcCode="codeup ";
        listClubMembership[2].loyaltyProgram.brand="marca";
        listClubMembership[2].loyaltyProgram.image="imagen";

        //loyalty category
        listClubMembership[2].loyaltyProgram.category.id=046743;
        listClubMembership[2].loyaltyProgram.category.name="nombre";
//      listClubMembership[2].loyaltyProgram.category.category="parent";

        listClubMembership[2].loyaltyProgram.recurringChargesCurrency="DAILY";

        //loyalty location
        listClubMembership[2].loyaltyProgram.numLocation=1;
            Location location2;
            listClubMembership[2].loyaltyProgram.location=&location2;
        //loyalty location terminal
                location2.numTerminal=1;
                Terminal terminals2;
                location2.terminals=&terminals2;
                    terminals2.id=1;
                    terminals2.name="name";
                    terminals2.details="details";
                location2.latitude=5.5;
                location2.longitude=5.5;

        //loyalty address
            location2.address.addressLine1="address1";
            location2.address.addressline2="address2";
            location2.address.country="USA";
            location2.address.state="state";
            location2.address.city="city";
            location2.address.zipCode="12345";
            location2.address.type="HOME";
            location2.address.mainAddress=false;

        //loyalty remoteitem
        listClubMembership[1].loyaltyProgram.numRemoteItem=1;
            RemoteItem remoteitem2;
            listClubMembership[1].loyaltyProgram.remoteitem=&remoteitem2;

            remoteitem2.id=45;
            remoteitem2.price=10.0;
            remoteitem2.taxable=10.0;
            remoteitem2.taxes=10.0;
            remoteitem2.name="sdshi";
            remoteitem2.description="adsjdnxjsa";
            remoteitem2.termsAndConditions="sbfvdhvjbdfv";
            remoteitem2.upcCode="code";
            remoteitem2.skuCode="code";
            remoteitem2.image="image"; // TODO where will the image be??
            remoteitem2.option1Name="name1";
            remoteitem2.option2Name="name2";
            remoteitem2.option1="option1";
            remoteitem2.option2="option2"; // TODO what the option is?
            remoteitem2.barcodeImage="barcode";
            remoteitem2.qrCodeImage="qr";

            remoteitem2.category.id=3567;
            remoteitem2.category.name="nombre";
//            remoteitem.category.category= "null";

        //loyalty remoteitem shippingoption
            remoteitem2.numShippingOption=1;

            ShippingOption shippingOptions2;
            remoteitem2.shippingOptions=&shippingOptions2;
                shippingOptions2.id=1;
                shippingOptions2.name="name";
                shippingOptions2.type="sadhs";
                shippingOptions2.terms="sjs";
                shippingOptions2.cost=9.0;
                shippingOptions2.taxable=true;
                shippingOptions2.taxes=9.0;


        listClubMembership[2].logoImage="name";
        listClubMembership[2].needsFaces=true;
        listClubMembership[2].numFaceImages=1;
        string a2="123";
        listClubMembership[2].faceimages=&a2;

        buildJson buildJsonout;
        buildJsonout.buildJsonClubMembership(listClubMembership,3,obj,valOut);
        jSon=write(valOut);
        return jSon;

    #endif
}

string ProcessGetMerchantClubsAndMembershipsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
    #ifndef __TRANSACTIONS_DEBUG_

		NMCLog::Log("Get Merchant Clubs And Memberships");

      try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETMERCHCAM";


        string mti="0305";


            if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
            {
                return this->messageFailedPackISO;
            }


            string ISOb64;
            tools *objTools;
            objTools = new tools;

            ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

            delete objTools;

            string dataIn;
            if(!ProceessComunicationHTTP(string("/serverList/services/GetMerchantClubsMemberships?isInp=")+ISOb64,dataIn))
            {
                return NULL;
            }


            return dataIn;
        }
        catch(...)
        {
            return this->messageFailedException;
        }

    #else
        string jSon;
        Object obj;
        Value valOut;



//====================================================================================
//                      ClubsAndMemberships 1
//====================================================================================
//
        ClubMembership listClubMembership[3];
 //       loyalty program

        listClubMembership[0].loyaltyProgram.atclass="com.nomorecards.webportal.commons.beans.Coupon";
        listClubMembership[0].loyaltyProgram.id= 1053787537;
        listClubMembership[0].loyaltyProgram.originalPrice=5000;
        listClubMembership[0].loyaltyProgram.salePrice= 10000;
        listClubMembership[0].loyaltyProgram.recurringCharge= true;
        listClubMembership[0].loyaltyProgram.recurringChargeAmount= 600;
        listClubMembership[0].loyaltyProgram.dateCreated= "05/07/2011";
        listClubMembership[0].loyaltyProgram.dateActive="05/08/2011" ;
        listClubMembership[0].loyaltyProgram.dateExpire="05/06/2012";
        listClubMembership[0].loyaltyProgram.name="name";
        listClubMembership[0].loyaltyProgram.termsAndConditios="termansconditions";
        listClubMembership[0].loyaltyProgram.barcodeImage=" barimage";
        listClubMembership[0].loyaltyProgram.upcCode="codeup ";
        listClubMembership[0].loyaltyProgram.brand="marca";
        listClubMembership[0].loyaltyProgram.image="imagen";

        //loyalty category
        listClubMembership[0].loyaltyProgram.category.id=046743;
        listClubMembership[0].loyaltyProgram.category.name="nombre";
//      listClubMembership[0].loyaltyProgram.category.category="parent";

        listClubMembership[0].loyaltyProgram.recurringChargesCurrency="DAILY";

        //loyalty location
        listClubMembership[0].loyaltyProgram.numLocation=1;
            Location location;
            listClubMembership[0].loyaltyProgram.location=&location;
        //loyalty location terminal
                location.numTerminal=1;
                Terminal terminals;
                location.terminals=&terminals;
                terminals.id=1;
                terminals.name="name";
                terminals.details="details";
            location.latitude=5.5;
            location.longitude=5.5;

        //loyalty address
            location.address.addressLine1="address1";
            location.address.addressline2="address2";
            location.address.country="USA";
            location.address.state="state";
            location.address.city="city";
            location.address.zipCode="12345";
            location.address.type="HOME";
            location.address.mainAddress=false;

        //loyalty remoteitem
        listClubMembership[0].loyaltyProgram.numRemoteItem=1;
            RemoteItem remoteitem;
            listClubMembership[0].loyaltyProgram.remoteitem=&remoteitem;

            remoteitem.id=45;
            remoteitem.price=10.0;
            remoteitem.taxable=10.0;
            remoteitem.taxes=10.0;
            remoteitem.name="sdshi";
            remoteitem.description="adsjdnxjsa";
            remoteitem.termsAndConditions="sbfvdhvjbdfv";
            remoteitem.upcCode="code";
            remoteitem.skuCode="code";
            remoteitem.image="image"; // TODO where will the image be??
            remoteitem.option1Name="name1";
            remoteitem.option2Name="name2";
            remoteitem.option1="option1";
            remoteitem.option2="option2"; // TODO what the option is?
            remoteitem.barcodeImage="barcode";
            remoteitem.qrCodeImage="qr";

            remoteitem.category.id=3567;
            remoteitem.category.name="nombre";
//            remoteitem.category.category= "null";

        //loyalty remoteitem shippingoption
            remoteitem.numShippingOption=1;

            ShippingOption shippingOptions;
            remoteitem.shippingOptions=&shippingOptions;
                shippingOptions.id=1;
                shippingOptions.name="name";
                shippingOptions.type="sadhs";
                shippingOptions.terms="sjs";
                shippingOptions.cost=9.0;
                shippingOptions.taxable=true;
                shippingOptions.taxes=9.0;


        listClubMembership[0].logoImage="name";
        listClubMembership[0].needsFaces=true;
        listClubMembership[0].numFaceImages=1;
        string a="123";
        listClubMembership[0].faceimages=&a;


//====================================================================================
//                      ClubsAndMemberships 2
//====================================================================================
//
        //ClubMembership listClubMembership
 //       loyalty program

        listClubMembership[1].loyaltyProgram.atclass="com.nomorecards.webportal.commons.beans.Coupon";
        listClubMembership[1].loyaltyProgram.id= 1053787537;
        listClubMembership[1].loyaltyProgram.originalPrice=5000;
        listClubMembership[1].loyaltyProgram.salePrice= 10000;
        listClubMembership[1].loyaltyProgram.recurringCharge= true;
        listClubMembership[1].loyaltyProgram.recurringChargeAmount= 600;
        listClubMembership[1].loyaltyProgram.dateCreated= "05/07/2011";
        listClubMembership[1].loyaltyProgram.dateActive="05/08/2011" ;
        listClubMembership[1].loyaltyProgram.dateExpire="05/06/2012";
        listClubMembership[1].loyaltyProgram.name="name";
        listClubMembership[1].loyaltyProgram.termsAndConditios="termansconditions";
        listClubMembership[1].loyaltyProgram.barcodeImage=" barimage";
        listClubMembership[1].loyaltyProgram.upcCode="codeup ";
        listClubMembership[1].loyaltyProgram.brand="marca";
        listClubMembership[1].loyaltyProgram.image="imagen";

        //loyalty category
        listClubMembership[1].loyaltyProgram.category.id=046743;
        listClubMembership[1].loyaltyProgram.category.name="nombre";
//      listClubMembership[0].loyaltyProgram.category.category="parent";

        listClubMembership[1].loyaltyProgram.recurringChargesCurrency="DAILY";

        //loyalty location
        listClubMembership[1].loyaltyProgram.numLocation=1;
            Location location1;
            listClubMembership[1].loyaltyProgram.location=&location1;
        //loyalty location terminal
                location1.numTerminal=1;
                Terminal terminals1;
                location1.terminals=&terminals1;
                    terminals1.id=1;
                    terminals1.name="name";
                    terminals1.details="details";
                location1.latitude=5.5;
                location1.longitude=5.5;

        //loyalty address
            location1.address.addressLine1="address1";
            location1.address.addressline2="address2";
            location1.address.country="USA";
            location1.address.state="state";
            location1.address.city="city";
            location1.address.zipCode="12345";
            location1.address.type="HOME";
            location1.address.mainAddress=false;

        //loyalty remoteitem
        listClubMembership[1].loyaltyProgram.numRemoteItem=1;
            RemoteItem remoteitem1;
            listClubMembership[1].loyaltyProgram.remoteitem=&remoteitem1;

            remoteitem1.id=45;
            remoteitem1.price=10.0;
            remoteitem1.taxable=10.0;
            remoteitem1.taxes=10.0;
            remoteitem1.name="sdshi";
            remoteitem1.description="adsjdnxjsa";
            remoteitem1.termsAndConditions="sbfvdhvjbdfv";
            remoteitem1.upcCode="code";
            remoteitem1.skuCode="code";
            remoteitem1.image="image"; // TODO where will the image be??
            remoteitem1.option1Name="name1";
            remoteitem1.option2Name="name2";
            remoteitem1.option1="option1";
            remoteitem1.option2="option2"; // TODO what the option is?
            remoteitem1.barcodeImage="barcode";
            remoteitem1.qrCodeImage="qr";

            remoteitem1.category.id=3567;
            remoteitem1.category.name="nombre";
//            remoteitem.category.category= "null";

        //loyalty remoteitem shippingoption
            remoteitem1.numShippingOption=1;

            ShippingOption shippingOptions1;
            remoteitem1.shippingOptions=&shippingOptions1;
                shippingOptions1.id=1;
                shippingOptions1.name="name";
                shippingOptions1.type="sadhs";
                shippingOptions1.terms="sjs";
                shippingOptions1.cost=9.0;
                shippingOptions1.taxable=true;
                shippingOptions1.taxes=9.0;


        listClubMembership[1].logoImage="name";
        listClubMembership[1].needsFaces=true;
        listClubMembership[1].numFaceImages=1;
        string a1="123";
        listClubMembership[1].faceimages=&a1;

//====================================================================================
//                      ClubsAndMemberships 3
//====================================================================================
//
        //ClubMembership listClubMembership
 //       loyalty program

        listClubMembership[2].loyaltyProgram.atclass="com.nomorecards.webportal.commons.beans.Coupon";
        listClubMembership[2].loyaltyProgram.id= 1053787537;
        listClubMembership[2].loyaltyProgram.originalPrice=5000;
        listClubMembership[2].loyaltyProgram.salePrice= 10000;
        listClubMembership[2].loyaltyProgram.recurringCharge= true;
        listClubMembership[2].loyaltyProgram.recurringChargeAmount= 600;
        listClubMembership[2].loyaltyProgram.dateCreated= "05/07/2011";
        listClubMembership[2].loyaltyProgram.dateActive="05/08/2011" ;
        listClubMembership[2].loyaltyProgram.dateExpire="05/06/2012";
        listClubMembership[2].loyaltyProgram.name="name";
        listClubMembership[2].loyaltyProgram.termsAndConditios="termansconditions";
        listClubMembership[2].loyaltyProgram.barcodeImage=" barimage";
        listClubMembership[2].loyaltyProgram.upcCode="codeup ";
        listClubMembership[2].loyaltyProgram.brand="marca";
        listClubMembership[2].loyaltyProgram.image="imagen";

        //loyalty category
        listClubMembership[2].loyaltyProgram.category.id=046743;
        listClubMembership[2].loyaltyProgram.category.name="nombre";
//      listClubMembership[2].loyaltyProgram.category.category="parent";

        listClubMembership[2].loyaltyProgram.recurringChargesCurrency="DAILY";

        //loyalty location
        listClubMembership[2].loyaltyProgram.numLocation=1;
            Location location2;
            listClubMembership[2].loyaltyProgram.location=&location2;
        //loyalty location terminal
                location2.numTerminal=1;
                Terminal terminals2;
                location2.terminals=&terminals2;
                    terminals2.id=1;
                    terminals2.name="name";
                    terminals2.details="details";
                location2.latitude=5.5;
                location2.longitude=5.5;

        //loyalty address
            location2.address.addressLine1="address1";
            location2.address.addressline2="address2";
            location2.address.country="USA";
            location2.address.state="state";
            location2.address.city="city";
            location2.address.zipCode="12345";
            location2.address.type="HOME";
            location2.address.mainAddress=false;

        //loyalty remoteitem
        listClubMembership[1].loyaltyProgram.numRemoteItem=1;
            RemoteItem remoteitem2;
            listClubMembership[1].loyaltyProgram.remoteitem=&remoteitem2;

            remoteitem2.id=45;
            remoteitem2.price=10.0;
            remoteitem2.taxable=10.0;
            remoteitem2.taxes=10.0;
            remoteitem2.name="sdshi";
            remoteitem2.description="adsjdnxjsa";
            remoteitem2.termsAndConditions="sbfvdhvjbdfv";
            remoteitem2.upcCode="code";
            remoteitem2.skuCode="code";
            remoteitem2.image="image"; // TODO where will the image be??
            remoteitem2.option1Name="name1";
            remoteitem2.option2Name="name2";
            remoteitem2.option1="option1";
            remoteitem2.option2="option2"; // TODO what the option is?
            remoteitem2.barcodeImage="barcode";
            remoteitem2.qrCodeImage="qr";

            remoteitem2.category.id=3567;
            remoteitem2.category.name="nombre";
//            remoteitem.category.category= "null";

        //loyalty remoteitem shippingoption
            remoteitem2.numShippingOption=1;

            ShippingOption shippingOptions2;
            remoteitem2.shippingOptions=&shippingOptions2;
                shippingOptions2.id=1;
                shippingOptions2.name="name";
                shippingOptions2.type="sadhs";
                shippingOptions2.terms="sjs";
                shippingOptions2.cost=9.0;
                shippingOptions2.taxable=true;
                shippingOptions2.taxes=9.0;


        listClubMembership[2].logoImage="name";
        listClubMembership[2].needsFaces=true;
        listClubMembership[2].numFaceImages=1;
        string a2="123";
        listClubMembership[2].faceimages=&a2;

        buildJson buildJsonout;
        buildJsonout.buildJsonClubMembership(listClubMembership,3,obj,valOut);
        jSon=write(valOut);
        return jSon;

    #endif
}

string ProcessGetConsumerLoyaltyProgramsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{

#ifndef __TRANSACTIONS_DEBUG_

	 NMCLog::Log("GetConsumerLoyaltyPrograms");
   try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCONLP";



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetConsumerLoyaltyPrograms?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
         string jSon;
        Object obj;
        Value valOut;

        LoyaltyProgram  loyaltyprogram[3];

        loyaltyprogram[0].id= 1053787537;
        loyaltyprogram[0].originalPrice=5000;
        loyaltyprogram[0].salePrice= 10000;
        loyaltyprogram[0].recurringCharge= true;
        loyaltyprogram[0].recurringChargeAmount= 600;
        loyaltyprogram[0].dateCreated= "05/07/2011";
        loyaltyprogram[0].dateActive="05/08/2011" ;
        loyaltyprogram[0].dateExpire="05/06/2012";
        loyaltyprogram[0].name="name";
        loyaltyprogram[0].termsAndConditios="termansconditions";
        loyaltyprogram[0].barcodeImage=" barimage";
        loyaltyprogram[0].upcCode="codeup ";
        loyaltyprogram[0].brand="marca";
        loyaltyprogram[0].image="imagen";

        loyaltyprogram[0].category.id=046743;
        loyaltyprogram[0].category.name="nombre";
//        loyaltyprogram[0].category.category="parent";

        loyaltyprogram[0].recurringChargesCurrency="cargos";

        //lista
        loyaltyprogram[0].numLocation=1;
            Location location;
            loyaltyprogram[0].location=&location;
            location.numTerminal=1;
                Terminal terminals;
                location.terminals=&terminals;
                terminals.id=1;
                terminals.name="name";
                terminals.details="details";
            location.latitude=5.5;
            location.longitude=5.5;

            location.address.addressLine1="address1";
            location.address.addressline2="address2";
            location.address.country="USA";
            location.address.state="state";
            location.address.city="city";
            location.address.zipCode="12345";
            location.address.type="HOME";
            location.address.mainAddress=false;

        loyaltyprogram[0].numRemoteItem=1;
            RemoteItem remoteitem;

            remoteitem.id=45;
            remoteitem.price=10.0;
            remoteitem.taxable=10.0;
            remoteitem.taxes=10.0;
            remoteitem.name="sdshi";
            remoteitem.description="adsjdnxjsa";
            remoteitem.termsAndConditions="sbfvdhvjbdfv";
            remoteitem.upcCode="code";
            remoteitem.skuCode="code";
            remoteitem.image="image"; // TODO where will the image be??
            remoteitem.option1Name="name1";
            remoteitem.option2Name="name2";
            remoteitem.option1="option1";
            remoteitem.option2="option2"; // TODO what the option is?
            remoteitem.barcodeImage="barcode";
            remoteitem.qrCodeImage="qr";

            remoteitem.category.id=3567;
            remoteitem.category.name="nombre";
//            remoteitem.category.category= "null";


            remoteitem.numShippingOption=1;

            ShippingOption shippingOptions;
            remoteitem.shippingOptions=&shippingOptions;
                shippingOptions.id=1;
                shippingOptions.name="name";
                shippingOptions.type="sadhs";
                shippingOptions.terms="sjs";
                shippingOptions.cost=9.0;
                shippingOptions.taxable=true;
                shippingOptions.taxes=9.0;
            loyaltyprogram[0].remoteitem=&remoteitem;

        ///////////////////////////////////////////////////////////
        /////////////     LOYALTY PROGRAM 2      //////////////////
        ///////////////////////////////////////////////////////////

        loyaltyprogram[1].id= 105373333;
        loyaltyprogram[1].originalPrice=500;
        loyaltyprogram[1].salePrice= 1000;
        loyaltyprogram[1].recurringCharge= true;
        loyaltyprogram[1].recurringChargeAmount= 60;
        loyaltyprogram[1].dateCreated= "05/07/2011";
        loyaltyprogram[1].dateActive="05/08/2011" ;
        loyaltyprogram[1].dateExpire="05/06/2012";
        loyaltyprogram[1].name="name2";
        loyaltyprogram[1].termsAndConditios="termansconditions2";
        loyaltyprogram[1].barcodeImage=" barimage2";
        loyaltyprogram[1].upcCode="codeup2";
        loyaltyprogram[1].brand="marca2";
        loyaltyprogram[1].image="imagen2";

        loyaltyprogram[1].category.id=046733;
        loyaltyprogram[1].category.name="nombre2";
//        loyaltyprogram[1].category.category="parent";

        loyaltyprogram[1].recurringChargesCurrency="cargos2";

        //lista
        loyaltyprogram[1].numLocation=1;
            Location location_2;
            loyaltyprogram[1].location=&location_2;
            location_2.numTerminal=1;
                Terminal terminals_2;
                location_2.terminals=&terminals_2;
                terminals_2.id=1;
                terminals_2.name="name2";
                terminals_2.details="details2";
            location_2.latitude=5.5;
            location_2.longitude=5.5;

            location_2.address.addressLine1="address12";
            location_2.address.addressline2="address22";
            location_2.address.country="USA2";
            location_2.address.state="state2";
            location_2.address.city="city2";
            location_2.address.zipCode="123452";
            location_2.address.type="HOME";
            location_2.address.mainAddress=false;

        loyaltyprogram[1].numRemoteItem=1;
            RemoteItem remoteitem_2;

            remoteitem_2.id=45;
            remoteitem_2.price=10.0;
            remoteitem_2.taxable=10.0;
            remoteitem_2.taxes=10.0;
            remoteitem_2.name="sdshi";
            remoteitem_2.description="atgbgbya";
            remoteitem_2.termsAndConditions="sbfrvgkv";
            remoteitem_2.upcCode="code2";
            remoteitem_2.skuCode="code2";
            remoteitem_2.image="image2"; // TODO where will the image be??
            remoteitem_2.option1Name="name12";
            remoteitem_2.option2Name="name22";
            remoteitem_2.option1="option12";
            remoteitem_2.option2="option22"; // TODO what the option is?
            remoteitem_2.barcodeImage="barcode2";
            remoteitem_2.qrCodeImage="qr2";

            remoteitem_2.category.id=3567;
            remoteitem_2.category.name="nombre";
//            remoteitem_2.category.category= "null";


            remoteitem_2.numShippingOption=1;

            ShippingOption shippingOptions_2;
            remoteitem_2.shippingOptions=&shippingOptions_2;
                shippingOptions_2.id=1;
                shippingOptions_2.name="name";
                shippingOptions_2.type="sadhs";
                shippingOptions_2.terms="sjs";
                shippingOptions_2.cost=9.0;
                shippingOptions_2.taxable=true;
                shippingOptions_2.taxes=9.0;
            loyaltyprogram[1].remoteitem=&remoteitem_2;


        ///////////////////////////////////////////////////////////
        /////////////     LOYALTY PROGRAM 3      //////////////////
        ///////////////////////////////////////////////////////////


        loyaltyprogram[2].id= 1053777777;
        loyaltyprogram[2].originalPrice=50;
        loyaltyprogram[2].salePrice= 100;
        loyaltyprogram[2].recurringCharge= true;
        loyaltyprogram[2].recurringChargeAmount= 60;
        loyaltyprogram[2].dateCreated= "05/07/2011";
        loyaltyprogram[2].dateActive="05/08/2011" ;
        loyaltyprogram[2].dateExpire="05/06/2012";
        loyaltyprogram[2].name="name3";
        loyaltyprogram[2].termsAndConditios="termansconditions3";
        loyaltyprogram[2].barcodeImage=" barimage3";
        loyaltyprogram[2].upcCode="codeup3";
        loyaltyprogram[2].brand="marca3";
        loyaltyprogram[2].image="imagen3";

        loyaltyprogram[2].category.id=046777;
        loyaltyprogram[2].category.name="nombre3";
//        loyaltyprogram[2].category.category="parent";

        loyaltyprogram[2].recurringChargesCurrency="cargos3";

        //lista
        loyaltyprogram[2].numLocation=1;
            Location location_3;
            loyaltyprogram[2].location=&location_3;
            location_3.numTerminal=1;
                Terminal terminals_3;
                location_3.terminals=&terminals_3;
                terminals_3.id=1;
                terminals_3.name="name3";
                terminals_3.details="details3";
            location_3.latitude=5.5;
            location_3.longitude=5.5;

            location_3.address.addressLine1="address13";
            location_3.address.addressline2="address23";
            location_3.address.country="USA3";
            location_3.address.state="state3";
            location_3.address.city="city3";
            location_3.address.zipCode="123453";
            location_3.address.type="HOME";
            location_3.address.mainAddress=false;

        loyaltyprogram[2].numRemoteItem=1;
            RemoteItem remoteitem_3;

            remoteitem_3.id=45;
            remoteitem_3.price=10.0;
            remoteitem_3.taxable=10.0;
            remoteitem_3.taxes=10.0;
            remoteitem_3.name="sdshi";
            remoteitem_3.description="adsjdnxjsa";
            remoteitem_3.termsAndConditions="sbfvdhvjbdfv";
            remoteitem_3.upcCode="code3";
            remoteitem_3.skuCode="code3";
            remoteitem_3.image="image3"; // TODO where will the image be??
            remoteitem_3.option1Name="name13";
            remoteitem_3.option2Name="name23";
            remoteitem_3.option1="option13";
            remoteitem_3.option2="option23"; // TODO what the option is?
            remoteitem_3.barcodeImage="barcode3";
            remoteitem_3.qrCodeImage="qr3";

            remoteitem_3.category.id=3567;
            remoteitem_3.category.name="nombre";
//            remoteitem_3.category.category= "null";


            remoteitem_3.numShippingOption=1;

            ShippingOption shippingOptions_3;
            remoteitem_3.shippingOptions=&shippingOptions_3;
                shippingOptions_3.id=1;
                shippingOptions_3.name="name";
                shippingOptions_3.type="sadhs";
                shippingOptions_3.terms="sjs";
                shippingOptions_3.cost=9.0;
                shippingOptions_3.taxable=true;
                shippingOptions_3.taxes=9.0;
            loyaltyprogram[2].remoteitem=&remoteitem_3;



        buildJson buildJsonout;
        buildJsonout.buildJsonLoyaltyProgram(loyaltyprogram ,3,obj,valOut);

        jSon=write(valOut);
        return jSon;

#endif




}


////Ratings
string ProcessGetCustomerRatingsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
    #ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Customer Ratings");
try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETCUSRAT";

        //P114.88 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;


        string mti="0305";


            if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
            {
                return NULL;
            }


            string ISOb64;
            tools *objTools;
            objTools = new tools;

            ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

            delete objTools;

            string dataIn;
            if(!ProceessComunicationHTTP(string("/serverList/services/GetCustomerRatings?isInp=")+ISOb64,dataIn))
            {
                return NULL;
            }


            return dataIn;
        }
        catch(...)
        {
            return this->messageFailedException;
        }

    #else
        string jSon;
        Object obj;
        Value valOut;

//-----------------------------------------------------------
//                  Rating 1
//-----------------------------------------------------------

        Rating listRating[3];

    //build ratting
    listRating[0].id=1;
    listRating[0].rate=1;

    listRating[0].rater.atclass="com.nomorecards.webportal.commons.beans.Consumer";
    listRating[0].rater.isAvailable=true;
    listRating[0].rater.id=1;
    listRating[0].rater.companyName="name company";
    listRating[0].rater.nickName="andres";
    listRating[0].rater.firstName="andres";
    listRating[0].rater.lastName="andres";
    listRating[0].rater.middleName="andres";
    listRating[0].rater.email="email@email.com";
    listRating[0].rater.country="colombia";
    listRating[0].rater.type="CONSUMER";

    listRating[0].rater.numGroups=1;
        UserGroup usergroup;
        listRating[0].rater.usergroup=&usergroup;
        usergroup.groupName="group";
        usergroup.numPermissions=1;
            Permissions permissions;
            permissions.permissionName="permission";
            permissions.canEdit=false;
            permissions.canDelete=false;
            permissions.canRead=false;
            permissions.canAdd=false;
    usergroup.permissions=&permissions;
    usergroup.groupId=5;

    listRating[0].rater.numPaymentMethod=1;
        PaymentMethod paymentmethod;
            listRating[0].rater.paymentmethod=&paymentmethod;
            paymentmethod.id=5;
            paymentmethod.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
            paymentmethod.responsible="alguien";
            paymentmethod.type="AMERICAN_EXPRESS";

    listRating[0].rater.numPhones=1;
        Phones phones;
        listRating[0].rater.phones=&phones;
            phones.country.available = true;
            phones.country.code="12";
            phones.country.name="USA";
            phones.country.shortName="US";

            phones.phoneNumber="123";
            phones.type="MOBILE";


    listRating[0].rater.numPermissions=1;
        Permissions permissions1;
        listRating[0].rater.permissions=&permissions1;
        permissions1.permissionName="permission";
        permissions1.canEdit=false;
        permissions1.canDelete=false;
        permissions1.canRead=false;
        permissions1.canAdd=false;


    listRating[0].rateDate="01/01/2013";

    listRating[0].rated=listRating[0].rater;

//-----------------------------------------------------------
//                  Rating 2
//-----------------------------------------------------------

        //Rating listRating;

    //build ratting
    listRating[1].id=1;
    listRating[1].rate=1;

    listRating[1].rater.atclass="com.nomorecards.webportal.commons.beans.Consumer";
    listRating[1].rater.isAvailable=true;
    listRating[1].rater.id=1;
    listRating[1].rater.companyName="name company";
    listRating[1].rater.nickName="andres";
    listRating[1].rater.firstName="andres";
    listRating[1].rater.lastName="andres";
    listRating[1].rater.middleName="andres";
    listRating[1].rater.email="email@email.com";
    listRating[1].rater.country="colombia";
    listRating[1].rater.type="CONSUMER";

    listRating[1].rater.numGroups=1;
        UserGroup usergroup_2;
        listRating[1].rater.usergroup=&usergroup_2;
        usergroup_2.groupName="group";
        usergroup_2.numPermissions=1;
            Permissions permissions_2;
            permissions_2.permissionName="permission";
            permissions_2.canEdit=false;
            permissions_2.canDelete=false;
            permissions_2.canRead=false;
            permissions_2.canAdd=false;
    usergroup_2.permissions=&permissions_2;
    usergroup_2.groupId=5;

    listRating[1].rater.numPaymentMethod=1;
        PaymentMethod paymentmethod_2;
            listRating[1].rater.paymentmethod=&paymentmethod_2;
            paymentmethod_2.id=5;
            paymentmethod_2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
            paymentmethod_2.responsible="alguien";
            paymentmethod_2.type="AMERICAN_EXPRESS";

    listRating[1].rater.numPhones=1;
        Phones phones_2;
        listRating[1].rater.phones=&phones_2;
            phones_2.country.available = true;
            phones_2.country.code="12";
            phones_2.country.name="USA";
            phones_2.country.shortName="US";

            phones_2.phoneNumber="123";
            phones_2.type="MOBILE";


    listRating[1].rater.numPermissions=1;
        Permissions permissions1_2;
        listRating[1].rater.permissions=&permissions1_2;
        permissions1_2.permissionName="permission";
        permissions1_2.canEdit=false;
        permissions1_2.canDelete=false;
        permissions1_2.canRead=false;
        permissions1_2.canAdd=false;


    listRating[1].rateDate="01/01/2013";

    listRating[1].rated=listRating[1].rater;


//-----------------------------------------------------------
//                  Rating 3
//-----------------------------------------------------------

               //Rating listRating;

    //build ratting
    listRating[2].id=1;
    listRating[2].rate=1;

    listRating[2].rater.atclass="com.nomorecards.webportal.commons.beans.Consumer";
    listRating[2].rater.isAvailable=true;
    listRating[2].rater.id=1;
    listRating[2].rater.companyName="name company";
    listRating[2].rater.nickName="andres";
    listRating[2].rater.firstName="andres";
    listRating[2].rater.lastName="andres";
    listRating[2].rater.middleName="andres";
    listRating[2].rater.email="email@email.com";
    listRating[2].rater.country="colombia";
    listRating[2].rater.type="CONSUMER";

    listRating[2].rater.numGroups=1;
        UserGroup usergroup_3;
        listRating[2].rater.usergroup=&usergroup_3;
        usergroup_3.groupName="group";
        usergroup_3.numPermissions=1;
            Permissions permissions_3;
            permissions_3.permissionName="permission";
            permissions_3.canEdit=false;
            permissions_3.canDelete=false;
            permissions_3.canRead=false;
            permissions_3.canAdd=false;
    usergroup_3.permissions=&permissions_3;
    usergroup_3.groupId=5;

    listRating[2].rater.numPaymentMethod=1;
        PaymentMethod paymentmethod_3;
            listRating[2].rater.paymentmethod=&paymentmethod_3;
            paymentmethod_3.id=5;
            paymentmethod_3.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
            paymentmethod_3.responsible="alguien";
            paymentmethod_3.type="AMERICAN_EXPRESS";

    listRating[1].rater.numPhones=1;
        Phones phones_3;
        listRating[1].rater.phones=&phones_3;
            phones_3.country.available = true;
            phones_3.country.code="12";
            phones_3.country.name="USA";
            phones_3.country.shortName="US";

            phones_3.phoneNumber="123";
            phones_3.type="MOBILE";


    listRating[2].rater.numPermissions=1;
        Permissions permissions1_3;
        listRating[2].rater.permissions=&permissions1_3;
        permissions1_3.permissionName="permission";
        permissions1_3.canEdit=false;
        permissions1_3.canDelete=false;
        permissions1_3.canRead=false;
        permissions1_3.canAdd=false;


    listRating[2].rateDate="01/01/2013";

    listRating[2].rated=listRating[2].rater;



        buildJson buildJsonout;
       buildJsonout.buildJsonRating(listRating,3,obj,valOut);
       jSon=write(valOut);


    return jSon;

    #endif
}

string ProcessGetResellerRatingsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Reseller Ratings");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETRESRAT";

		//P114.141 reseller id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
		hResult["114.141"]=Temp;

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetResellerRatings?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetRatingsByUserIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Ratings By User Id");

  try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETRATBYUSID";


        //114.179
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__userId]).c_str()));
		hResult["114.179"]=Temp;

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetRatingsByUserId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetNotesByUserIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("GetNotesByUserId");

try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETNOTBYUSID";




        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetNotesByUserId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetMerchantRatingsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Merchant Ratings");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETMERCHRAT";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetMerchantRatings?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




////User
string ProcessGetUsersMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Users Merchant");
try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETUSMERCH";




        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetUsersMerchant?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }
#else
       Object obj;
        Value valOut;
        string json;

        Merchant merchant[3];



        ///////////////////////////////////////////////////////////
        ////////////////      MERCHANT 1      //////////////////////
        ///////////////////////////////////////////////////////////

            merchant[0].assignedTo="alguien";
            merchant[0].supervisor="alguien";
            merchant[0].department="comida";

                //Merchant - Category
                merchant[0].category.id=1;
                merchant[0].category.name="123";
                //    merchant.category.category="123";

                //Merchant - AppSettings
                merchant[0].appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                merchant[0].appSettings.language="spanglish";
                merchant[0].appSettings.screenLockMinutes=1;
                merchant[0].appSettings.screenLockSeconds=1;

                //Merchant - Suscription
                merchant[0].numSuscription=1;
                    Suscription suscription;
                        suscription.id=1;
                        suscription.name="name";
                        suscription.cost=5.0;
                        suscription.duration=1;
                        suscription.durationType="DAYS";
                        suscription.purchaseDate="01/01/2013";
                        suscription.autoRenew=true;
                merchant[0].suscriptions=&suscription;

                //Merchant - Location
                Location locations;
                merchant[0].numLocation=1;
                merchant[0].locations=&locations;

                locations.numTerminal=1;
                    Terminal terminals;
                        terminals.id=1;
                        terminals.name="name";
                        terminals.details="details";
                    locations.terminals=&terminals;

                    locations.latitude=5.5;
                    locations.longitude=5.5;

                    locations.address.addressLine1="address1";
                    locations.address.addressline2="address2";
                    locations.address.country="USA";
                    locations.address.state="state";
                    locations.address.city="city";
                    locations.address.zipCode="12345";

                    locations.address.type="HOME";
                    locations.address.mainAddress=false;

                //Merchant - User
                merchant[0].user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant[0].user.isAvailable=true;
                merchant[0].user.id=1;
                merchant[0].user.companyName="name company";
                merchant[0].user.nickName="andres";
                merchant[0].user.firstName="andres";
                merchant[0].user.lastName="andres";
                merchant[0].user.middleName="andres";
                merchant[0].user.email="email@email.com";
                merchant[0].user.country="Colombia";
                merchant[0].user.type="CONSUMER";

                merchant[0].user.numGroups=1;
                UserGroup usergroup;
                merchant[0].user.usergroup=&usergroup;
                    usergroup.groupName="group";
                    usergroup.numPermissions=1;
                    Permissions permissions;
                        permissions.permissionName="permission";
                        permissions.canEdit=false;
                        permissions.canDelete=false;
                        permissions.canRead=false;
                        permissions.canAdd=false;
                    usergroup.permissions=&permissions;
                    usergroup.groupId=5;

                merchant[0].user.numPaymentMethod=1;
                PaymentMethod paymentmethod;
                merchant[0].user.paymentmethod=&paymentmethod;
                    paymentmethod.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod.id=5;
                    paymentmethod.responsible="alguien";
                    paymentmethod.type="AMERICAN_EXPRESS";

                merchant[0].user.numPhones=1;
                Phones phones;
                merchant[0].user.phones=&phones;
                    phones.country.available = true;
                    phones.country.code="12";
                    phones.country.name="USA";
                    phones.country.shortName="US";
                    phones.phoneNumber="123";
                    phones.type="MOBILE";

                merchant[0].user.numPermissions=1;
                Permissions permissions1;
                merchant[0].user.permissions=&permissions1;
                    permissions1.permissionName="permission";
                    permissions1.canEdit=false;
                    permissions1.canDelete=false;
                    permissions1.canRead=false;
                    permissions1.canAdd=false;



        ///////////////////////////////////////////////////////////
        ////////////////      MERCHANT 2      //////////////////////
        ///////////////////////////////////////////////////////////

            merchant[1].assignedTo="alguien";
            merchant[1].supervisor="alguien";
            merchant[1].department="comida";

                //Merchant - Category
                merchant[1].category.id=1;
                merchant[1].category.name="123";
                //    merchant.category.category="123";

                //Merchant - AppSettings
                merchant[1].appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                merchant[1].appSettings.language="spanglish";
                merchant[1].appSettings.screenLockMinutes=1;
                merchant[1].appSettings.screenLockSeconds=1;

                //Merchant - Suscription
                merchant[1].numSuscription=1;
                    Suscription suscription_3;
                        suscription_3.id=1;
                        suscription_3.name="name";
                        suscription_3.cost=5.0;
                        suscription_3.duration=1;
                        suscription_3.durationType="DAYS";
                        suscription_3.purchaseDate="01/01/2013";
                        suscription_3.autoRenew=true;
                merchant[1].suscriptions=&suscription_3;

                //Merchant - Location
                Location locations_3;
                merchant[1].numLocation=1;
                merchant[1].locations=&locations_3;

                locations_3.numTerminal=1;
                    Terminal terminals_3;
                        terminals_3.id=1;
                        terminals_3.name="name";
                        terminals_3.details="details";
                    locations_3.terminals=&terminals_3;

                    locations_3.latitude=5.5;
                    locations_3.longitude=5.5;

                    locations_3.address.addressLine1="address1";
                    locations_3.address.addressline2="address2";
                    locations_3.address.country="USA";
                    locations_3.address.state="state";
                    locations_3.address.city="city";
                    locations_3.address.zipCode="12345";

                    locations_3.address.type="HOME";
                    locations_3.address.mainAddress=false;

                //Merchant - User
                merchant[1].user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant[1].user.isAvailable=true;
                merchant[1].user.id=1;
                merchant[1].user.companyName="name company";
                merchant[1].user.nickName="andres";
                merchant[1].user.firstName="andres";
                merchant[1].user.lastName="andres";
                merchant[1].user.middleName="andres";
                merchant[1].user.email="email@email.com";
                merchant[1].user.country="Colombia";
                merchant[1].user.type="CONSUMER";

                merchant[1].user.numGroups=1;
                UserGroup usergroup_3;
                merchant[1].user.usergroup=&usergroup_3;
                    usergroup_3.groupName="group";
                    usergroup_3.numPermissions=1;
                    Permissions permissions_3;
                        permissions_3.permissionName="permission";
                        permissions_3.canEdit=false;
                        permissions_3.canDelete=false;
                        permissions_3.canRead=false;
                        permissions_3.canAdd=false;
                    usergroup_3.permissions=&permissions_3;
                    usergroup_3.groupId=5;

                merchant[1].user.numPaymentMethod=1;
                PaymentMethod paymentmethod_3;
                merchant[1].user.paymentmethod=&paymentmethod_3;
                    paymentmethod_3.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod_3.id=5;
                    paymentmethod_3.responsible="alguien";
                    paymentmethod_3.type="AMERICAN_EXPRESS";

                merchant[1].user.numPhones=1;
                Phones phones_3;
                merchant[1].user.phones=&phones_3;
                    phones_3.country.available = true;
                    phones_3.country.code="12";
                    phones_3.country.name="USA";
                    phones_3.country.shortName="US";
                    phones_3.phoneNumber="123";
                    phones_3.type="MOBILE";

                merchant[1].user.numPermissions=1;
                Permissions permissions1_3;
                merchant[1].user.permissions=&permissions1_3;
                    permissions1_3.permissionName="permission";
                    permissions1_3.canEdit=false;
                    permissions1_3.canDelete=false;
                    permissions1_3.canRead=false;
                    permissions1_3.canAdd=false;


        ///////////////////////////////////////////////////////////
        ////////////////      MERCHANT 3      //////////////////////
        ///////////////////////////////////////////////////////////

            merchant[2].assignedTo="alguien";
            merchant[2].supervisor="alguien";
            merchant[2].department="comida";

                //Merchant - Category
                merchant[2].category.id=1;
                merchant[2].category.name="123";
                //    merchant.category.category="123";

                //Merchant - AppSettings
                merchant[2].appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                merchant[2].appSettings.language="spanglish";
                merchant[2].appSettings.screenLockMinutes=1;
                merchant[2].appSettings.screenLockSeconds=1;

                //Merchant - Suscription
                merchant[2].numSuscription=1;
                    Suscription suscription_2;
                        suscription_2.id=1;
                        suscription_2.name="name";
                        suscription_2.cost=5.0;
                        suscription_2.duration=1;
                        suscription_2.durationType="DAYS";
                        suscription_2.purchaseDate="01/01/2013";
                        suscription_2.autoRenew=true;
                merchant[2].suscriptions=&suscription_2;

                //Merchant - Location
                Location locations_2;
                merchant[2].numLocation=1;
                merchant[2].locations=&locations_2;

                locations_2.numTerminal=1;
                    Terminal terminals_2;
                        terminals_2.id=1;
                        terminals_2.name="name";
                        terminals_2.details="details";
                    locations_2.terminals=&terminals_2;

                    locations_2.latitude=5.5;
                    locations_2.longitude=5.5;

                    locations_2.address.addressLine1="address1";
                    locations_2.address.addressline2="address2";
                    locations_2.address.country="USA";
                    locations_2.address.state="state";
                    locations_2.address.city="city";
                    locations_2.address.zipCode="12345";

                    locations_2.address.type="HOME";
                    locations_2.address.mainAddress=false;

                //Merchant - User
                merchant[2].user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant[2].user.isAvailable=true;
                merchant[2].user.id=1;
                merchant[2].user.companyName="name company";
                merchant[2].user.nickName="andres";
                merchant[2].user.firstName="andres";
                merchant[2].user.lastName="andres";
                merchant[2].user.middleName="andres";
                merchant[2].user.email="email@email.com";
                merchant[2].user.country="Colombia";
                merchant[2].user.type="CONSUMER";

                merchant[2].user.numGroups=1;
                UserGroup usergroup_2;
                merchant[2].user.usergroup=&usergroup_2;
                    usergroup_2.groupName="group";
                    usergroup_2.numPermissions=1;
                    Permissions permissions_2;
                        permissions_2.permissionName="permission";
                        permissions_2.canEdit=false;
                        permissions_2.canDelete=false;
                        permissions_2.canRead=false;
                        permissions_2.canAdd=false;
                    usergroup_2.permissions=&permissions_2;
                    usergroup_2.groupId=5;

                merchant[2].user.numPaymentMethod=1;
                PaymentMethod paymentmethod_2;
                merchant[2].user.paymentmethod=&paymentmethod_2;
                    paymentmethod_2.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod_2.id=5;
                    paymentmethod_2.responsible="alguien";
                    paymentmethod_2.type="AMERICAN_EXPRESS";

                merchant[2].user.numPhones=1;
                Phones phones_2;
                merchant[2].user.phones=&phones_2;
                    phones_2.country.available = true;
                    phones_2.country.code="12";
                    phones_2.country.name="USA";
                    phones_2.country.shortName="US";
                    phones_2.phoneNumber="123";
                    phones_2.type="MOBILE";

                merchant[2].user.numPermissions=1;
                Permissions permissions1_2;
                merchant[2].user.permissions=&permissions1_2;
                    permissions1_2.permissionName="permission";
                    permissions1_2.canEdit=false;
                    permissions1_2.canDelete=false;
                    permissions1_2.canRead=false;
                    permissions1_2.canAdd=false;


        buildJson buildJsonout;
        buildJsonout.buildJsonMerchant(merchant,3,obj,valOut);
        json=write(valOut);

        return json;

    #endif


}

string ProcessGetUsersConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	 NMCLog::Log("Get Users Consumer");

try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETUSCONS";



        string mti="0305";


            if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
            {
                return this->messageFailedPackISO;
            }


            string ISOb64;
            tools *objTools;
            objTools = new tools;

            ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

            delete objTools;

            string dataIn;
            if(!ProceessComunicationHTTP(string("/serverList/services/GetUsersConsumer?isInp=")+ISOb64,dataIn))
            {
                return NULL;
            }


            return dataIn;
        }
        catch(...)
        {
            return this->messageFailedException;
        }
#else
        string jSon;
        Object obj;
        Value valOut;

    Consumer consumer[3];

////==================================================================================
//                                   CONSUMER 1
//====================================================================================

//          consumer[0].atclass="com.nomorecards.webportal.commons.beans.Consumer";
            consumer[0].title="title";
            consumer[0].birthDate="01/01/2010";

            consumer[0].mainaddress.addressLine1 = "direction1";
            consumer[0].mainaddress.addressline2 = "direction2";
            consumer[0].mainaddress.country = "Spain";
            consumer[0].mainaddress.state = "Catalunia";
            consumer[0].mainaddress.city = "Barca";
            consumer[0].mainaddress.zipCode = "1234";
            consumer[0].mainaddress.type = "HOME";
            consumer[0].mainaddress.mainAddress = true;

                consumer[0].appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                consumer[0].appsettings.language="espanol";
                consumer[0].appsettings.screenLockMinutes=44;
                consumer[0].appsettings.screenLockSeconds=55;

            consumer[0].loyaltysettings.numCategory=1;
                Category category;
                    category.id=1234;
                    category.name="nombre";
//                        category.category="parent";
            consumer[0].loyaltysettings.category=&category;

            // // // // user as merchant

            consumer[0].loyaltysettings.numMerchant=1;
            User merchant;
            consumer[0].loyaltysettings.merchant=&merchant;
                merchant.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant.isAvailable=true;
                merchant.id=1;
                merchant.companyName="name company";
                merchant.nickName="andres";
                merchant.firstName="andres";
                merchant.lastName="andres";
                merchant.middleName="andres";
                merchant.email="email@email.com";
                merchant.country="usa";
                merchant.type="CONSUMER";

                merchant.numGroups=1;
                    UserGroup usergroup1;
                    merchant.usergroup=&usergroup1;
                    usergroup1.groupName="group";
                    usergroup1.numPermissions=1;
                        Permissions permissions2;
                        permissions2.permissionName="permission";
                        permissions2.canEdit=false;
                        permissions2.canDelete=false;
                        permissions2.canRead=false;
                        permissions2.canAdd=false;
                        usergroup1.permissions=&permissions2;
                        usergroup1.groupId=5;

                merchant.numPaymentMethod=1;
                PaymentMethod paymentmethod2;
                    merchant.paymentmethod=&paymentmethod2;
                    paymentmethod2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod2.id=5;
                    paymentmethod2.responsible="alguien";
                    paymentmethod2.type="AMERICAN_EXPRESS";

                merchant.numPhones=1;
                    Phones phones2;
                    merchant.phones=&phones2;
                    phones2.country.available = true;
                    phones2.country.code="12";
                    phones2.country.name="USA";
                    phones2.country.shortName="US";


                    phones2.phoneNumber="123";
                    phones2.type="MOBILE";


                    merchant.numPermissions=1;
                    Permissions permissions4;
                        merchant.permissions=&permissions4;

                        permissions4.permissionName="permission";
                        permissions4.canEdit=false;
                        permissions4.canDelete=false;
                        permissions4.canRead=false;
                        permissions4.canAdd=false;


                    consumer[0].loyaltysettings.numAddress=1;
                        Address address1;
                            address1.addressLine1="address1";
                            address1.addressline2="address2";
                            address1.country="USA";
                            address1.state="state";
                            address1.city="city";
                            address1.zipCode="12345";
                            address1.type="HOME";
                            address1.mainAddress=false;
                    consumer[0].loyaltysettings.address=&address1;

                    consumer[0].loyaltysettings.whenPromotionExpiresTomrrow=true;
                    consumer[0].loyaltysettings.onlyNewPromotionFromFavorites=true;
                    consumer[0].loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                    consumer[0].loyaltysettings.receiveNotificationUntil = "05/12/2010";
                    consumer[0].loyaltysettings.receiveNotificationFrom = "05/12/2010";


            consumer[0].numAddress=1;
            Address address2;
                address2.addressLine1="address1";
                address2.addressline2="address2";
                address2.country="USA";
                address2.state="state";
                address2.city="city";
                address2.zipCode="12345";
                address2.type="HOME";
                address2.mainAddress=false;
        consumer[0].address=&address2;

            consumer[0].user.atclass="com.nomorecards.webportal.commons.beans.Consumer";
            consumer[0].user.isAvailable=true;
            consumer[0].user.id=1;
            consumer[0].user.companyName="name company";
            consumer[0].user.nickName="andres";
            consumer[0].user.firstName="andres";
            consumer[0].user.lastName="andres";
            consumer[0].user.middleName="andres";
            consumer[0].user.email="email@email.com";
            consumer[0].user.country="colombia";
            consumer[0].user.type="CONSUMER";

            consumer[0].user.numGroups=1;
                UserGroup usergroup;
            consumer[0].user.usergroup=&usergroup;
                usergroup.groupName="group";
                usergroup.numPermissions=1;
                    Permissions permissions;
                        permissions.permissionName="permission";
                        permissions.canEdit=false;
                        permissions.canDelete=false;
                        permissions.canRead=false;
                        permissions.canAdd=false;
                usergroup.permissions=&permissions;
                usergroup.groupId=5;

        consumer[0].user.numPaymentMethod=1;
            PaymentMethod paymentmethod;
        consumer[0].user.paymentmethod=&paymentmethod;
                paymentmethod.id=5;
                paymentmethod.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                paymentmethod.responsible="alguien";
                paymentmethod.type="AMERICAN_EXPRESS";

        consumer[0].user.numPhones=1;
            Phones phones;
        consumer[0].user.phones=&phones;
                phones.country.available = true;
        phones.country.code="12";
        phones.country.name="USA";
        phones.country.shortName="US";

                phones.phoneNumber="123";
                phones.type="MOBILE";

        consumer[0].user.numPermissions=1;
            Permissions permissions1;
        consumer[0].user.permissions=&permissions1;
                permissions1.permissionName="permission";
                permissions1.canEdit=false;
                permissions1.canDelete=false;
                permissions1.canRead=false;
                permissions1.canAdd=false;


////==================================================================================
//                                   CONSUMER 2
//====================================================================================

//          consumer[1].atclass="com.nomorecards.webportal.commons.beans.Consumer";
            consumer[1].title="title2";
            consumer[1].birthDate="01/01/2010";

            consumer[1].mainaddress.addressLine1 = "direction12";
            consumer[1].mainaddress.addressline2 = "direction22";
            consumer[1].mainaddress.country = "Spain2";
            consumer[1].mainaddress.state = "Catalunia2";
            consumer[1].mainaddress.city = "Barca2";
            consumer[1].mainaddress.zipCode = "12342";
            consumer[1].mainaddress.type = "HOME";
            consumer[1].mainaddress.mainAddress = true;

                consumer[1].appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                consumer[1].appsettings.language="espanol";
                consumer[1].appsettings.screenLockMinutes=44;
                consumer[1].appsettings.screenLockSeconds=55;

            consumer[1].loyaltysettings.numCategory=1;
                Category category_2;
                    category_2.id=1234;
                    category_2.name="nombre2";
//                        category_2.category="parent";
            consumer[1].loyaltysettings.category=&category_2;

            // // // // user as merchant

            consumer[1].loyaltysettings.numMerchant=1;
            User merchant_2;
            consumer[1].loyaltysettings.merchant=&merchant_2;
                merchant_2.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant_2.isAvailable=true;
                merchant_2.id=1;
                merchant_2.companyName="name company2";
                merchant_2.nickName="andres2";
                merchant_2.firstName="andres2";
                merchant_2.lastName="andres2";
                merchant_2.middleName="andres2";
                merchant_2.email="email2@email.com";
                merchant_2.country="usa2";
                merchant_2.type="CONSUMER";

                merchant_2.numGroups=1;
                    UserGroup usergroup1_2;
                    merchant_2.usergroup=&usergroup1_2;
                    usergroup1_2.groupName="group";
                    usergroup1_2.numPermissions=1;
                        Permissions permissions2_2;
                        permissions2_2.permissionName="permission";
                        permissions2_2.canEdit=false;
                        permissions2_2.canDelete=false;
                        permissions2_2.canRead=false;
                        permissions2_2.canAdd=false;
                        usergroup1_2.permissions=&permissions2_2;
                        usergroup1_2.groupId=5;

                merchant_2.numPaymentMethod=1;
                PaymentMethod paymentmethod2_2;
                    merchant_2.paymentmethod=&paymentmethod2_2;
                    paymentmethod2_2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod2_2.id=5;
                    paymentmethod2_2.responsible="alguien";
                    paymentmethod2_2.type="AMERICAN_EXPRESS";

                merchant_2.numPhones=1;
                    Phones phones2_2;
                    merchant_2.phones=&phones2_2;
                    phones2_2.country.available = true;
                    phones2_2.country.code="12";
                    phones2_2.country.name="USA";
                    phones2_2.country.shortName="US";


                    phones2_2.phoneNumber="123";
                    phones2_2.type="MOBILE";


                    merchant_2.numPermissions=1;
                    Permissions permissions4_2;
                        merchant_2.permissions=&permissions4_2;

                        permissions4_2.permissionName="permission";
                        permissions4_2.canEdit=false;
                        permissions4_2.canDelete=false;
                        permissions4_2.canRead=false;
                        permissions4_2.canAdd=false;


                    consumer[1].loyaltysettings.numAddress=1;
                        Address address1_2;
                            address1_2.addressLine1="address1";
                            address1_2.addressline2="address2";
                            address1_2.country="USA";
                            address1_2.state="state";
                            address1_2.city="city";
                            address1_2.zipCode="12345";
                            address1_2.type="HOME";
                            address1_2.mainAddress=false;
                    consumer[1].loyaltysettings.address=&address1_2;

                    consumer[1].loyaltysettings.whenPromotionExpiresTomrrow=true;
                    consumer[1].loyaltysettings.onlyNewPromotionFromFavorites=true;
                    consumer[1].loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                    consumer[1].loyaltysettings.receiveNotificationUntil = "05/12/2010";
                    consumer[1].loyaltysettings.receiveNotificationFrom = "05/12/2010";


            consumer[1].numAddress=1;
            Address address2_2;
                address2_2.addressLine1="address1";
                address2_2.addressline2="address2";
                address2_2.country="USA";
                address2_2.state="state";
                address2_2.city="city";
                address2_2.zipCode="12345";
                address2_2.type="HOME";
                address2_2.mainAddress=false;
        consumer[1].address=&address2_2;

            consumer[1].user.atclass="com.nomorecards.webportal.commons.beans.Consumer";
            consumer[1].user.isAvailable=true;
            consumer[1].user.id=1;
            consumer[1].user.companyName="name company22";
            consumer[1].user.nickName="andres22";
            consumer[1].user.firstName="andres22";
            consumer[1].user.lastName="andres22";
            consumer[1].user.middleName="andres22";
            consumer[1].user.email="email22@email.com";
            consumer[1].user.country="colombia22";
            consumer[1].user.type="CONSUMER";

            consumer[1].user.numGroups=1;
                UserGroup usergroup_22;
            consumer[1].user.usergroup=&usergroup_22;
                usergroup_22.groupName="group";
                usergroup_22.numPermissions=1;
                    Permissions permissions_22;
                        permissions_22.permissionName="permission";
                        permissions_22.canEdit=false;
                        permissions_22.canDelete=false;
                        permissions_22.canRead=false;
                        permissions_22.canAdd=false;
                usergroup_22.permissions=&permissions_22;
                usergroup_22.groupId=5;

        consumer[1].user.numPaymentMethod=1;
            PaymentMethod paymentmethod_22;
        consumer[1].user.paymentmethod=&paymentmethod_22;
                paymentmethod_22.id=5;
                paymentmethod_22.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                paymentmethod_22.responsible="alguien";
                paymentmethod_22.type="AMERICAN_EXPRESS";

        consumer[1].user.numPhones=1;
            Phones phones_22;
        consumer[1].user.phones=&phones_22;
                phones_22.country.available = true;
                phones_22.country.code="12";
                phones_22.country.name="USA";
                phones_22.country.shortName="US";

                phones_22.phoneNumber="123";
                phones_22.type="MOBILE";

        consumer[1].user.numPermissions=1;
            Permissions permissions1_22;
        consumer[1].user.permissions=&permissions1_22;
                permissions1_22.permissionName="permission";
                permissions1_22.canEdit=false;
                permissions1_22.canDelete=false;
                permissions1_22.canRead=false;
                permissions1_22.canAdd=false;



////==================================================================================
//                                   CONSUMER 3
//====================================================================================

//          consumer[2].atclass="com.nomorecards.webportal.commons.beans.Consumer";
            consumer[2].title="title3";
            consumer[2].birthDate="01/01/2010";

            consumer[2].mainaddress.addressLine1 = "direction13";
            consumer[2].mainaddress.addressline2 = "direction23";
            consumer[2].mainaddress.country = "Spain3";
            consumer[2].mainaddress.state = "Catalunia3";
            consumer[2].mainaddress.city = "Barca3";
            consumer[2].mainaddress.zipCode = "12343";
            consumer[2].mainaddress.type = "HOME";
            consumer[2].mainaddress.mainAddress = true;

                consumer[2].appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                consumer[2].appsettings.language="espanol";
                consumer[2].appsettings.screenLockMinutes=44;
                consumer[2].appsettings.screenLockSeconds=55;

            consumer[2].loyaltysettings.numCategory=1;
                Category category_3;
                    category_3.id=1234;
                    category_3.name="nombre3";
//                        category_3.category="parent";
            consumer[2].loyaltysettings.category=&category_3;

            // // // // user as merchant

            consumer[2].loyaltysettings.numMerchant=1;
            User merchant_3;
            consumer[2].loyaltysettings.merchant=&merchant_3;
                merchant_3.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant_3.isAvailable=true;
                merchant_3.id=1;
                merchant_3.companyName="name company3";
                merchant_3.nickName="andres3";
                merchant_3.firstName="andres3";
                merchant_3.lastName="andres3";
                merchant_3.middleName="andres3";
                merchant_3.email="email3@email.com";
                merchant_3.country="usa3";
                merchant_3.type="CONSUMER";

                merchant_3.numGroups=1;
                    UserGroup usergroup1_3;
                    merchant_3.usergroup=&usergroup1_3;
                    usergroup1_3.groupName="group3";
                    usergroup1_3.numPermissions=1;
                        Permissions permissions2_3;
                        permissions2_3.permissionName="permission3";
                        permissions2_3.canEdit=false;
                        permissions2_3.canDelete=false;
                        permissions2_3.canRead=false;
                        permissions2_3.canAdd=false;
                        usergroup1_3.permissions=&permissions2_3;
                        usergroup1_3.groupId=5;

                merchant_3.numPaymentMethod=1;
                PaymentMethod paymentmethod2_3;
                    merchant_3.paymentmethod=&paymentmethod2_3;
                    paymentmethod2_3.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod2_3.id=5;
                    paymentmethod2_3.responsible="alguien3";
                    paymentmethod2_3.type="AMERICAN_EXPRESS";

                merchant_3.numPhones=1;
                    Phones phones2_3;
                    merchant_3.phones=&phones2_3;
                    phones2_3.country.available = true;
                    phones2_3.country.code="12";
                    phones2_3.country.name="USA";
                    phones2_3.country.shortName="US";


                    phones2_3.phoneNumber="123";
                    phones2_3.type="MOBILE";


                    merchant_3.numPermissions=1;
                    Permissions permissions4_3;
                        merchant_3.permissions=&permissions4_3;

                        permissions4_3.permissionName="permission3";
                        permissions4_3.canEdit=false;
                        permissions4_3.canDelete=false;
                        permissions4_3.canRead=false;
                        permissions4_3.canAdd=false;


                    consumer[2].loyaltysettings.numAddress=1;
                        Address address1_3;
                            address1_3.addressLine1="address13";
                            address1_3.addressline2="address23";
                            address1_3.country="USA3";
                            address1_3.state="state3";
                            address1_3.city="city3";
                            address1_3.zipCode="123453";
                            address1_3.type="HOME";
                            address1_3.mainAddress=false;
                    consumer[2].loyaltysettings.address=&address1_3;

                    consumer[2].loyaltysettings.whenPromotionExpiresTomrrow=true;
                    consumer[2].loyaltysettings.onlyNewPromotionFromFavorites=true;
                    consumer[2].loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                    consumer[2].loyaltysettings.receiveNotificationUntil = "05/12/2010";
                    consumer[2].loyaltysettings.receiveNotificationFrom = "05/12/2010";


            consumer[2].numAddress=1;
            Address address2_3;
                address2_3.addressLine1="address13";
                address2_3.addressline2="address23";
                address2_3.country="USA3";
                address2_3.state="state3";
                address2_3.city="city3";
                address2_3.zipCode="123453";
                address2_3.type="HOME";
                address2_3.mainAddress=false;
        consumer[2].address=&address2_3;

            consumer[2].user.atclass="com.nomorecards.webportal.commons.beans.Consumer";
            consumer[2].user.isAvailable=true;
            consumer[2].user.id=1;
            consumer[2].user.companyName="name company33";
            consumer[2].user.nickName="andres33";
            consumer[2].user.firstName="andres33";
            consumer[2].user.lastName="andres33";
            consumer[2].user.middleName="andres33";
            consumer[2].user.email="email33@email.com";
            consumer[2].user.country="colombia33";
            consumer[2].user.type="CONSUMER";

            consumer[2].user.numGroups=1;
                UserGroup usergroup_33;
            consumer[2].user.usergroup=&usergroup_33;
                usergroup_33.groupName="group33";
                usergroup_33.numPermissions=1;
                    Permissions permissions_33;
                        permissions_33.permissionName="permission33";
                        permissions_33.canEdit=false;
                        permissions_33.canDelete=false;
                        permissions_33.canRead=false;
                        permissions_33.canAdd=false;
                usergroup_33.permissions=&permissions_33;
                usergroup_33.groupId=5;

        consumer[2].user.numPaymentMethod=1;
            PaymentMethod paymentmethod_33;
        consumer[2].user.paymentmethod=&paymentmethod_33;
                paymentmethod_33.id=5;
                paymentmethod_33.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                paymentmethod_33.responsible="alguien33";
                paymentmethod_33.type="AMERICAN_EXPRESS";

        consumer[2].user.numPhones=1;
            Phones phones_33;
        consumer[2].user.phones=&phones_33;
                phones_33.country.available = true;
                phones_33.country.code="12";
                phones_33.country.name="USA";
                phones_33.country.shortName="US";

                phones_33.phoneNumber="123";
                phones_33.type="MOBILE";

        consumer[2].user.numPermissions=1;
            Permissions permissions1_33;
        consumer[2].user.permissions=&permissions1_33;
                permissions1_33.permissionName="permission";
                permissions1_33.canEdit=false;
                permissions1_33.canDelete=false;
                permissions1_33.canRead=false;
                permissions1_33.canAdd=false;

       buildJson buildJsonout;
       buildJsonout.buildJsonConsumer(consumer,3,obj,valOut);
       jSon=write(valOut);

        return jSon;

    #endif


}

string ProcessGetUsersResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
	NMCLog::Log("Get Users Reseller");
  try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETUSRES";


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetUsersReseller?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        string jSon;
        Object obj;
        Value valOut;

//========================================================================
//                      reseller 1
//========================================================================

        Reseller reseller[3];

            reseller[0].assignedTo="alguien1";
            reseller[0].supervisor="alguien1";
            reseller[0].department="comida1";



                //reseller - AppSettings
                reseller[0].appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                reseller[0].appsettings.language="spanglish1";
                reseller[0].appsettings.screenLockMinutes=1;
                reseller[0].appsettings.screenLockSeconds=1;

                //reseller - Suscription
                reseller[0].numSuscription=1;
                    Suscription suscription;
                    reseller[0].suscription=&suscription;
                        suscription.id=1;
                        suscription.name="name1";
                        suscription.cost=5.0;
                        suscription.duration=1;
                        suscription.durationType="DAYS";
                        suscription.purchaseDate="01/01/2011";
                        suscription.autoRenew=true;


                //reseller - Location
                Location location;
                reseller[0].numLocation=1;
                reseller[0].location=&location;

                location.numTerminal=1;
                    Terminal terminals;
                        terminals.id=1;
                        terminals.name="name1";
                        terminals.details="details1";
                    location.terminals=&terminals;

                    location.latitude=5.5;
                    location.longitude=5.5;

                    location.address.addressLine1="address11";
                    location.address.addressline2="address21";
                    location.address.country="USA1";
                    location.address.state="state1";
                    location.address.city="city1";
                    location.address.zipCode="123451";

                    location.address.type="HOME";
                    location.address.mainAddress=false;

            //reseller[0]- merchant
            Merchant merchant;
            reseller[0].numMerchant=1;
            reseller[0].merchant=&merchant;
                merchant.assignedTo="alguien1";
                merchant.supervisor="alguien1";
                merchant.department="comida1";

                //reseller[0]- Merchant - Category
                merchant.category.id=1;
                merchant.category.name="1231";
                //    merchant.category.category="123";

                //Merchant - AppSettings
                merchant.appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                merchant.appSettings.language="spanglish1";
                merchant.appSettings.screenLockMinutes=1;
                merchant.appSettings.screenLockSeconds=1;

                //reseller[0]- Merchant - Suscription
                merchant.numSuscription=1;
                    Suscription suscriptionmerch;
                    merchant.suscriptions=&suscriptionmerch;
                        suscriptionmerch.id=1;
                        suscriptionmerch.name="name1";
                        suscriptionmerch.cost=5.0;
                        suscriptionmerch.duration=1;
                        suscriptionmerch.durationType="DAYS";
                        suscriptionmerch.purchaseDate="01/01/2011";
                        suscriptionmerch.autoRenew=true;


                //reseller[0]-Merchant - Location
                merchant.numLocation=1;
                Location locationsmerch;
                merchant.locations=&locationsmerch;

                locationsmerch.numTerminal=1;
                Terminal terminalsmerch;
                locationsmerch.terminals=&terminalsmerch;
                        terminalsmerch.id=1;
                        terminalsmerch.name="name1";
                        terminalsmerch.details="details1";


                    locationsmerch.latitude=5.5;
                    locationsmerch.longitude=5.5;

                    locationsmerch.address.addressLine1="address11";
                    locationsmerch.address.addressline2="address21";
                    locationsmerch.address.country="USA1";
                    locationsmerch.address.state="state1";
                    locationsmerch.address.city="city1";
                    locationsmerch.address.zipCode="123451";

                    locationsmerch.address.type="HOME";
                    locationsmerch.address.mainAddress=false;

                //Merchant - User
                merchant.user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant.user.isAvailable=true;
                merchant.user.id=1;
                merchant.user.companyName="name company1";
                merchant.user.nickName="andres1";
                merchant.user.firstName="andres1";
                merchant.user.lastName="andres1";
                merchant.user.middleName="andres1";
                merchant.user.email="email@email.com";
                merchant.user.country="Colombia1";
                merchant.user.type="CONSUMER";

                merchant.user.numGroups=1;
                UserGroup usergroupmerch;
                merchant.user.usergroup=&usergroupmerch;
                    usergroupmerch.groupName="group1";
                    usergroupmerch.numPermissions=1;
                    Permissions permissionsmerch;
                    usergroupmerch.permissions=&permissionsmerch;
                        permissionsmerch.permissionName="permission1";
                        permissionsmerch.canEdit=false;
                        permissionsmerch.canDelete=false;
                        permissionsmerch.canRead=false;
                        permissionsmerch.canAdd=false;

                    usergroupmerch.groupId=5;

                merchant.user.numPaymentMethod=1;
                PaymentMethod paymentmethodmerch;
                merchant.user.paymentmethod=&paymentmethodmerch;
                    paymentmethodmerch.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethodmerch.id=5;
                    paymentmethodmerch.responsible="alguien1";
                    paymentmethodmerch.type="AMERICAN_EXPRESS";

                merchant.user.numPhones=1;
                Phones phonesmerch;
                merchant.user.phones=&phonesmerch;
                    phonesmerch.country.available = true;
                    phonesmerch.country.code="121";
                    phonesmerch.country.name="USA1";
                    phonesmerch.country.shortName="US1";
                    phonesmerch.phoneNumber="1231";
                    phonesmerch.type="MOBILE";

                merchant.user.numPermissions=1;
                Permissions permissionsmerch1_1;
                merchant.user.permissions=&permissionsmerch1_1;
                    permissionsmerch1_1.permissionName="permission1";
                    permissionsmerch1_1.canEdit=false;
                    permissionsmerch1_1.canDelete=false;
                    permissionsmerch1_1.canRead=false;
                    permissionsmerch1_1.canAdd=false;

            //reseller[0]- user
            reseller[0].user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                reseller[0].user.isAvailable=true;
                reseller[0].user.id=1;
                reseller[0].user.companyName="name company1";
                reseller[0].user.nickName="andres1";
                reseller[0].user.firstName="andres1";
                reseller[0].user.lastName="andres1";
                reseller[0].user.middleName="andres1";
                reseller[0].user.email="email@email.com";
                reseller[0].user.country="Colombia1";
                reseller[0].user.type="CONSUMER";

                reseller[0].user.numGroups=1;
                UserGroup usergroupres;
                reseller[0].user.usergroup=&usergroupres;
                    usergroupres.groupName="group1";
                    usergroupres.numPermissions=1;
                    Permissions permissionsres;
                    usergroupres.permissions=&permissionsres;
                        permissionsres.permissionName="permission1";
                        permissionsres.canEdit=false;
                        permissionsres.canDelete=false;
                        permissionsres.canRead=false;
                        permissionsres.canAdd=false;

                    usergroupres.groupId=5;

                reseller[0].user.numPaymentMethod=1;
                PaymentMethod paymentmethodres;
                reseller[0].user.paymentmethod=&paymentmethodres;
                    paymentmethodres.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethodres.id=5;
                    paymentmethodres.responsible="alguien1";
                    paymentmethodres.type="AMERICAN_EXPRESS";

                reseller[0].user.numPhones=1;
                Phones phonesres;
                reseller[0].user.phones=&phonesres;
                    phonesres.country.available = true;
                    phonesres.country.code="121";
                    phonesres.country.name="USA1";
                    phonesres.country.shortName="US1";
                    phonesres.phoneNumber="1213";
                    phonesres.type="MOBILE";

                reseller[0].user.numPermissions=1;
                Permissions permissionsres1_1;
                reseller[0].user.permissions=&permissionsres1_1;
                    permissionsres1_1.permissionName="permission1";
                    permissionsres1_1.canEdit=false;
                    permissionsres1_1.canDelete=false;
                    permissionsres1_1.canRead=false;
                    permissionsres1_1.canAdd=false;





//========================================================================
//                      reseller 2
//========================================================================

        //Reseller reseller[3];

            reseller[1].assignedTo="alguien2";
            reseller[1].supervisor="alguien2";
            reseller[1].department="comida2";



                //reseller - AppSettings
                reseller[1].appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                reseller[1].appsettings.language="spanglish2";
                reseller[1].appsettings.screenLockMinutes=1;
                reseller[1].appsettings.screenLockSeconds=1;

                //reseller - Suscription
                reseller[1].numSuscription=1;
                    Suscription suscription_2;
                    reseller[1].suscription=&suscription_2;
                        suscription_2.id=1;
                        suscription_2.name="name2";
                        suscription_2.cost=5.0;
                        suscription_2.duration=1;
                        suscription_2.durationType="DAYS";
                        suscription_2.purchaseDate="02/02/2012";
                        suscription_2.autoRenew=true;


                //reseller - Location
                Location location_2;
                reseller[1].numLocation=1;
                reseller[1].location=&location_2;

                location_2.numTerminal=1;
                    Terminal terminals_2;
                    location_2.terminals=&terminals_2;
                        terminals_2.id=1;
                        terminals_2.name="name2";
                        terminals_2.details="details2";


                    location_2.latitude=5.5;
                    location_2.longitude=5.5;

                    location_2.address.addressLine1="address12";
                    location_2.address.addressline2="address22";
                    location_2.address.country="USA2";
                    location_2.address.state="state2";
                    location_2.address.city="city2";
                    location_2.address.zipCode="123452";

                    location_2.address.type="HOME";
                    location_2.address.mainAddress=false;

            //reseller[1]- merchant
            reseller[1].numMerchant=1;
            Merchant merchant_2;
            reseller[1].merchant=&merchant_2;
                merchant_2.assignedTo="alguien2";
                merchant_2.supervisor="alguien2";
                merchant_2.department="comida2";

                //reseller[1]- Merchant - Category
                merchant_2.category.id=1;
                merchant_2.category.name="1232";
                //    merchant.category.category="123";

                //RESELLER- Merchant - AppSettings
                merchant_2.appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                merchant_2.appSettings.language="spanglish2";
                merchant_2.appSettings.screenLockMinutes=1;
                merchant_2.appSettings.screenLockSeconds=1;

                //reseller[1]- Merchant - Suscription
                merchant_2.numSuscription=1;
                    Suscription suscriptionmerch_2;
                    merchant_2.suscriptions=&suscriptionmerch_2;
                        suscriptionmerch_2.id=1;
                        suscriptionmerch_2.name="name2";
                        suscriptionmerch_2.cost=5.0;
                        suscriptionmerch_2.duration=1;
                        suscriptionmerch_2.durationType="DAYS";
                        suscriptionmerch_2.purchaseDate="02/02/2012";
                        suscriptionmerch_2.autoRenew=true;


                //reseller[0]-Merchant - Location
                merchant_2.numLocation=1;
                Location locationsmerch_2;
                merchant_2.locations=&locationsmerch_2;

                locationsmerch_2.numTerminal=1;
                Terminal terminalsmerch_2;
                locationsmerch_2.terminals=&terminalsmerch_2;
                        terminalsmerch_2.id=1;
                        terminalsmerch_2.name="name2";
                        terminalsmerch_2.details="details2";


                    locationsmerch_2.latitude=5.5;
                    locationsmerch_2.longitude=5.5;

                    locationsmerch_2.address.addressLine1="address12";
                    locationsmerch_2.address.addressline2="address22";
                    locationsmerch_2.address.country="USA2";
                    locationsmerch_2.address.state="state2";
                    locationsmerch_2.address.city="city2";
                    locationsmerch_2.address.zipCode="123452";

                    locationsmerch_2.address.type="HOME";
                    locationsmerch_2.address.mainAddress=false;

                //Merchant - User
                merchant_2.user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant_2.user.isAvailable=true;
                merchant_2.user.id=1;
                merchant_2.user.companyName="name company2";
                merchant_2.user.nickName="andres2";
                merchant_2.user.firstName="andres2";
                merchant_2.user.lastName="andres2";
                merchant_2.user.middleName="andres2";
                merchant_2.user.email="email@email.com";
                merchant_2.user.country="Colombia2";
                merchant_2.user.type="CONSUMER";

                merchant_2.user.numGroups=1;
                UserGroup usergroupmerch_2;
                merchant_2.user.usergroup=&usergroupmerch_2;
                    usergroupmerch_2.groupName="group2";
                    usergroupmerch_2.numPermissions=1;
                    Permissions permissionsmerch_2;
                    usergroupmerch_2.permissions=&permissionsmerch_2;
                        permissionsmerch_2.permissionName="permission2";
                        permissionsmerch_2.canEdit=false;
                        permissionsmerch_2.canDelete=false;
                        permissionsmerch_2.canRead=false;
                        permissionsmerch_2.canAdd=false;

                    usergroupmerch_2.groupId=5;

                merchant_2.user.numPaymentMethod=1;
                PaymentMethod paymentmethodmerch_2;
                merchant_2.user.paymentmethod=&paymentmethodmerch_2;
                    paymentmethodmerch_2.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethodmerch_2.id=5;
                    paymentmethodmerch_2.responsible="alguien2";
                    paymentmethodmerch_2.type="AMERICAN_EXPRESS";

                merchant_2.user.numPhones=1;
                Phones phonesmerch_2;
                merchant_2.user.phones=&phonesmerch_2;
                    phonesmerch_2.country.available = true;
                    phonesmerch_2.country.code="122";
                    phonesmerch_2.country.name="USA2";
                    phonesmerch_2.country.shortName="US2";
                    phonesmerch_2.phoneNumber="1232";
                    phonesmerch_2.type="MOBILE";

                merchant_2.user.numPermissions=1;
                Permissions permissionsmerch1_2;
                merchant_2.user.permissions=&permissionsmerch1_2;
                    permissionsmerch1_2.permissionName="permission2";
                    permissionsmerch1_2.canEdit=false;
                    permissionsmerch1_2.canDelete=false;
                    permissionsmerch1_2.canRead=false;
                    permissionsmerch1_2.canAdd=false;

            //reseller[0]- user
            reseller[1].user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                reseller[1].user.isAvailable=true;
                reseller[1].user.id=1;
                reseller[1].user.companyName="name company2";
                reseller[1].user.nickName="andres2";
                reseller[1].user.firstName="andres2";
                reseller[1].user.lastName="andres2";
                reseller[1].user.middleName="andres2";
                reseller[1].user.email="email@email.com";
                reseller[1].user.country="Colombia2";
                reseller[1].user.type="CONSUMER";

                reseller[1].user.numGroups=1;
                UserGroup usergroupres_2;
                reseller[1].user.usergroup=&usergroupres_2;
                    usergroupres_2.groupName="group2";
                    usergroupres_2.numPermissions=1;
                    Permissions permissionsres_2;
                    usergroupres_2.permissions=&permissionsres_2;
                        permissionsres_2.permissionName="permission2";
                        permissionsres_2.canEdit=false;
                        permissionsres_2.canDelete=false;
                        permissionsres_2.canRead=false;
                        permissionsres_2.canAdd=false;

                    usergroupres_2.groupId=5;

                reseller[1].user.numPaymentMethod=1;
                PaymentMethod paymentmethodres_2;
                reseller[1].user.paymentmethod=&paymentmethodres_2;
                    paymentmethodres_2.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethodres_2.id=5;
                    paymentmethodres_2.responsible="alguien2";
                    paymentmethodres_2.type="AMERICAN_EXPRESS";

                reseller[1].user.numPhones=1;
                Phones phonesres_2;
                reseller[1].user.phones=&phonesres_2;
                    phonesres_2.country.available = true;
                    phonesres_2.country.code="122";
                    phonesres_2.country.name="USA2";
                    phonesres_2.country.shortName="US2";
                    phonesres_2.phoneNumber="1232";
                    phonesres_2.type="MOBILE";

                reseller[1].user.numPermissions=1;
                Permissions permissionsres1_2;
                reseller[1].user.permissions=&permissionsres1_2;
                    permissionsres1_2.permissionName="permission2";
                    permissionsres1_2.canEdit=false;
                    permissionsres1_2.canDelete=false;
                    permissionsres1_2.canRead=false;
                    permissionsres1_2.canAdd=false;

//========================================================================
//                      reseller 3
//========================================================================

        //Reseller reseller[2];

            reseller[2].assignedTo="alguien";
            reseller[2].supervisor="alguien";
            reseller[2].department="comida";



                //reseller - AppSettings
                reseller[2].appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                reseller[2].appsettings.language="spanglish";
                reseller[2].appsettings.screenLockMinutes=1;
                reseller[2].appsettings.screenLockSeconds=1;

                //reseller - Suscription
                reseller[2].numSuscription=1;
                    Suscription suscription_3;
                    reseller[2].suscription=&suscription_3;
                        suscription_3.id=1;
                        suscription_3.name="name";
                        suscription_3.cost=5.0;
                        suscription_3.duration=1;
                        suscription_3.durationType="DAYS";
                        suscription_3.purchaseDate="01/01/2013";
                        suscription_3.autoRenew=true;


                //reseller - Location
                Location location_3;
                reseller[2].numLocation=1;
                reseller[2].location=&location_3;

                location_3.numTerminal=1;
                    Terminal terminals_3;
                    location_3.terminals=&terminals_3;
                        terminals_3.id=1;
                        terminals_3.name="name";
                        terminals_3.details="details";


                    location_3.latitude=5.5;
                    location_3.longitude=5.5;

                    location_3.address.addressLine1="address1";
                    location_3.address.addressline2="address2";
                    location_3.address.country="USA";
                    location_3.address.state="state";
                    location_3.address.city="city";
                    location_3.address.zipCode="12345";

                    location_3.address.type="HOME";
                    location_3.address.mainAddress=false;

            //reseller[2]- merchant
            Merchant merchant_3;
            reseller[2].numMerchant=1;
            reseller[2].merchant=&merchant_3;
                merchant_3.assignedTo="alguien";
                merchant_3.supervisor="alguien";
                merchant_3.department="comida";

                //reseller[2]- Merchant - Category
                merchant_3.category.id=1;
                merchant_3.category.name="123";
                //    merchant.category.category="123";

                //RESELLER- Merchant - AppSettings
                merchant_3.appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                merchant_3.appSettings.language="spanglish";
                merchant_3.appSettings.screenLockMinutes=1;
                merchant_3.appSettings.screenLockSeconds=1;

                //reseller[2]- Merchant - Suscription
                merchant_3.numSuscription=1;
                    Suscription suscriptionmerch_3;
                    merchant_3.suscriptions=&suscriptionmerch_3;
                        suscriptionmerch_3.id=1;
                        suscriptionmerch_3.name="name";
                        suscriptionmerch_3.cost=5.0;
                        suscriptionmerch_3.duration=1;
                        suscriptionmerch_3.durationType="DAYS";
                        suscriptionmerch_3.purchaseDate="01/01/2013";
                        suscriptionmerch_3.autoRenew=true;


                //reseller[2]-Merchant - Location
                merchant_3.numLocation=1;
                Location locationsmerch_3;
                merchant_3.locations=&locationsmerch_3;

                locationsmerch_3.numTerminal=1;
                Terminal terminalsmerch_3;
                locationsmerch_3.terminals=&terminalsmerch_3;
                        terminalsmerch_3.id=1;
                        terminalsmerch_3.name="name";
                        terminalsmerch_3.details="details";


                    locationsmerch_3.latitude=5.5;
                    locationsmerch_3.longitude=5.5;

                    locationsmerch_3.address.addressLine1="address1";
                    locationsmerch_3.address.addressline2="address2";
                    locationsmerch_3.address.country="USA";
                    locationsmerch_3.address.state="state";
                    locationsmerch_3.address.city="city";
                    locationsmerch_3.address.zipCode="12345";

                    locationsmerch_3.address.type="HOME";
                    locationsmerch_3.address.mainAddress=false;

                //Merchant - User
                merchant_3.user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant_3.user.isAvailable=true;
                merchant_3.user.id=1;
                merchant_3.user.companyName="name company";
                merchant_3.user.nickName="andres";
                merchant_3.user.firstName="andres";
                merchant_3.user.lastName="andres";
                merchant_3.user.middleName="andres";
                merchant_3.user.email="email@email.com";
                merchant_3.user.country="Colombia";
                merchant_3.user.type="CONSUMER";

                merchant_3.user.numGroups=1;
                UserGroup usergroupmerch_3;
                merchant_3.user.usergroup=&usergroupmerch_3;
                    usergroupmerch_3.groupName="group";
                    usergroupmerch_3.numPermissions=1;
                    Permissions permissionsmerch_3;
                    usergroupmerch_3.permissions=&permissionsmerch_3;
                        permissionsmerch_3.permissionName="permission";
                        permissionsmerch_3.canEdit=false;
                        permissionsmerch_3.canDelete=false;
                        permissionsmerch_3.canRead=false;
                        permissionsmerch_3.canAdd=false;

                    usergroupmerch_3.groupId=5;

                merchant_3.user.numPaymentMethod=1;
                PaymentMethod paymentmethodmerch_3;
                merchant_3.user.paymentmethod=&paymentmethodmerch_3;
                    paymentmethodmerch_3.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethodmerch_3.id=5;
                    paymentmethodmerch_3.responsible="alguien";
                    paymentmethodmerch_3.type="AMERICAN_EXPRESS";

                merchant_3.user.numPhones=1;
                Phones phonesmerch_3;
                merchant_3.user.phones=&phonesmerch_3;
                    phonesmerch_3.country.available = true;
                    phonesmerch_3.country.code="12";
                    phonesmerch_3.country.name="USA";
                    phonesmerch_3.country.shortName="US";
                    phonesmerch_3.phoneNumber="123";
                    phonesmerch_3.type="MOBILE";

                merchant_3.user.numPermissions=1;
                Permissions permissionsmerch1_3;
                merchant_3.user.permissions=&permissionsmerch1_3;
                    permissionsmerch1_3.permissionName="permission";
                    permissionsmerch1_3.canEdit=false;
                    permissionsmerch1_3.canDelete=false;
                    permissionsmerch1_3.canRead=false;
                    permissionsmerch1_3.canAdd=false;

            //reseller[2]- user
            reseller[2].user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                reseller[2].user.isAvailable=true;
                reseller[2].user.id=1;
                reseller[2].user.companyName="name company";
                reseller[2].user.nickName="andres";
                reseller[2].user.firstName="andres";
                reseller[2].user.lastName="andres";
                reseller[2].user.middleName="andres";
                reseller[2].user.email="email@email.com";
                reseller[2].user.country="Colombia";
                reseller[2].user.type="CONSUMER";

                reseller[2].user.numGroups=1;
                UserGroup usergroupres_3;
                reseller[2].user.usergroup=&usergroupres_3;
                    usergroupres_3.groupName="group";
                    usergroupres_3.numPermissions=1;
                    Permissions permissionsres_3;
                    usergroupres_3.permissions=&permissionsres_3;
                        permissionsres_3.permissionName="permission";
                        permissionsres_3.canEdit=false;
                        permissionsres_3.canDelete=false;
                        permissionsres_3.canRead=false;
                        permissionsres_3.canAdd=false;

                    usergroupres_3.groupId=5;

                reseller[2].user.numPaymentMethod=1;
                PaymentMethod paymentmethodres_3;
                reseller[2].user.paymentmethod=&paymentmethodres_3;
                    paymentmethodres_3.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethodres_3.id=5;
                    paymentmethodres_3.responsible="alguien";
                    paymentmethodres_3.type="AMERICAN_EXPRESS";

                reseller[2].user.numPhones=1;
                Phones phonesres_3;
                reseller[2].user.phones=&phonesres_3;
                    phonesres_3.country.available = true;
                    phonesres_3.country.code="12";
                    phonesres_3.country.name="USA";
                    phonesres_3.country.shortName="US";
                    phonesres_3.phoneNumber="123";
                    phonesres_3.type="MOBILE";

                reseller[2].user.numPermissions=1;
                Permissions permissionsres1_3;
                reseller[2].user.permissions=&permissionsres1_3;
                    permissionsres1_3.permissionName="permission";
                    permissionsres1_3.canEdit=false;
                    permissionsres1_3.canDelete=false;
                    permissionsres1_3.canRead=false;
                    permissionsres1_3.canAdd=false;


        buildJson buildJsonout;
       buildJsonout.buildJsonReseller(reseller,3,obj,valOut);
       jSon=write(valOut);
        return jSon;

    #endif


}

string ProcessGetConsumerByIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
    #ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer By ID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETCONBYID";

        //P114.88 Cnsumer id
		if(hData[__userId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__userId]).c_str()));
			hResult["114.88"]=Temp;
		}

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerbyID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else

    Consumer consumer;

//          consumer.atclass="com.nomorecards.webportal.commons.beans.Consumer";
            consumer.title="title";
            consumer.birthDate="01/01/2010";

            consumer.mainaddress.addressLine1 = "direction1";
            consumer.mainaddress.addressline2 = "direction2";
            consumer.mainaddress.country = "Spain";
            consumer.mainaddress.state = "Catalunia";
            consumer.mainaddress.city = "Barca";
            consumer.mainaddress.zipCode = "1234";
            consumer.mainaddress.type = "HOME";
            consumer.mainaddress.mainAddress = true;

                consumer.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                consumer.appsettings.language="espanol";
                consumer.appsettings.screenLockMinutes=44;
                consumer.appsettings.screenLockSeconds=55;

            consumer.loyaltysettings.numCategory=1;
                Category category;
                    category.id=1234;
                    category.name="nombre";
//                        category.category="parent";
            consumer.loyaltysettings.category=&category;

            // // // // user as merchant

            consumer.loyaltysettings.numMerchant=1;
            User merchant;
            consumer.loyaltysettings.merchant=&merchant;
                merchant.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant.isAvailable=true;
                merchant.id=1;
                merchant.companyName="name company";
                merchant.nickName="andres";
                merchant.firstName="andres";
                merchant.lastName="andres";
                merchant.middleName="andres";
                merchant.email="email@email.com";
                merchant.country="usa";
                merchant.type="CONSUMER";

                merchant.numGroups=1;
                    UserGroup usergroup1;
                    merchant.usergroup=&usergroup1;
                    usergroup1.groupName="group";
                    usergroup1.numPermissions=1;
                        Permissions permissions2;
                        permissions2.permissionName="permission";
                        permissions2.canEdit=false;
                        permissions2.canDelete=false;
                        permissions2.canRead=false;
                        permissions2.canAdd=false;
                        usergroup1.permissions=&permissions2;
                        usergroup1.groupId=5;

                merchant.numPaymentMethod=1;
                PaymentMethod paymentmethod2;
                    merchant.paymentmethod=&paymentmethod2;
                    paymentmethod2.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod2.id=5;
                    paymentmethod2.responsible="alguien";
                    paymentmethod2.type="AMERICAN_EXPRESS";

                merchant.numPhones=1;
                    Phones phones2;
                    merchant.phones=&phones2;
                    phones2.country.available = true;
                    phones2.country.code="12";
                    phones2.country.name="USA";
                    phones2.country.shortName="US";


                    phones2.phoneNumber="123";
                    phones2.type="MOBILE";


                    merchant.numPermissions=1;
                    Permissions permissions4;
                        merchant.permissions=&permissions4;

                        permissions4.permissionName="permission";
                        permissions4.canEdit=false;
                        permissions4.canDelete=false;
                        permissions4.canRead=false;
                        permissions4.canAdd=false;


                    consumer.loyaltysettings.numAddress=1;
                        Address address1;
                            address1.addressLine1="address1";
                            address1.addressline2="address2";
                            address1.country="USA";
                            address1.state="state";
                            address1.city="city";
                            address1.zipCode="12345";
                            address1.type="HOME";
                            address1.mainAddress=false;
                    consumer.loyaltysettings.address=&address1;

                    consumer.loyaltysettings.whenPromotionExpiresTomrrow=true;
                    consumer.loyaltysettings.onlyNewPromotionFromFavorites=true;
                    consumer.loyaltysettings.autodeleteUsedExpiredFromFavorites=true;
                    consumer.loyaltysettings.receiveNotificationUntil = "05/12/2010";
                    consumer.loyaltysettings.receiveNotificationFrom = "05/12/2010";


            consumer.numAddress=1;
            Address address2;
                address2.addressLine1="address1";
                address2.addressline2="address2";
                address2.country="USA";
                address2.state="state";
                address2.city="city";
                address2.zipCode="12345";
                address2.type="HOME";
                address2.mainAddress=false;
        consumer.address=&address2;

            consumer.user.atclass="com.nomorecards.webportal.commons.beans.Consumer";
            consumer.user.isAvailable=true;
            consumer.user.id=1;
            consumer.user.companyName="name company";
            consumer.user.nickName="andres";
            consumer.user.firstName="andres";
            consumer.user.lastName="andres";
            consumer.user.middleName="andres";
            consumer.user.email="email@email.com";
            consumer.user.country="colombia";
            consumer.user.type="CONSUMER";

            consumer.user.numGroups=1;
                UserGroup usergroup;
            consumer.user.usergroup=&usergroup;
                usergroup.groupName="group";
                usergroup.numPermissions=1;
                    Permissions permissions;
                        permissions.permissionName="permission";
                        permissions.canEdit=false;
                        permissions.canDelete=false;
                        permissions.canRead=false;
                        permissions.canAdd=false;
                usergroup.permissions=&permissions;
                usergroup.groupId=5;

        consumer.user.numPaymentMethod=1;
            PaymentMethod paymentmethod;
        consumer.user.paymentmethod=&paymentmethod;
                paymentmethod.id=5;
                paymentmethod.atclass = "com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                paymentmethod.responsible="alguien";
                paymentmethod.type="AMERICAN_EXPRESS";

        consumer.user.numPhones=1;
            Phones phones;
        consumer.user.phones=&phones;
                phones.country.available = true;
        phones.country.code="12";
        phones.country.name="USA";
        phones.country.shortName="US";

                phones.phoneNumber="123";
                phones.type="MOBILE";

        consumer.user.numPermissions=1;
            Permissions permissions1;
        consumer.user.permissions=&permissions1;
                permissions1.permissionName="permission";
                permissions1.canEdit=false;
                permissions1.canDelete=false;
                permissions1.canRead=false;
                permissions1.canAdd=false;

        Object obj;
        Value valOut;
        string json;
        buildJson buildJsonout;
        buildJsonout.buildJsonConsumer(&consumer,0,obj,valOut);

        json=write(obj);

        return json;

#endif
}

string ProcessGetMerchantByIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
    #ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Merchant By ID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P58
		hResult["58"]="1";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__userId]).c_str()));
		hResult["114.141"]=Temp;

		//P101
		hResult["101"]="GETMERBYID";




        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetMerchantByID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
        Object obj;
        Value valOut;
        string json;

        Merchant merchant;

            merchant.assignedTo="alguien";
            merchant.supervisor="alguien";
            merchant.department="comida";

                //Merchant - Category
                merchant.category.id=1;
                merchant.category.name="123";
                //    merchant.category.category="123";

                //Merchant - AppSettings
                merchant.appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                merchant.appSettings.language="spanglish";
                merchant.appSettings.screenLockMinutes=1;
                merchant.appSettings.screenLockSeconds=1;

                //Merchant - Suscription
                merchant.numSuscription=1;
                    Suscription suscription;
                        suscription.id=1;
                        suscription.name="name";
                        suscription.cost=5.0;
                        suscription.duration=1;
                        suscription.durationType="DAYS";
                        suscription.purchaseDate="01/01/2013";
                        suscription.autoRenew=true;
                merchant.suscriptions=&suscription;

                //Merchant - Location
                Location locations;
                merchant.numLocation=1;
                merchant.locations=&locations;

                locations.numTerminal=1;
                    Terminal terminals;
                        terminals.id=1;
                        terminals.name="name";
                        terminals.details="details";
                    locations.terminals=&terminals;

                    locations.latitude=5.5;
                    locations.longitude=5.5;

                    locations.address.addressLine1="address1";
                    locations.address.addressline2="address2";
                    locations.address.country="USA";
                    locations.address.state="state";
                    locations.address.city="city";
                    locations.address.zipCode="12345";

                    locations.address.type="HOME";
                    locations.address.mainAddress=false;

                //Merchant - User
                merchant.user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant.user.isAvailable=true;
                merchant.user.id=1;
                merchant.user.companyName="name company";
                merchant.user.nickName="andres";
                merchant.user.firstName="andres";
                merchant.user.lastName="andres";
                merchant.user.middleName="andres";
                merchant.user.email="email@email.com";
                merchant.user.country="Colombia";
                merchant.user.type="CONSUMER";

                merchant.user.numGroups=1;
                UserGroup usergroup;
                merchant.user.usergroup=&usergroup;
                    usergroup.groupName="group";
                    usergroup.numPermissions=1;
                    Permissions permissions;
                        permissions.permissionName="permission";
                        permissions.canEdit=false;
                        permissions.canDelete=false;
                        permissions.canRead=false;
                        permissions.canAdd=false;
                    usergroup.permissions=&permissions;
                    usergroup.groupId=5;

                merchant.user.numPaymentMethod=1;
                PaymentMethod paymentmethod;
                merchant.user.paymentmethod=&paymentmethod;
                    paymentmethod.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethod.id=5;
                    paymentmethod.responsible="alguien";
                    paymentmethod.type="AMERICAN_EXPRESS";

                merchant.user.numPhones=1;
                Phones phones;
                merchant.user.phones=&phones;
                    phones.country.available = true;
                    phones.country.code="12";
                    phones.country.name="USA";
                    phones.country.shortName="US";
                    phones.phoneNumber="123";
                    phones.type="MOBILE";

                merchant.user.numPermissions=1;
                Permissions permissions1_2;
                merchant.user.permissions=&permissions1_2;
                    permissions1_2.permissionName="permission";
                    permissions1_2.canEdit=false;
                    permissions1_2.canDelete=false;
                    permissions1_2.canRead=false;
                    permissions1_2.canAdd=false;





        buildJson buildJsonout;
        buildJsonout.buildJsonMerchant(&merchant,0,obj,valOut);

        json=write(obj);

        return json;

#endif
}

string ProcessGetResellerByIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
    #ifndef __TRANSACTIONS_DEBUG_
	NMCLog::Log("Get Reseller By ID");

try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P58
		hResult["58"]="1";

        //P114.141 reseller id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__userId]).c_str()));
		hResult["114.141"]=Temp;


		//P101
		hResult["101"]="GETRESBYID";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetResellerByID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else

    Reseller reseller;

            reseller.assignedTo="alguien";
            reseller.supervisor="alguien";
            reseller.department="comida";



                //reseller - AppSettings
                reseller.appsettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                reseller.appsettings.language="spanglish";
                reseller.appsettings.screenLockMinutes=1;
                reseller.appsettings.screenLockSeconds=1;

                //reseller - Suscription
                reseller.numSuscription=1;
                    Suscription suscription;
                    reseller.suscription=&suscription;
                        suscription.id=1;
                        suscription.name="name";
                        suscription.cost=5.0;
                        suscription.duration=1;
                        suscription.durationType="DAYS";
                        suscription.purchaseDate="01/01/2013";
                        suscription.autoRenew=true;


                //reseller - Location
                Location location;
                reseller.numLocation=1;
                reseller.location=&location;

                location.numTerminal=1;
                    Terminal terminals;
                        terminals.id=1;
                        terminals.name="name";
                        terminals.details="details";
                    location.terminals=&terminals;

                    location.latitude=5.5;
                    location.longitude=5.5;

                    location.address.addressLine1="address1";
                    location.address.addressline2="address2";
                    location.address.country="USA";
                    location.address.state="state";
                    location.address.city="city";
                    location.address.zipCode="12345";

                    location.address.type="HOME";
                    location.address.mainAddress=false;

            //reseller- merchant
            Merchant merchant;
            reseller.numMerchant=1;
            reseller.merchant=&merchant;
                merchant.assignedTo="alguien";
                merchant.supervisor="alguien";
                merchant.department="comida";

                //reseller- Merchant - Category
                merchant.category.id=1;
                merchant.category.name="123";
                //    merchant.category.category="123";

                //Merchant - AppSettings
                merchant.appSettings.atclass="com.nomorecards.webportal.commons.beans.AdminAppSettings";
                merchant.appSettings.language="spanglish";
                merchant.appSettings.screenLockMinutes=1;
                merchant.appSettings.screenLockSeconds=1;

                //Reseller- Merchant - Suscription
                merchant.numSuscription=1;
                    Suscription suscriptionmerch;
                    merchant.suscriptions=&suscriptionmerch;
                        suscriptionmerch.id=1;
                        suscriptionmerch.name="name";
                        suscriptionmerch.cost=5.0;
                        suscriptionmerch.duration=1;
                        suscriptionmerch.durationType="DAYS";
                        suscriptionmerch.purchaseDate="01/01/2013";
                        suscriptionmerch.autoRenew=true;


                //Reseller-Merchant - Location
                merchant.numLocation=1;
                Location locationsmerch;
                merchant.locations=&locationsmerch;

                locationsmerch.numTerminal=1;
                Terminal terminalsmerch;
                locationsmerch.terminals=&terminalsmerch;
                        terminalsmerch.id=1;
                        terminalsmerch.name="name";
                        terminalsmerch.details="details";


                    locationsmerch.latitude=5.5;
                    locationsmerch.longitude=5.5;

                    locationsmerch.address.addressLine1="address1";
                    locationsmerch.address.addressline2="address2";
                    locationsmerch.address.country="USA";
                    locationsmerch.address.state="state";
                    locationsmerch.address.city="city";
                    locationsmerch.address.zipCode="12345";

                    locationsmerch.address.type="HOME";
                    locationsmerch.address.mainAddress=false;

                //Merchant - User
                merchant.user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                merchant.user.isAvailable=true;
                merchant.user.id=1;
                merchant.user.companyName="name company";
                merchant.user.nickName="andres";
                merchant.user.firstName="andres";
                merchant.user.lastName="andres";
                merchant.user.middleName="andres";
                merchant.user.email="email@email.com";
                merchant.user.country="Colombia";
                merchant.user.type="CONSUMER";

                merchant.user.numGroups=1;
                UserGroup usergroupmerch;
                merchant.user.usergroup=&usergroupmerch;
                    usergroupmerch.groupName="group";
                    usergroupmerch.numPermissions=1;
                    Permissions permissionsmerch;
                    usergroupmerch.permissions=&permissionsmerch;
                        permissionsmerch.permissionName="permission";
                        permissionsmerch.canEdit=false;
                        permissionsmerch.canDelete=false;
                        permissionsmerch.canRead=false;
                        permissionsmerch.canAdd=false;

                    usergroupmerch.groupId=5;

                merchant.user.numPaymentMethod=1;
                PaymentMethod paymentmethodmerch;
                merchant.user.paymentmethod=&paymentmethodmerch;
                    paymentmethodmerch.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethodmerch.id=5;
                    paymentmethodmerch.responsible="alguien";
                    paymentmethodmerch.type="AMERICAN_EXPRESS";

                merchant.user.numPhones=1;
                Phones phonesmerch;
                merchant.user.phones=&phonesmerch;
                    phonesmerch.country.available = true;
                    phonesmerch.country.code="12";
                    phonesmerch.country.name="USA";
                    phonesmerch.country.shortName="US";
                    phonesmerch.phoneNumber="123";
                    phonesmerch.type="MOBILE";

                merchant.user.numPermissions=1;
                Permissions permissionsmerch1_1;
                merchant.user.permissions=&permissionsmerch1_1;
                    permissionsmerch1_1.permissionName="permission";
                    permissionsmerch1_1.canEdit=false;
                    permissionsmerch1_1.canDelete=false;
                    permissionsmerch1_1.canRead=false;
                    permissionsmerch1_1.canAdd=false;

            //reseller- user
            reseller.user.atclass="com.nomorecards.webportal.commons.beans.Merchant";
                reseller.user.isAvailable=true;
                reseller.user.id=1;
                reseller.user.companyName="name company";
                reseller.user.nickName="andres";
                reseller.user.firstName="andres";
                reseller.user.lastName="andres";
                reseller.user.middleName="andres";
                reseller.user.email="email@email.com";
                reseller.user.country="Colombia";
                reseller.user.type="CONSUMER";

                reseller.user.numGroups=1;
                UserGroup usergroupres;
                reseller.user.usergroup=&usergroupres;
                    usergroupres.groupName="group";
                    usergroupres.numPermissions=1;
                    Permissions permissionsres;
                    usergroupres.permissions=&permissionsres;
                        permissionsres.permissionName="permission";
                        permissionsres.canEdit=false;
                        permissionsres.canDelete=false;
                        permissionsres.canRead=false;
                        permissionsres.canAdd=false;

                    usergroupres.groupId=5;

                reseller.user.numPaymentMethod=1;
                PaymentMethod paymentmethodres;
                reseller.user.paymentmethod=&paymentmethodres;
                    paymentmethodres.atclass="com.nomorecards.webportal.commons.beans.ConsumerCreditCard";
                    paymentmethodres.id=5;
                    paymentmethodres.responsible="alguien";
                    paymentmethodres.type="AMERICAN_EXPRESS";

                reseller.user.numPhones=1;
                Phones phonesres;
                reseller.user.phones=&phonesres;
                    phonesres.country.available = true;
                    phonesres.country.code="12";
                    phonesres.country.name="USA";
                    phonesres.country.shortName="US";
                    phonesres.phoneNumber="123";
                    phonesres.type="MOBILE";

                reseller.user.numPermissions=1;
                Permissions permissionsres1_1;
                reseller.user.permissions=&permissionsres1_1;
                    permissionsres1_1.permissionName="permission";
                    permissionsres1_1.canEdit=false;
                    permissionsres1_1.canDelete=false;
                    permissionsres1_1.canRead=false;
                    permissionsres1_1.canAdd=false;



        Object obj;
        Value valOut;
        string json;
        buildJson buildJsonout;
        buildJsonout.buildJsonReseller(&reseller,0,obj,valOut);

        json=write(obj);

        return json;

#endif
}




//   _TRANSACTION_ADD_CONSUMER_WISH_LIST (int)43
string ProcessAddConsumerWishListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
	nameTransaction="Add Consumer Wish List";
	NMCLog::Log("Add Consumer Wish List");
	dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("] Name Wish [") + hData[__nameWish] + string("]") ;

    try
    {

        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDLISTWI";


        //114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        hResult["114.88"] = Temp;

        //121.86
        hResult["121.86"]= hData[__nameWish];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.85"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



        return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}

//   _TRANSACTION_REMOVE_CONSUMER_WISH_LIST (int)44
string ProcessRemoveConsumerWishListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Remove Consumer Wish List";
	NMCLog::Log("Remove Consumer Wish List");
    dataLog = string("Wish Id [") + hData[__Wishid] + string("]");

    try
    {

        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMLISTWI";

        //121.85
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__Wishid]).c_str()));
        hResult["121.85"] = Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}

// Loyality programs----------------------------------------
string ProcessLoyaltyProgramsListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("LoyaltyPrograms List");

 try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="LYTYPROLST";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/LoyaltyProgramsList?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

string ProcessLoyaltyProgramsFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Loyalty Programs Filter");

 try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="LYTYPROFIL";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //120.45

        if((hData[__categoryName]).length() > 0)
        {
			hResult["120.45"]=hData[__categoryName];
		}


        //121.116
		 if((hData[__subcategoryName]).length() > 0)
        {
			hResult["121.116"]=hData[__subcategoryName];
		}


        //121.26
		 if((hData[__dateStart]).length() > 0)
        {
            hResult["121.26"]=hData[__dateStart];
		}


        //120.42
		 if((hData[__dateEnd]).length() > 0)
        {
			hResult["120.42"]=hData[__dateEnd];
		}

        //121.140
		 if((hData[__dateBegin]).length() > 0)
        {
			hResult["121.140"]=hData[__dateBegin];
		}

        //121.141
		 if((hData[__dateEnd2]).length() > 0)
        {
			hResult["121.141"]=hData[__dateEnd2];
		}

        //114.138
		 if((hData[__dateCreate]).length() > 0)
        {
			hResult["114.138"]=hData[__dateCreate];
		}

        //114.139
		 if((hData[__dateExpire]).length() > 0)
        {
			hResult["114.139"]=hData[__dateExpire];
		}

        //121.72
		 if((hData[__type]).length() > 0)
        {
			hResult["121.72"]=hData[__type];
		}




         string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetLoyaltyProgramsFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}




// Remote Items----------------------------------------
string ProcessRemoteItemsListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	 NMCLog::Log("RemoteItems List");

try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="RTEITELST";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/RemoteItemsList?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

string ProcessRemoteItemsFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Remote Items Filter");
try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="RMTITFIL";





        if(hData[__merchantId].length()>0)
        {
            //114.141
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
            hResult["114.141"] = Temp;
        }

        if(hData[__categoryName].length()>0)
        {
            //de_120_045  -- category name
            hResult["120.45"] = hData[__categoryName];
        }

        if(hData[__subcategoryName].length()>0)
        {
            //de_121_116 -- subcategory name
            hResult["121.116"] = hData[__subcategoryName];
        }

        if(hData[__dateCreate].length()>0)
        {
            //de_121_140 -- dateCreate
            hResult["121.140"] = hData[__dateCreate];
        }

        if(hData[__dateEnd].length()>0)
        {
            //de_121_141 -- dateCreate
            hResult["121.141"] = hData[__dateEnd];
        }

        if(hData[__type].length()>0)
        {
            //de_121_115 -- type
            hResult["121.115"] = hData[__type];
        }


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/RemoteItemsFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

string ProcessRemoteItemsAddNewLoyaltyProgramTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="RemoteItems Add New Loyalty Program";
	NMCLog::Log("RemoteItems Add New Loyalty Program");
    dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("] Date Create [") + hData[__dateCreate] +
                string("] BarCode [") + hData[__barCode] +
                string("] Title [") + hData[__title] +
                string("] Date Expire [") + hData[__dateExpire] +
                string("] Category [") + hData[__category] +
                string("] Type [") + hData[__type] +
                string("] SubCategory [") + hData[__subCategory] +
                string("] Date Active [") + hData[__dateActive] +
                string("] Condition [") + hData[__condition] +
                string("] Original Price [") + hData[__originalPric] +
                string("] Sale Price [") + hData[__salePrace] +
                string("] Recurring [") + hData[__recuring] +
                string("] UPC Code [") + hData[__upcCode] +
                string("] Brand [") + hData[__brand] +
                string("] Image [") + hData[__image] +
                string("]");

    try
    {


        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOADDLOYAPRO";



        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

        //120.31
        hResult["120.31"] = hData[__dateCreate];

        //120.35
        hResult["120.35"] = hData[__barCode];

        //120.37
        hResult["120.37"] = hData[__title];

        //120.42
        hResult["120.42"] = hData[__dateExpire];

        //120.45
        hResult["120.45"] = hData[__category];

        //121.115
        hResult["121.115"] = hData[__type];

        //121.116
        hResult["121.116"] = hData[__subCategory];

        //121.117
        hResult["121.117"] = hData[__dateActive];

        //121.118
        hResult["121.118"] = hData[__condition];

        //121.119
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__originalPric]).c_str()));
        hResult["121.119"] = Temp;

        //121.120
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__salePrace]).c_str()));
        hResult["121.120"] = Temp;

        //121.121
        hResult["121.121"] = hData[__recuring];

        //121.122
        hResult["121.122"] = hData[__upcCode];

        //121.123
        hResult["121.123"] = hData[__brand];

        //121.124
        hResult["121.124"] = hData[__image];



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","47.21"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return "{123}";
#endif
}


// History---------------------------
string ProcessHistoryListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	   NMCLog::Log("History List");
try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="HSTLST";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/HistoryList?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

string ProcessHistoryFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	 NMCLog::Log("History Filter");

try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="HSTFIL";


        string mti="0305";


        //114.146 Transaction Date
        hResult["114.146"] = hData[__transactionDate];

        //114.147 Transaction type
        hResult["114.147"] = hData[__transactionType];

        //114.143
        hResult["114.143"] = hData[__status];



        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/HistoryFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}






// Ratings and Reviews---------------------------
string ProcessRatingsAndReviewsListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
	NMCLog::Log("Ratings And Reviews List");

try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="RTNGSREVLI";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/RatingsAndReviewsList?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

string ProcessRatingsAndReviewsFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Ratings And Reviews Filter");

try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="RTGSRVWFIL";


        string mti="0305";


        //114.123
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%02d",atoi((hData[__userType]).c_str()));
		hResult["114.123"]=Temp;

        //121.140
        hResult["121.140"]=hData[__dateBegin];

       //121.141
        hResult["121.141"]=hData[__dateEnd];


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/RatingsAndReviewsFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}


// _TRANSACTION_EDIT_MAIL
string ProcessEditMailConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Mail Consumer";
	NMCLog::Log("Edit Mail Consumer");
    dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("] Email [") + hData[__email] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="EDMAILCON";

		//P114.7
		hResult["114.7"]=hData[__email];

		//P114.88
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!this->ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;

    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}

string ProcessEditMailMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
    nameTransaction="Edit Mail Merchant";
	NMCLog::Log("Edit Mail Merchant");
    dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("] Email [") + hData[__email] +
                string("]");

    try
    {

        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="EDMAILMER";

		//P114.7
		hResult["114.7"]=hData[__email];

		//P114.141
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!this->ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
		   return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;

    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}

string ProcessEditMailResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Mail Reseller";
	NMCLog::Log("Edit Mail Reseller");
    dataLog =   string("Reseller Id [") + hData[__resellerId] +
                string("] Email [") + hData[__email] +
                string("]");

    try
    {

        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="EDMAILRES";


		//P114.7
		hResult["114.7"]=hData[__email];

		//P114.141
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
		hResult["114.141"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!this->ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;

    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}




// _TRANSACTION_CHANGE_PASSWORD
string ProcessChangePaswordConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Change Password Consumer";
	NMCLog::Log("Change Password Consumer");
    dataLog = string("Consumer Id [") + hData[__consumerId] + string("]");

try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

        //P52
        hResult["52"]=hData[__password];

		//P101
		hResult["101"]="CHANCONPASS";

        //P114.88
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

        //P121.127
        hResult["121.127"]=hData[__oldpasword];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}

string ProcessChangePaswordMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Change Password Merchant";
	NMCLog::Log("Change Password Merchant");
    dataLog = string("Merchant Id [") + hData[__merchantId] + string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

        //P52
        hResult["52"]=hData[__password];

		//P101
		hResult["101"]="CHANMERPASS";

        //P114.141
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //P121.127
        hResult["121.127"]=hData[__oldpasword];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }
#else
     return this->messageResponseTrue;
#endif
}

string ProcessChangePaswordResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Change Password Reseller";
	NMCLog::Log("Change Password Reseller");
    dataLog = string("Reseller Id [") + hData[__resellerId] + string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

        //P52
        hResult["52"]=hData[__password];

		//P101
		hResult["101"]="CHANRESPASS";

        //P114.141
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
		hResult["114.141"]=Temp;

        //P121.127
        hResult["121.127"]=hData[__oldpasword];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }
#else
     return this->messageResponseTrue;
#endif
}






// _TRANSACTION_USER_MANAGEMENT
string ProcessUserManagementTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("User Management");
try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="USMANA";


        string mti="0305";




        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/UserManagement?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

// _TRANSACTION_PAYMENT_DATA
string ProcessPaymentDataTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Payment Data");
try
    {
         hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETPAYDAT";


        string mti="0305";

        //114.179
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__userId]).c_str()));
        hResult["114.179"] = Temp;


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/PaymentData?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessProfileEditLocationsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Locations";
	NMCLog::Log("Edit Locations");
    dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("] Addresss 1 [") + hData[__address1] +
                string("] Addresss 2 [") + hData[__addres2] +
                string("] City [") + hData[__city] +
                string("] State [") + hData[__state] +
                string("] Zip Code [") + hData[__zipCode] +
                string("] Country [") + hData[__country] +
                string("] Company Name [") + hData[__companyName] +
				string("] Store Name [") + hData[__storeName] +
				string("] Mobil Number [") + hData[__movileNumber] +
				string("] Office Number [") + hData[__officeNumber] +
				string("] Contact Email [") + hData[__email] +
				string("] Contact Name[") + hData[__name] +
				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROEDITLOCA";


        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

        //114.47
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__locationId]).c_str()));
        hResult["114.47"] = Temp;

        if(hData[__address1].length() > 0)
        {
            //114.106
            hResult["114.106"]=hData[__address1];//82
        }

        if(hData[__addres2].length() > 0)
        {
            //114.107
            hResult["114.107"]=hData[__addres2]; //40
        }

        if(hData[__city].length() > 0)
        {
            //114.108
            hResult["114.108"]=hData[__city]; //41
        }

        if(hData[__state].length() > 0)
        {
            //120.13
            hResult["120.13"]=hData[__state];//42
        }

        if(hData[__zipCode].length() > 0)
        {
            //114.110
            hResult["114.110"]=hData[__zipCode];//43
        }

        if(hData[__country].length() > 0)
        {
            //120.73
            hResult["120.73"]=hData[__country];//44
        }

		if(hData[__companyName].length() > 0)
        {
            //114.70
            hResult["114.70"]=hData[__companyName];//35
        }

        if(hData[__storeName].length() > 0)
        {
            //121.150
            hResult["121.150"]=hData[__storeName];//101
        }




		 if(hData[__officeNumber].length() > 0)
        {
            //121.147
            hResult["121.147"]=hData[__officeNumber];//98
        }


        if(hData[__email].length() > 0)
        {
            //114.7
            hResult["114.7"]=hData[__email];//
        }

         if(hData[__name].length() > 0)
        {
            //114.26
            hResult["114.26"]=hData[__name];//
        }


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return this->messageResponseTrue;
#endif
}



string ProcessProfileAddLocationsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
    nameTransaction="Add Location";
	NMCLog::Log("Add Location");
    dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("] Addresss 1 [") + hData[__address1] +
                string("] Addresss 2 [") + hData[__addres2] +
                string("] City [") + hData[__city] +
                string("] State [") + hData[__state] +
                string("] Zip Code [") + hData[__zipCode] +
                string("] Country [") + hData[__country] +
                string("] Company Name [") + hData[__companyName] +
				string("] Store Name [") + hData[__storeName] +
				string("] Mobil Number [") + hData[__movileNumber] +
				string("] Work Number [") + hData[__workNumber] +
				string("] Contact Email [") + hData[__email] +
				string("] Contact Name[") + hData[__name] +
				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROADDLOCA";



        //114.106
        hResult["114.106"]=hData[__address1];//82
        //114.107
        hResult["114.107"]=hData[__addres2]; //40
        //114.108
        hResult["114.108"]=hData[__city]; //41
        //114.109
        hResult["114.109"]=hData[__state];//42
        //114.110
        hResult["114.110"]=hData[__zipCode];//43
        //114.111
        hResult["114.111"]=hData[__country];//44
		//114.70
        hResult["114.70"]=hData[__companyName];//35
		//121.150
        hResult["121.150"]=hData[__storeName];//101
		//114.52
        hResult["114.52"]=hData[__movileNumber];//11
		//121.147
        hResult["121.147"]=hData[__workNumber];//105

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;





        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.47"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }



#else
     return "{123}";
#endif
}

string ProcessDisableLocationsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Disable Locations";
    NMCLog::Log("Disable Locations");
	dataLog =   string("Locations Id [") + hData[__locationId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOLOCATI";

        //114.60
        hResult["114.59"] = hData[__locationId];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {


		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}



// Permissions ----------------------------------------------------------------------
string ProcessProfileEditPermisionsConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Permissions Consumer";
	NMCLog::Log("Edit Permissions Consumer");
	dataLog =   string("Permission Id [") + hData[__permissionId] +
                string("] Permission Name [") + hData[__permissionName] +
                string("] Consumer Id [")+ hData[__consumerId] +
                string("] Can Edit [")+ hData[__canEdit] +
                string("] Can Delete [")+ hData[__canDelete] +
                string("] Can Read [")+ hData[__canRead] +
                string("] Can Add [")+ hData[__canAdd] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDIPERCON";

        //121.128
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__permissionId]).c_str()));
        hResult["121.128"] = Temp;

        //121.36
        hResult["121.36"] = hData[__permissionName];

        //114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        hResult["114.88"] = Temp;

        //120.188
        hResult["120.188"] = hData[__canEdit];

        //120.189
        hResult["120.189"] = hData[__canDelete];

        //120.190
        hResult["120.190"] = hData[__canRead];

        //120.191
        hResult["120.191"] = hData[__canAdd];



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

string ProcessProfileEditPermisionsMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Mail Reseller";
	NMCLog::Log("Edit Mail Reseller");
	dataLog =   string("Permission Id [") + hData[__permissionId] +
                string("] Permission Name [") + hData[__permissionName] +
                string("] Merchant Id [") + hData[__merchantId] +
                string("] Can Edit [")+ hData[__canEdit] +
                string("] Can Delete [")+ hData[__canDelete] +
                string("] Can Read [")+ hData[__canRead] +
                string("] Can Add [")+ hData[__canAdd] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDIPERMER";

        //121.128
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__permissionId]).c_str()));
        hResult["121.128"] = Temp;

        //121.36
        hResult["121.36"] = hData[__permissionName];

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

        //120.188
        hResult["120.188"] = hData[__canEdit];

        //120.189
        hResult["120.189"] = hData[__canDelete];

        //120.190
        hResult["120.190"] = hData[__canRead];

        //120.191
        hResult["120.191"] = hData[__canAdd];



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return "{123}";
#endif
}

string ProcessProfileEditPermisionsResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Permissions Reseller";
	NMCLog::Log("Edit Permissions Reseller");
	dataLog =   string("Permission Id [") + hData[__permissionId] +
                string("] Permission Name [") + hData[__permissionName] +
                string("] Reseller Id [") + hData[__resellerId] +
                string("] Can Edit [")+ hData[__canEdit] +
                string("] Can Delete [")+ hData[__canDelete] +
                string("] Can Read [")+ hData[__canRead] +
                string("] Can Add [")+ hData[__canAdd] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDIPERRES";

        //121.128
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__permissionId]).c_str()));
        hResult["121.128"] = Temp;

        //121.36
        hResult["121.36"] = hData[__permissionName];

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
        hResult["114.141"] = Temp;

        //120.188
        hResult["120.188"] = hData[__canEdit];

        //120.189
        hResult["120.189"] = hData[__canDelete];

        //120.190
        hResult["120.190"] = hData[__canRead];

        //120.191
        hResult["120.191"] = hData[__canAdd];



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
		   return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return "{123}";
#endif
}





// _TRANSACTION_PROFILE_ADD_NEW_USER
string ProcessProfileAddNewConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add New Consumer";
	NMCLog::Log("Add New Consumer");
    dataLog =   string("First Name [") + hData[__firstName] +
                string("] Middle Name [") + hData[__middleName] +
                string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("] Movile Number [") + hData[__movileNumber] +
                string("] Category Name [") + hData[__categoryName] +
                string("] SubCategory Name [") + hData[__subcategoryName] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWCONSU";

        //114.5
        hResult["114.5"]=hData[__lastName];
        //114.3
        hResult["114.3"]=hData[__firstName];
        //114.4
        hResult["114.4"]=hData[__middleName];
        //114.7
        hResult["114.7"]=hData[__email];
        //114.21
        hResult["114.21"]=hData[__movileNumber];
        //114.137
        hResult["114.137"]=hData[__categoryName];

        //121.111
        hResult["121.111"]=hData[__subcategoryName];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.88"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessProfileAddNewMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_


	log=true;
    nameTransaction="Add New Merchant";
	NMCLog::Log("Add New Merchant");
    dataLog =   string("First Name [") + hData[__firstName] +
                string("] Middle Name [") + hData[__middleName] +
                string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("] Movile Number [") + hData[__movileNumber] +
                string("] Category Name [") + hData[__categoryName] +
                string("] SubCategory Name [") + hData[__subcategoryName] +
                string("] Title [") + hData[__title] +
                string("]");
    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROADDNEWMER";

		//114.5
        hResult["114.5"]=hData[__lastName];
        //114.3
        hResult["114.3"]=hData[__firstName];
        //114.4
        hResult["114.4"]=hData[__middleName];
        //114.7
        hResult["114.7"]=hData[__email];
        //114.21
        hResult["114.21"]=hData[__movileNumber];
        //114.151
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%01d",atoi((hData[__title]).c_str()));
        hResult["114.151"] = Temp;


        //114.137
        hResult["114.137"]=hData[__categoryName];
        //121.111
        hResult["121.111"]=hData[__subcategoryName];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.141"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
		   return out[2]+string(" - ")+out[1];
        }



	   return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessProfileAddNewResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
    nameTransaction="Add New Reseller";
	NMCLog::Log("Add New Reseller");
    dataLog =   string("First Name [") + hData[__firstName] +
                string("] Middle Name [") + hData[__middleName] +
                string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("] Movile Number [") + hData[__movileNumber] +
                string("] Category Name [") + hData[__categoryName] +
                string("] SubCategory Name [") + hData[__subcategoryName] +
                string("] Title [") + hData[__title] +
                string("]");

	try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROADDNEWRES";



        //114.5
        hResult["114.5"]=hData[__lastName];
        //114.3
        hResult["114.3"]=hData[__firstName];
        //114.4
        hResult["114.4"]=hData[__middleName];
        //114.7
        hResult["114.7"]=hData[__email];
        //114.21
        hResult["114.21"]=hData[__movileNumber];
        //114.151
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%01d",atoi((hData[__title]).c_str()));
        hResult["114.151"] = Temp;

        //114.137
        hResult["114.137"]=hData[__categoryName];
        //121.111
        hResult["121.111"]=hData[__subcategoryName];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.141"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


// PROFILE_EDIT
string ProcessProfileEditConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Consumer";
	NMCLog::Log("Edit Consumer");
	dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("] First Name [") + hData[__firstName] +
                string("] Middle Name [") + hData[__middleName] +
                string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("] Movile Number [") + hData[__movileNumber] +
                string("] Title [") + hData[__title] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROEDITCON";


        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //114.5
        if(hData[__lastName].length())
        {
            hResult["114.5"]=hData[__lastName];
        }

        //114.3
        if(hData[__firstName].length())
        {
            hResult["114.3"]=hData[__firstName];
        }

        //114.4
        if(hData[__middleName].length())
        {
            hResult["114.4"]=hData[__middleName];
        }

        //114.7 -----------------------
        if(hData[__email].length()>0)
        {
            hResult["114.7"]=hData[__email];
        }

        if((hData[__officeNumber]).length())
        {
            //121.147
            hResult["121.147"]=hData[__officeNumber];
        }

        if((hData[__movileNumber]).length())
        {
            //114.52
            hResult["114.52"]=hData[__movileNumber];
        }

        if((hData[__homePhone]).length())
        {
            //114.79
            hResult["114.79"]=hData[__homePhone];
        }

        if((hData[__country]).length())
        {
            //120.73
            hResult["120.73"]=hData[__country];
        }

        if((hData[__city]).length())
        {
            //114.108
            hResult["114.108"]=hData[__city];
        }

		if((hData[__state]).length())
        {
            //120.13
            hResult["120.13"]=hData[__state];
        }

        if((hData[__zipCode]).length())
        {
            //114.110
            hResult["114.110"]=hData[__zipCode];
        }

        //114.26
        if((hData[__title]).length())
        {
            //114.26
            hResult["114.26"]=hData[__title];
        }

        if((hData[__address1]).length())
        {
            //114.106
            hResult["114.106"]=hData[__address1];
        }

        if((hData[__addres2]).length())
        {
            //114.107
            hResult["114.107"]=hData[__addres2];
        }

        if((hData[__birthDate]).length())
        {
            //114.8
            hResult["114.8"]=hData[__birthDate];
        }

         if((hData[__extension2]).length())
        {
            //121.168
            hResult["121.168"]=hData[__extension2];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}

string ProcessProfileEditMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
    nameTransaction="Edit Merchant";
    NMCLog::Log("Edit Merchant");
    dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("] First Name [") + hData[__firstName] +
                string("] Middle Name [") + hData[__middleName] +
                string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("] Movile Number [") + hData[__movileNumber] +
                string("] Category Name [") + hData[__categoryName] +
                string("] SubCategory Name [") + hData[__subcategoryName] +
                string("] Title [") + hData[__title] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROEDITMER";


        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;
        //114.5
        hResult["114.5"]=hData[__lastName];
        //114.3
        hResult["114.3"]=hData[__firstName];
        //114.4
        hResult["114.4"]=hData[__middleName];
        //114.7
        hResult["114.7"]=hData[__email];
        //114.21
        hResult["114.21"]=hData[__movileNumber];
        //114.151
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%01d",atoi((hData[__title]).c_str()));
        hResult["114.151"] = Temp;

        //114.137
        hResult["114.137"]=hData[__categoryName];
        //121.111
        hResult["121.111"]=hData[__subcategoryName];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
		   return out[2]+string(" - ")+out[1];
        }

			return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return this->messageResponseTrue;
#endif
}

string ProcessProfileEditResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Reseller";
	NMCLog::Log("Edit Reseller");
	dataLog =   string("Reseller Id [") + hData[__resellerId] +
                string("] First Name [") + hData[__firstName] +
                string("] Middle Name [") + hData[__middleName] +
                string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("] Movile Number [") + hData[__movileNumber] +
                string("] Category Name [") + hData[__categoryName] +
                string("] SubCategory Name [") + hData[__subcategoryName] +
                string("] Title [") + hData[__title] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROEDITRES";


        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
        hResult["114.141"] = Temp;

        //114.5
        hResult["114.5"]=hData[__lastName];
        //114.3
        hResult["114.3"]=hData[__firstName];
        //114.4
        hResult["114.4"]=hData[__middleName];
        //114.7
        hResult["114.7"]=hData[__email];
        //114.21
        hResult["114.21"]=hData[__movileNumber];
        //114.151
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%01d",atoi((hData[__title]).c_str()));
        hResult["114.151"] = Temp;

        //114.137
        hResult["114.137"]=hData[__categoryName];
        //121.111
        hResult["121.111"]=hData[__subcategoryName];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}




// _TRANSACTION_PROFILE_REMOVE_USER
string ProcessProfileRemoveUserConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Profile Remove User Consumer";
	NMCLog::Log("Profile Remove User Consumer");
    dataLog = string("Consumer Id [") + hData[__consumerId] + string("]");

try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROREMOCONSU";

         //114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        hResult["114.88"] = Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
		   return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }
#else
     return this->messageResponseTrue;
#endif
}

string ProcessProfileRemoveUserMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Profile Remove User Merchant";
	NMCLog::Log("Profile Remove User Merchant");
    dataLog = string("Merchant Id [") + hData[__merchantId] + string("]");

try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROREMOMER";

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }
#else
     return this->messageResponseTrue;
#endif
}

string ProcessProfileRemoveUserResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Profile Remove User Reseller";
	NMCLog::Log("Profile Remove User Reseller");
    dataLog = string("Reseller Id [") + hData[__resellerId] + string("]");

try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROREMORES";

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
        hResult["114.141"] = Temp;



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }
#else
     return this->messageResponseTrue;
#endif
}




//---------------------------------transacciones de Accounting---------------------------
// _TRANSACTION_VIEW_BILLING_HISTORY_LIST
string ProcessViewBillingHistyoryListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

		NMCLog::Log("View Billing Histyory List");
try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="VIWBILHLIST";


        string mti="0305";


        //P114.123
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%02d",atoi((hData[__userType]).c_str()));
        hResult["114.123"]=Temp;

        //114.179
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__userId]).c_str()));
        hResult["114.179"]=Temp;

        //120.24
        hResult["120.24"]=hData[__transactionType];

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/ViewBillingHistyoryList?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

// _TRANSACTION_EXISTING_SUBSCRIPTIONS
string ProcessExistingSubscriptionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	 NMCLog::Log("Existing Subscriptions");
try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="EXISUBS";


        string mti="0305";



        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/ExistingSubscriptions?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

// _TRANSACTION_ADD_ONS_FOR_EXISTING_SUBSCRIPTIONS
string ProcessAddOnsForExistingSubscriptionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("AddOns For Existing Subscriptions");

try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="ADONSEXSUBS";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/AddOnsForExistingSubscriptions?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

// _TRANSACTION_NEW_SUBSCRIPTIONS
string ProcessNewSubsicriptionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

		NMCLog::Log("New Subsicriptions");
try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="NEWSUSCR";


        string mti="0305";



        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;

        if(!this->ProceessComunicationHTTP(string("/serverList/services/NewSubsicriptions?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}




// Wishlist ---------------------------------------------------------------------------
string ProcessAddLoyaltyProgramsToWishListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Loyalty Programs To Wish List";
	NMCLog::Log("Add Loyalty Programs To Wish List");
    dataLog =   string("Wish Id [") + hData[__Wishid] +
                string("] Coupon Id [") + hData[__couponId] +
                string("] Loyalty Type [") + hData[__loyaltyType] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDLOYWIS";

        //121.85
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__Wishid]).c_str()));
        hResult["121.85"] = Temp;

        //47.35
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__couponId]).c_str()));
        hResult["47.35"] = Temp;

        //120.28
        hResult["120.28"] = hData[__loyaltyType];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.112"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
		   return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return "{123}";
#endif

}

string ProcessRemoveLoyaltyProgramsToWishListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Remove Loyalty Programs To WishList";
	NMCLog::Log("Remove Loyalty Programs To WishList");
    dataLog =   string("Wish Id [") + hData[__Wishid] +
                string("] Coupon Id [") + hData[__couponId] +
                string("] Loyalty Type [") + hData[__loyaltyType] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMLOYWIS";

        //121.85
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__Wishid]).c_str()));
        hResult["121.85"] = Temp;

        //47.35
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__couponId]).c_str()));
        hResult["47.35"] = Temp;

        //120.28
        hResult["120.28"] = hData[__loyaltyType];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}




// Category ------------------------------------------------------------------
string ProcessAddFavoriteCategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Favorite Category";
	NMCLog::Log("Add Consumer Wish List");
    dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("] Coupon Id [") + hData[__couponId] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="ADDFAVCAT";

         //114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        hResult["114.88"] = Temp;

        //47.35
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__couponId]).c_str()));
        hResult["47.35"] = Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.113"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}


string ProcessRemoveFavoriteCategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Remove Favorite Category";
    NMCLog::Log("Remove Favorite Category");
    dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("] Coupon Id [") + hData[__couponId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMFAVCAT";

        //114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        hResult["114.88"] = Temp;

        //47.35
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__couponId]).c_str()));
        hResult["47.35"] = Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}

string ProcessGetFavoriteCategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Loyalty Programs By Remote Item Id");

try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETFAVCAT";


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;

        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetFavoriteCategory?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
         return "{123}";
#endif
}




// Merchant -------------------------------------------------------------------
string ProcessAddFavoriteMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Favorite Merchant";
	NMCLog::Log("Add Favorite Merchant");
    dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("] Merchant Id [") + hData[__merchantId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDFAVMER";


		//114.88
		if((hData[__consumerId]).length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"] = Temp;
		}


        //121.175
		if((hData[__merchantId]).length())
        {
			hResult["121.175"]=hData[__merchantId];
		}

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;


    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}

string ProcessRemoveFavoriteMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Remove Favorite Merchant";
	NMCLog::Log("Remove Favorite Merchant");
    dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("] Merchant ID [") + hData[__merchantId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMFAVMER";


        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.175
		if(hData[__merchantId].length())
			hResult["121.175"]=hData[__merchantId];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;


    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}

string ProcessGetFavoriteMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Favorite Merchant");

try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETFAVMER";


        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

         //121.140
		 if((hData[__dateBegin]).length() > 0)
        {
			hResult["121.140"]=hData[__dateBegin];
		}

        //121.141
		 if((hData[__dateEnd]).length() > 0)
        {
			hResult["121.141"]=hData[__dateEnd];
		}

         //114.137
		 if((hData[__typeCategoryName]).length() > 0)
        {
			hResult["114.137"]=hData[__typeCategoryName];
		}

        //121.81
		 if((hData[__category]).length() > 0)
        {
			hResult["121.81"]=hData[__category];
		}




        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;

        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetFavoriteMerchant?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
         return "{123}";
#endif
}




//  Address -----------------------------------------------------------------
string ProcessAddFavoriteAddressTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Favorite Address";
	NMCLog::Log("Add Favorite Address");
    dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("Address Id [") + hData[__addressId] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDFAVADD";

        //114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        hResult["114.88"] = Temp;

        //114.115
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__addressId]).c_str()));
        hResult["114.115"] = Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.111"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}

string ProcessRemoveFavoriteAddressTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Remove Favorite Address";
	NMCLog::Log("Remove Favorite Address");
    dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("] Address ID [") + hData[__addressId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOFAVADD";


        //114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        hResult["114.88"] = Temp;

        //114.115
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__addressId]).c_str()));
        hResult["114.115"] = Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
		   return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;

    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}


string ProcessGetFavoriteAddressTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Favorite Address");

try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETFAVADD";


        //114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        hResult["114.88"] = Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;

        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetFavoriteAddress?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else


     Address address;


    address.addressLine1="address1";
    address.addressline2="address2";
    address.country="USA";
    address.state="state";
    address.city="city";
    address.zipCode="12345";
    address.type="HOME";
    address.mainAddress=false;



        buildJson buildJsonout;


        string jSon;
        Object obj;
        Value valOut;

        buildJsonout.buildJsonAddress(&address,0,obj,valOut);


        jSon=write(obj);

        return jSon;
#endif
}


//   LoyaltyAddNewLoyaltyPrograms
string ProcessLoyaltyAddNewLoyalityProgramsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	//log=true;
    nameTransaction="Add New Loyalty Program";
	NMCLog::Log("Add New Loyalty Program");
    dataLog =   string("Merchant Id [") + hData[__merchantId] +
				string("] Title [") + hData[__title] +
				string("] SKU Code [") + hData[__remoteItemSKUCode] +
                string("] Date Active [") + hData[__dateActive] +
				string("] Date Expire [") + hData[__dateExpire] +
                string("] Type [") + hData[__type] +
                string("] Condition [") + hData[__condition] +
                string("] Original Price [") + hData[__originalPric] +
                string("] Sale Price [") + hData[__salePrace] +

                string("]");

    try
    {


        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDLOYAPRO";


        //114.141 - 25
        if(hData[__merchantId].length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
            string merId(Temp,strlen(Temp));
            hResult["114.141"] = Temp;

        }

        //120.83 - 12
        if(hData[__title].length())
        {
            hResult["120.83"] = hData[__title];
        }


		//121.102 - 12
		if(hData[__remoteItemSKUCode].length())
        {
            hResult["121.102"] = hData[__remoteItemSKUCode];
        }

        //121.115 - 50
        if(hData[__type].length())
        {
            hResult["121.115"] = hData[__type];
        }

		//121.117 - 54
		if(hData[__dateActive].length())
        {
            hResult["121.117"] = hData[__dateActive];
        }

        //120.42 - 55
        if(hData[__dateExpire].length())
        {
            hResult["120.42"] = hData[__dateExpire];
        }

		//121.175 - 188
        if(hData[__weekDays].length())
        {
            hResult["121.175"] = hData[__weekDays];
        }

		//121.140 - 91
        if(hData[__dateBegin].length())
        {
            hResult["121.140"] = hData[__dateBegin];
        }


		//121.141 - 92
		if(hData[__dateEnd].length())
        {
            hResult["121.141"] = hData[__dateEnd];
        }

		//114.26 - 141
        if(hData[__name].length())
        {
            hResult["114.26"] = hData[__name];
        }

		//120.32 - 73
        if(hData[__description].length())
        {
            hResult["120.32"] = hData[__description];
        }

        //121.118 - 56
        if(hData[__condition].length())
        {
            hResult["121.118"] = hData[__condition];
        }

        if(hData[__originalPric].length())
        {
            //121.119 - 57
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__originalPric]).c_str()));
            hResult["121.119"] = Temp;
        }

        if(hData[__salePrace].length())
        {
            //121.120 - 58
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__salePrace]).c_str()));
            hResult["121.120"] = Temp;
        }


		//121.173 - 190
        if(hData[__priceCoin1].length())
        {
            hResult["121.173"] = hData[__priceCoin1];
        }


		//121.173 - 191
        if(hData[__priceCoin2].length())
        {
            hResult["121.174"] = hData[__priceCoin2];
        }

        //120.45
        if(hData[__categoryName].length())
        {
            hResult["120.45"] = hData[__categoryName];
        }

        //121.116
        if(hData[__subcategoryName].length())
        {
            hResult["121.116"] = hData[__subcategoryName];
        }

        //114.137
        if(hData[__aditionalCategoryName].length())
        {
            hResult["114.137"] = hData[__aditionalCategoryName];
        }

        //121.181
        if(hData[__typeCategoryName].length())
        {
            hResult["121.181"] = hData[__typeCategoryName];
        }

		//120.103 barcode provider
        if(hData[__remoteItemBarCodeImage].length())
        {
            hResult["120.103"] = hData[__remoteItemBarCodeImage];
        }

		//114.104 barcode if available
        if(hData[__barCode].length())
        {
            hResult["114.104"] = hData[__barCode];
        }

		//121.172 discount percentaje
        if(hData[__taxes].length())
        {
            hResult["121.172"] = hData[__taxes];
        }

		//121.137 discount amount
        if(hData[__taxable].length())
        {
            hResult["121.137"] = hData[__taxable];
        }

         if(hData[__remoteItemId].length())
        {
            //121.52
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
            hResult["121.52"] = Temp;
        }

        //121.136
        if(hData[__recurringChargeAmount].length())
        {
            hResult["121.136"] = hData[__recurringChargeAmount];
        }

         //121.132
        if(hData[__recurringChargesCurrency].length())
        {
            hResult["121.132"] = hData[__recurringChargesCurrency];
        }

         //121.121
        if(hData[__recuring].length())
        {
            hResult["121.121"] = hData[__recuring];
        }

          //121.101 id barcode
        if(hData[__productId].length())
        {
            hResult["121.101"] = hData[__productId];
        }

          //120.127 qrcode
        if(hData[__qrCodeImage].length())
        {
            hResult["120.127"] = hData[__qrCodeImage];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","47.21"};
        string out[4];

               //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



// Validate
string ProcessValidateEmailTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Validate Email");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="VALIDEEMAIL";

        //114.7
        hResult["114.7"] = hData[__email];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return this->messageResponseFalse;
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}

string ProcessValidateCompannyNameTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Validate Companny Name");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="VALIDECOMNAME";



        //114.7
        hResult["114.70"] = hData[__companyName];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {

            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return this->messageResponseFalse;
        }


        return this->messageResponseTrue;

    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}




string ProcessGetClubsAndMembershipsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Clubs And Memberships");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCLUMEM";



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetClubsAndMemberships?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetConsumerInvoicesTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
	NMCLog::Log("Get Consumer Invoices");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETCONSINV";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetConsumerInvoices?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetConsumerWishListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Wish List");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCONSWL";

		 //P114.88 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetConsumerWishlist?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}




string ProcessGetMerchantByEmailAndStatusTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Merchant By Email And Status");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETUSEMAILSTAT";

        //P114.7
		hResult["114.7"]=hData[__email];

		//P114.143
		hResult["114.143"]=hData[__status];


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return "Failed  Build ISO";
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetMerchantByEmailAndStatus?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetResellerByEmailAndStatusTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
	NMCLog::Log("Get Reseller By Email And Status");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETRESMAILSTAT";

        //P114.7
		hResult["114.7"]=hData[__email];

		//P114.143
		hResult["114.143"]=hData[__status];


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetResellerByEmailAndStatus?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}



// Invoices -------------------------------------------------------------------
string ProcessGetRecentInvoicesTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Recent Invoices");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETRECINV";

		 //P114.141 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetRecentInvoices?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetInvoicesByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get InvoicesBy Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETINVMERCH";

		 //P114.141 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetInvoicesByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetInvoicesByResellerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Invoices By Reseller Id");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETINVRES";

		 //P114.141 reseller id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
		hResult["114.141"]=Temp;



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetInvoicesByResellerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}




// Tickets -------------------------------------------------------------------
string ProcessGetSecurityTicketsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Security Tickets By Merchant Id");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETSECTIMER";

		 //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetSecurityTicketsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetSecurityTicketsByResellerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Security Tickets By Reseller Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETSECTIRES";

		 //P114.141 reseller id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
		hResult["114.141"]=Temp;



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetSecurityTicketsByResellerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetTicketsByMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Tickets By Merchant");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETTICKMER";



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTicketsByMerchant?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetTicketsByResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Tickets By Reseller");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETTICKRES";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetTicketsByReseller?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessLostPhoneTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Lost Phone");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="LOSTPHONES";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/LostPhones?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetConsumerCouponAndPromotionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Coupon And Promotions");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCONCOUPROM";



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerCouponAndPromotions?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}



// add ratings and review
string ProcessAddNewRatingsAndReviewsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add New Ratings And Reviews";
	NMCLog::Log("Add New Ratings And Reviews");
    dataLog =   string("User Type [") + hData[__userType] +
                string("] User Id [") + hData[__userId] +
                string("] Rate [") + hData[__rate] +
                string("] Rater [") + hData[__rater] +
                string("] Note [") + hData[__note] +
                string("] Title [") + hData[__title] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="ADDRAANDRE";

        //P121.73
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__rate]).c_str()));
		hResult["121.73"]=Temp;

        //P114.123
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%02d",atoi((hData[__userType]).c_str()));
		hResult["114.123"]=Temp;

        //P114.179
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__userId]).c_str()));
        hResult["114.179"]=Temp;

        //114.88 - id rater
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__rater]).c_str()));
        hResult["114.88"]=Temp;

        //120.157
        hResult["120.157"]=hData[__note];

        //114.91
        hResult["114.91"]=hData[__title];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!this->ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.80"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return "{123}";
#endif
}


string ProcessGetCountriesTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Countries");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCOUNTRIES";



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCountriesList?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif

}

string ProcessGetCategoryByIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Category By ID");

	try
	{
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCATBYID";

		//P114.93
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__categoryId]).c_str()));
		hResult["114.93"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

         string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetCategoriesById?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
	}
	catch(...)
	{
	    return this->messageFailedException;
	}

#else
        return "{123}";

#endif
}

string ProcessGetStatesByCountryCodeTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get States By Country Code");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETSTABYCOUCO";

		//P114.17
		hResult["114.17"]=hData[__country];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetSatesByCountryID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessGetSubCategoriesByParentIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get SubCategories By Parent ID");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETSUBBYPARID";

		//P114.93
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__categoryId]).c_str()));
		hResult["114.93"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetSuCategoriesByParentID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}




string ProcessGetConsumerByTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Consumer By");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCONSUBY";

		//P114.127
		hResult["114.127"]=hData[__search];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetConsumerBy?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessGetMerchantByTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Merchant By");
    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETMERCHBY";

		//P114.127
		hResult["114.127"]=hData[__search];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetMerchantBy?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessGetResellerByTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{

#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Reseller By");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRESEBY";

		//P114.127
		hResult["114.127"]=hData[__search];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetResellerBy?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}



string ProcessGetInvoicesByDateTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Invoices By Date");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETINVOBYDATE";

		//P114.123
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%02d",atoi((hData[__userType]).c_str()));
		hResult["114.123"]=Temp;

		//P114.179
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__userId]).c_str()));
		hResult["114.179"]=Temp;

		//P121.140
		hResult["121.140"]=hData[__dateBegin];

		//P121.141
		hResult["121.141"]=hData[__dateEnd];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetInvoicesByDate?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}




string ProcessSearchUserConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Search User Consumer");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEARCHUSERCON";


        //121.145
        if((hData[__supervisor]).length() > 0)
        {
            hResult["121.145"] = hData[__supervisor];
        }

        //121.146
        if((hData[__assignedTo]).length() > 0)
        {
            hResult["121.146"] = hData[__assignedTo];
        }

        //121.144
        if((hData[__department]).length() > 0)
        {
            hResult["121.144"] = hData[__department];
        }

        //114.3
        if((hData[__userName]).length() > 0)
        {
            hResult["114.3"] = hData[__userName];
            hResult["114.4"] = hData[__userName];
            hResult["114.5"] = hData[__userName];
        }

        //114.143
        if((hData[__status]).length() > 0)
        {
            hResult["114.143"] = hData[__status];
        }

        //114.91
        if((hData[__title]).length() > 0)
        {
            hResult["114.91"] = hData[__title];
        }

        //114.70
        if((hData[__companyName]).length() > 0)
        {
            hResult["114.70"] = hData[__companyName];
        }

        //114.7
        if((hData[__email]).length() > 0)
        {
            hResult["114.7"] = hData[__email];
        }


		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/SearchUserCon?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessSearchUserMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Search User Merchant");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEARCHUSERMER";

        //121.145
        if((hData[__supervisor]).length() > 0)
        {
            hResult["121.145"] = hData[__supervisor];
        }

        //121.146
        if((hData[__assignedTo]).length() > 0)
        {
            hResult["121.146"] = hData[__assignedTo];
        }

        //121.144
        if((hData[__department]).length() > 0)
        {
            hResult["121.144"] = hData[__department];
        }

        //114.3
        if((hData[__userName]).length() > 0)
        {
            hResult["114.3"] = hData[__userName];
            hResult["114.4"] = hData[__userName];
            hResult["114.5"] = hData[__userName];
        }

        //114.143
        if((hData[__status]).length() > 0)
        {
            hResult["114.143"] = hData[__status];
        }

        //114.91
        if((hData[__title]).length() > 0)
        {
            hResult["114.91"] = hData[__title];
        }

        //114.70
        if((hData[__companyName]).length() > 0)
        {
            hResult["114.70"] = hData[__companyName];
        }

        //114.7
        if((hData[__email]).length() > 0)
        {
            hResult["114.7"] = hData[__email];
        }

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/SearchUserMer?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessSearchUserResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Search User Reseller");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEARCHUSERRES";

        //121.145
        if((hData[__supervisor]).length() > 0)
        {
            hResult["121.145"] = hData[__supervisor];
        }

        //121.146
        if((hData[__assignedTo]).length() > 0)
        {
            hResult["121.146"] = hData[__assignedTo];
        }

        //121.144
        if((hData[__department]).length() > 0)
        {
            hResult["121.144"] = hData[__department];
        }

        //114.3
        if((hData[__userName]).length() > 0)
        {
            hResult["114.3"] = hData[__userName];
            hResult["114.4"] = hData[__userName];
            hResult["114.5"] = hData[__userName];
        }

        //114.143
        if((hData[__status]).length() > 0)
        {
            hResult["114.143"] = hData[__status];
        }

        //114.91
        if((hData[__title]).length() > 0)
        {
            hResult["114.91"] = hData[__title];
        }

        //114.70
        if((hData[__companyName]).length() > 0)
        {
            hResult["114.70"] = hData[__companyName];
        }

        //114.7
        if((hData[__email]).length() > 0)
        {
            hResult["114.7"] = hData[__email];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/SearchUserRes?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}



// ADMI _NEW_consumer
string ProcessAdminNewConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Admin New Consumer";
	NMCLog::Log("Admin New Consumer");
    dataLog =   string("User Name [") + hData[__userName] +
                string("] First Name [") + hData[__userName] +
                string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADMINNEWCON";

        //114.5
        hResult["114.5"]=hData[__lastName];
        //114.3
        hResult["114.3"]=hData[__firstName];
        //114.7
        hResult["114.7"]=hData[__email];
        //114.26
        hResult["114.26"]=hData[__userName];
        //52
        hResult["52"]=hData[__password];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.88"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
		   return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAdminNewMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Admin New Merchant";
	NMCLog::Log("Admin New Merchant");
    dataLog =   string("User Name [") + hData[__userName] +
                string("] First Name [") + hData[__userName] +
                string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADMINNEWMER";



        //114.5
        hResult["114.5"]=hData[__lastName];
        //114.3
        hResult["114.3"]=hData[__firstName];
        //114.7
        hResult["114.7"]=hData[__email];
        //114.26
        hResult["114.26"]=hData[__userName];
        //52
        hResult["52"]=hData[__password];



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.141"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAdminNewResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Admin New Reseller";
	NMCLog::Log("Admin New Reseller");
    dataLog =   string("User Name [") + hData[__userName] +
                string("] First Name [") + hData[__userName] +
                string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADMINNEWRES";



        //114.5
        hResult["114.5"]=hData[__lastName];
        //114.3
        hResult["114.3"]=hData[__firstName];
        //114.7
        hResult["114.7"]=hData[__email];
        //114.26
        hResult["114.26"]=hData[__userName];
        //52
        hResult["52"]=hData[__password];



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.141"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewCouponTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add New Coupon";
	NMCLog::Log("Add New Coupon");
    dataLog =   string("Category Id [") + hData[__categoryId] +
                string("] Recurring [") + hData[__recuring] +
                string("] Merchant Id [") + hData[__merchantId] +
                string("] Sale Price [") + hData[__salePrice] +
                string("] Date Created [") + hData[__dateCreate] +
                string("] Date Active [") + hData[__dateActive] +
                string("] Date Expire [") + hData[__dateExpire] +
                string("] User Name [") + hData[__userName] +
                string("] Condition [") + hData[__condition] +
                string("] Image [") + hData[__image] +
                string("] Merchant Name [") + hData[__merchantName] +
                string("] Type [") + hData[__type] +
                string("] Get It Now [") + hData[__getItNow] +
                string("] Original Price [") + hData[__originalPric] +
                string("] Description [") + hData[__description] +
                string("] BarCode [") + hData[__barCode] +
                string("] UPC Code [") + hData[__upcCode] +
                string("] Brand [") + hData[__brand] +
                string("] Date Redeem [") + hData[__dateRedeem] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWCOUPON";


        //121.121
        hResult["121.121"]=hData[__recuring];
        //114.141
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;
        //121.120
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__salePrice]).c_str()));
		hResult["121.120"]=Temp;
        //120.31
        hResult["120.31"]=hData[__dateCreate];
        //121.117
        hResult["121.117"]=hData[__dateActive];
        //120.42
        hResult["120.42"]=hData[__dateExpire];
        //114.26
        hResult["114.26"]=hData[__userName];
        //121.118
        hResult["121.118"]=hData[__condition];
        //121.124
        hResult["121.124"]=hData[__image];
        //114.43
        hResult["114.43"]=hData[__merchantName];
        //114.93
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__categoryId]).c_str()));
		hResult["114.93"]=Temp;

        //121.115
        hResult["121.115"]=hData[__type];
        //121.151
        hResult["121.151"]=hData[__getItNow];
        //121.119
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__originalPric]).c_str()));
		hResult["121.119"]=Temp;
        //120.32
        hResult["120.32"]=hData[__description];
        //120.35
        hResult["120.35"]=hData[__barCode];
        //121.122
        hResult["121.122"]=hData[__upcCode];
        //121.123
        hResult["121.123"]=hData[__brand];
        //121.133
        hResult["121.133"]=hData[__dateRedeem];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","120.30"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAddNewPromotionTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add New Promotion";
	NMCLog::Log("Add New Promotion");
    dataLog =   string("Category Id [") + hData[__categoryId] +
                string("] Recurring [") + hData[__recuring] +
                string("] Merchant Id [") + hData[__merchantId] +
                string("] Sale Price [") + hData[__salePrice] +
                string("] Date Created [") + hData[__dateCreate] +
                string("] Date Active [") + hData[__dateActive] +
                string("] Date Expire [") + hData[__dateExpire] +
                string("] User Name [") + hData[__userName] +
                string("] Condition [") + hData[__condition] +
                string("] Image [") + hData[__image] +
                string("] Merchant Name [") + hData[__merchantName] +
                string("] Brand [") + hData[__brand] +
                string("] Description [") + hData[__description] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWPROMO";

        //121.121
        hResult["121.121"]=hData[__recuring];
        //114.141
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;
        //121.120
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__salePrice]).c_str()));
		hResult["121.120"]=Temp;
        //120.31
        hResult["120.31"]=hData[__dateCreate];
        //121.117
        hResult["121.117"]=hData[__dateActive];
        //120.42
        hResult["120.42"]=hData[__dateExpire];
        //114.26
        hResult["114.26"]=hData[__userName];
        //121.118
        hResult["121.118"]=hData[__condition];
        //121.124
        hResult["121.124"]=hData[__image];
        //114.43
        hResult["114.43"]=hData[__merchantName];
        //114.93
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__categoryId]).c_str()));
		hResult["114.93"]=Temp;
        //121.123
        hResult["121.123"]=hData[__brand];
        //120.32
        hResult["120.32"]=hData[__description];



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","120.30"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessRegisterMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Register Merchant";
	NMCLog::Log("Register Merchant");
    dataLog =   string("First Name [") + hData[__firstName] +
                string("] Middle Name [") + hData[__middleName] +
				string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("] Mobile Number [") + hData[__movileNumber] +
                string("] Title [") + hData[__title] +
                string("] Category Name [") + hData[__categoryName] +
                string("] SubCategory Name [") + hData[__subcategoryName] +
                string("] Companny Name [") + hData[__companyName] +
                string("] Home phone [") + hData[__homePhone] +
                string("] DBA Name [") + hData[__DBAName] +
                string("] Office Number [") + hData[__officeNumber] +
                string("] Years in Bussines [") + hData[__yearsinBussines] +
                string("] Type Bussines [") + hData[__typeBussines] +
				string("] Password [") + hData[__password] +
				string("] Confirm Password [") + hData[__conParword] +
				string("] Address1 [") + hData[__address1] +
				string("] Address2 [") + hData[__addres2] +
				string("] Country [") + hData[__country] +
				string("] City [") + hData[__city] +
				string("] State [") + hData[__state] +
				string("] Zip [") + hData[__zipCode] +
				string("] Flag Qaantity location [") + hData[__quantityLocation] +
				string("] Flag Merchant Account [") + hData[__merchantAccount] +
				string("] Merchant Account Provider [") + hData[__merchantAccountProvider] +
				string("] Contact name provider [") + hData[__contactName] +
                string("] Contact Phone [") + hData[__contactNamePhone] +
				string("] Extension for provider [") + hData[__extension1] +
				string("] Extension for merchant office [") + hData[__extension2] +

				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROREGISTERMER";

		//114.7
        hResult["114.7"]=hData[__email];

        //52
        hResult["52"]=hData[__password];

		//121.127
        hResult["121.127"]=hData[__conParword];

		//114.70
        hResult["114.70"]=hData[__companyName];

		if((hData[__DBAName]).length())
        {
            //114.71
            hResult["114.71"]=hData[__DBAName];
        }

		//114.26
        hResult["114.26"]=hData[__title];

		//114.5
        hResult["114.5"]=hData[__lastName];


		if((hData[__middleName]).length())
        {
            //114.4
            hResult["114.4"]=hData[__middleName];
        }

		//114.3
        hResult["114.3"]=hData[__firstName];


        //121.147
        hResult["121.147"]=hData[__officeNumber];


		//114.52
        hResult["114.52"]=hData[__movileNumber];


        if((hData[__homePhone]).length())
        {
            //114.79
            hResult["114.79"]=hData[__homePhone];
        }


        if((hData[__yearsinBussines]).length())
        {
            //121.148
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%03d",atoi((hData[__yearsinBussines]).c_str()));
            hResult["121.148"]=Temp;
        }

		//114.137
        hResult["114.137"]=hData[__categoryName];

		//121.111
        hResult["121.111"]=hData[__subcategoryName];

        //114.106
        hResult["114.106"]=hData[__address1];

        if((hData[__addres2]).length())
        {
            //114.107
            hResult["114.107"]=hData[__addres2];
        }

		//120.73
        hResult["120.73"]=hData[__country];

        //114.108
        hResult["114.108"]=hData[__city];

		//120.13
        hResult["120.13"]=hData[__state];

		//114.110
        hResult["114.110"]=hData[__zipCode];

		//121.165
        hResult["121.165"]=hData[__quantityLocation];


		//121.166
        hResult["121.166"]=hData[__merchantAccount];


        if((hData[__merchantAccountProvider]).length())
        {
            //121.150
            hResult["121.150"]=hData[__merchantAccountProvider];
        }

		//120.57
		if((hData[__contactName]).length())
        {
			hResult["120.57"]=hData[__contactName];
		}

		//120.56
		if((hData[__contactNamePhone]).length())
        {
			hResult["120.56"]=hData[__contactNamePhone];
		}

		//121.167 extension for provider
		if((hData[__extension1]).length())
        {
			hResult["121.167"]=hData[__extension1];
		}

		//121.168 extension for merchant
		if((hData[__extension2]).length())
        {
			hResult["121.168"]=hData[__extension2];
		}


        //121.175
        hResult["121.175"]=hData[__typeBussines];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.141"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddMerchantAccountNameTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Merchant Account Name";
	NMCLog::Log("Add Merchant Account Name");
    dataLog =   string("Merchant id [") + hData[__merchantId] +
                string("] Store name [") + hData[__storeName] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDMERACCNAME";

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;
        //121.150
        hResult["121.150"]=hData[__storeName];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.141"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAddStoreMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Store Merchant";
	NMCLog::Log("Add Store Merchant");
    dataLog =   string("Merchant id [") + hData[__merchantId] +
                string("] Store name [") + hData[__storeName] +
                string("] Company name [") + hData[__companyName] +
                string("] Address 1 [") + hData[__address1] +
				string("] Address 2 [") + hData[__addres2] +
				string("] Country [") + hData[__country] +
				string("] City [") + hData[__city] +
				string("] State [") + hData[__state] +
				string("] Zip [") + hData[__zipCode] +
				string("] Mobile Number [") + hData[__movileNumber] +
				string("] Office Number [") + hData[__officeNumber] +

                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDSTOREMER";


        //114.141 -- GENERADO
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

        //121.150
		if(hData[__storeName].length())
            hResult["121.150"]=hData[__storeName];

        //114.70
        if(hData[__companyName].length())
            hResult["114.70"]=hData[__companyName];

         //114.106
        if(hData[__address1].length())
            hResult["114.106"]=hData[__address1];

         //114.107
         if(hData[__addres2].length())
            hResult["114.107"]=hData[__addres2];

         //120.73
         if(hData[__country].length())
            hResult["120.73"]=hData[__country];

         //114.108
         if(hData[__city].length())
            hResult["114.108"]=hData[__city];

         //120.13
         if(hData[__state].length())
            hResult["120.13"]=hData[__state];

         //114.110
         if(hData[__zipCode].length())
            hResult["114.110"]=hData[__zipCode];



         //121.147
         if(hData[__officeNumber].length())
            hResult["121.147"]=hData[__officeNumber];

        //114.7
        if(hData[__email].length())
            hResult["114.7"]=hData[__email];//

        //114.26
        if(hData[__name].length())
            hResult["114.26"]=hData[__name];//




        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.47"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessRegisterConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
    nameTransaction="Register Consumer";
    NMCLog::Log("Register Consumer");
	dataLog =   string("First Name [") + hData[__firstName] +
                string("] Middle Name [") + hData[__middleName] +
                string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("] Address 1 [") + hData[__address1] +
                string("] Address 2 [") + hData[__addres2] +
                string("] City [") + hData[__city] +
                string("] State [") + hData[__state] +
                string("] Zip Code [") + hData[__zipCode] +
                string("] Country [") + hData[__country] +
                string("] Title [") + hData[__title] +
                string("] BirthDate [") + hData[__birthDate] +
                string("] Work Number [") + hData[__workNumber] +
                string("] Movile Number [") + hData[__movileNumber] +
                string("] Home Phone Number [") + hData[__homePhone] +
                string("]");
    try
    {

        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;





		//P101
		hResult["101"]="REGICONS";


        //114.7
		if(hData[__email].length())
			hResult["114.7"]=hData[__email];

        //52
		if(hData[__password].length())
			hResult["52"]=hData[__password];

        //52
		if(hData[__conParword].length())
			hResult["121.127"]=hData[__conParword];

        //114.27
		if(hData[__mobileAppPincodeOld].length())
			hResult["114.27"]=hData[__mobileAppPincodeOld];

        //114.26
		if(hData[__title].length())
			hResult["114.26"]=hData[__title];

        //114.5
		if(hData[__lastName].length())
			hResult["114.5"]=hData[__lastName];

        //114.3
		if(hData[__firstName].length())
			hResult["114.3"]=hData[__firstName];

        //114.4
        if(hData[__middleName].length()>0)
			hResult["114.4"]=hData[__middleName];

        //114.8
		if(hData[__birthDate].length())
			hResult["114.8"]=hData[__birthDate];

        //121.147
		if(hData[__officeNumber].length())
			hResult["121.147"]=hData[__officeNumber];

        //114.52
		if(hData[__movileNumber].length())
			hResult["114.52"]=hData[__movileNumber];

        //114.79
		if(hData[__homePhone].length())
			hResult["114.79"]=hData[__homePhone];

        //121.168
		if(hData[__extension2].length())
			hResult["121.168"]=hData[__extension2];


        //114.12
		if(hData[__address1].length())
			hResult["114.12"]=hData[__address1];

        //114.13
        if(hData[__addres2].length()>0)
			hResult["114.13"]=hData[__addres2];

        //114.14
		if(hData[__city].length())
			hResult["114.14"]=hData[__city];

        //120.13
		if(hData[__state].length())
			hResult["120.13"]=hData[__state];

        //114.16
		if(hData[__consumerId].length())
			hResult["114.16"]=hData[__zipCode];

        //120.73
		if(hData[__country].length())
			hResult["120.73"]=hData[__country];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.88"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




string ProcessAddNewClubAndMembershipTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add New Club And Membership";
	NMCLog::Log("Add New Club And Membership");
    dataLog =   string("Merchant id [") + hData[__merchantId] +
                string("] Merchant Name [") + hData[__merchantName] +
                string("] Category id [") + hData[__categoryId] +
                string("] Recurring [") + hData[__recuring] +
                string("] Sale Price [") + hData[__salePrice] +
                string("] Date Create [") + hData[__dateCreate] +
                string("] Date Active [") + hData[__dateActive] +
                string("] Date Expire [") + hData[__dateExpire] +
                string("] User Name [") + hData[__userName] +
                string("] Condition [") + hData[__condition] +
                string("] Image [") + hData[__image] +
                string("] Need Faces [") + hData[__needsFaces] +
                string("] Recurring Cahrge Amount [") + hData[__recurringChargeAmount] +
                string("] Logo Image [") + hData[__logoImage] +
                string("] Recurring Charges Currency [") + hData[__recurringChargesCurrency] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWCANDM";



        //121.121
        hResult["121.121"]=hData[__recuring];
        //114.141
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;
        //121.120
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__salePrice]).c_str()));
		hResult["121.120"]=Temp;
        //120.31
        hResult["120.31"]=hData[__dateCreate];
        //121.117
        hResult["121.117"]=hData[__dateActive];
        //120.42
        hResult["120.42"]=hData[__dateExpire];
        //114.26
        hResult["114.26"]=hData[__userName];
        //121.118
        hResult["121.118"]=hData[__condition];
        //121.124
        hResult["121.124"]=hData[__image];
        //114.43
        hResult["114.43"]=hData[__merchantName];
        //114.93
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__categoryId]).c_str()));
		hResult["114.93"]=Temp;

        //121.78
        hResult["121.78"]=hData[__needsFaces];
        //121.137
        hResult["121.137"]=hData[__recurringChargeAmount];
        //121.77
        hResult["121.77"]=hData[__logoImage];
        //121.132
        hResult["121.132"]=hData[__recurringChargesCurrency];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","120.30"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetCouponTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Coupon");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCPN";




        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCoupon?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetPromotionTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

		 NMCLog::Log("Get Promotion");

    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETPROMO";




        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetPromotion?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetCouponByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	 NMCLog::Log("Get CouponBy Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCPNBYID";

         //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCouponByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }
#else
     return "{123}";
#endif
}

string ProcessGetPromotionByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

		 NMCLog::Log("Get Promotion By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETPROMOBYID";

		  //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetPromotionByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetClubsAndMembershipsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Clubs And Memberships By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCLUMEMBYID";

		 //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetClubsAndMembershipsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




string ProcessAddLogTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWLOG";

        //114.26
        hResult["114.26"]=hData[__logName];

        //120.158
        hResult["120.157"]=hData[__description];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }

        return this->messageResponseTrue;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetLogsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Logs");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETLOGS";




        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetLogs?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
     return "{123}";
#endif
}


string ProcessGetMerchantCouponFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Merchant Coupon Filter");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCOUPFIL";

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //120.045
        if((hData[__categoryName]).length() > 0)
        {
            hResult["120.045"] = hData[__categoryName];
        }

        //121.116
        if((hData[__subcategoryName]).length() > 0)
        {
            hResult["121.116"] = hData[__subcategoryName];
        }

        //120.031
        if((hData[__dateCreate]).length() > 0)
        {
            hResult["120.031"] = hData[__dateCreate];
        }

		//121.117
        if((hData[__dateActive]).length() > 0)
        {
            hResult["121.117"] = hData[__dateActive];
        }

		//120.042
        if((hData[__dateExpire]).length() > 0)
        {
            hResult["120.042"] = hData[__dateExpire];
        }

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {

            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetCouponFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessGetMerchantPromotionFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Merchant Promotion Filter");
    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		//P101
		hResult["101"]="GETPROMOFIL";


        //120.045
        if((hData[__categoryName]).length() > 0)
        {
            hResult["120.045"] = hData[__categoryName];
        }

        //121.116
        if((hData[__subcategoryName]).length() > 0)
        {
            hResult["121.116"] = hData[__subcategoryName];
        }

        //120.031
        if((hData[__dateCreate]).length() > 0)
        {
            hResult["120.031"] = hData[__dateCreate];
        }

		//121.117
        if((hData[__dateActive]).length() > 0)
        {
            hResult["121.117"] = hData[__dateActive];
        }

		//120.042
        if((hData[__dateExpire]).length() > 0)
        {
            hResult["120.042"] = hData[__dateExpire];
        }

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {

            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetPromotionFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessGetMerchantClubsAndMembershipsFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Merchant Clubs And Memberships Filter");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCLUBFIL";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //120.045
        if((hData[__categoryName]).length() > 0)
        {
            hResult["120.045"] = hData[__categoryName];
        }

        //121.116
        if((hData[__subcategoryName]).length() > 0)
        {
            hResult["121.116"] = hData[__subcategoryName];
        }

        //120.031
        if((hData[__dateCreate]).length() > 0)
        {
            hResult["120.031"] = hData[__dateCreate];
        }

		//121.117
        if((hData[__dateActive]).length() > 0)
        {
            hResult["121.117"] = hData[__dateActive];
        }

		//120.042
        if((hData[__dateExpire]).length() > 0)
        {
            hResult["120.042"] = hData[__dateExpire];
        }

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {

            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetClubsAndMembershipsFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}








string ProcessGetConsumerClubsAndMembershipsFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Consumer Clubs And Memberships Filter");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCLUBFIL";


        //120.045
        if((hData[__categoryName]).length() > 0)
        {
            hResult["120.045"] = hData[__categoryName];
        }

        //121.116
        if((hData[__subcategoryName]).length() > 0)
        {
            hResult["121.116"] = hData[__subcategoryName];
        }

        //121.140 - 91
        if((hData[__dateBegin]).length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

		//121.141 - 92
        if((hData[__dateEnd]).length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }

		//114.138 - 142
        if((hData[__dateStart]).length() > 0)
        {
            hResult["114.138"] = hData[__dateStart];
        }

		//114.139 - 143
        if((hData[__dateEnd2]).length() > 0)
        {
            hResult["114.139"] = hData[__dateEnd2];
        }

		//114.16
        if((hData[__zipCode]).length() > 0)
        {
            hResult["114.16"] = hData[__zipCode];
        }

		//120.120
        if((hData[__status]).length() > 0)
        {
            hResult["120.120"] = hData[__status];
        }

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetClubsAndMembershipsFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;

    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}



string ProcessAddLocationToLoyaltyProgramTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Location To Loyalty Program";
    NMCLog::Log("Add Location To Loyalty Program");
    dataLog =   string("Location Id [") + hData[__locationId] +
                string("] Loyalty Program Id Id [") + hData[__loyaltyProgramsID] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDLOTOLOPRO";


        //114.47
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__locationId]).c_str()));
		hResult["114.47"]=Temp;
        //47.35
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__loyaltyProgramsID]).c_str()));
		hResult["47.35"]=Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.47"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessRemoveLocationToLoyaltyProgramTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Remove Location To Loyalty Program";
    NMCLog::Log("Remove Location To Loyalty Program");
	dataLog =   string("Location Id [") + hData[__locationId] +
                string("] Loyalty Program Id [") + hData[__loyaltyProgramsID] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOLOTOLOPRO";


        //114.47
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__locationId]).c_str()));
		hResult["114.47"]=Temp;
        //47.35
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__loyaltyProgramsID]).c_str()));
		hResult["47.35"]=Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetLoyaltyProgramsByLocationIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Loyalty Programs By Location Id");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETLOBYLO";


        //114.47
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__locationId]).c_str()));
		hResult["114.47"]=Temp;

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetLoyaltyProgramsByLocationId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}






string ProcessAddRemoteItemsToLoyaltyProgramTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Add Remote Item To Loyalty Program");
	log=true;
    nameTransaction="Add Remote Item To Loyalty Program";
    dataLog =   string("Remote Item Id [") + hData[__remoteItemId] +
                string("] Loyalty Program Id [") + hData[__loyaltyProgramsID] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDREMTOLOPRO";


        //121.52
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
		hResult["121.52"]=Temp;

        //47.35
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__loyaltyProgramsID]).c_str()));
		hResult["47.35"]=Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.52"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessRemoveRemoteItemsToLoyaltyProgramTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Remove Remote Items To Loyalty Program");
	log=true;
    nameTransaction="Remove Remote Items To Loyalty Program";
	dataLog =   string("Remote Item Id [") + hData[__remoteItemId] +
                string("] Loyalty Program Id [") + hData[__loyaltyProgramsID] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOREMTOLOPRO";


        //121.52
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
		hResult["121.52"]=Temp;
        //47.35
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__loyaltyProgramsID]).c_str()));
		hResult["47.35"]=Temp;


        string mti="0305";

         if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!this->ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;

    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetRemoteItemsByLoyaltyProgramsIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Remote Items By Loyalty Programs Id");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETREMBYLO";


        //47.35
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__loyaltyProgramsID]).c_str()));
		hResult["47.35"]=Temp;

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetRemoteItemsByLoyaltyProgramsId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}




string ProcessAddShoppingListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    NMCLog::Log("Add Shopping List");
    nameTransaction="Add Shopping List";
    dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("] Name List [") + hData[__shoppingListName] +
                string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDSHOPPLIST";


        //P114.88 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

        //121.31
        hResult["121.31"]=hData[__shoppingListName];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.30"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessRemoveShoppingListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    NMCLog::Log("Remove Shopping List");
    nameTransaction="Remove Shopping List";
	dataLog =   string("Shopping List Id [") + hData[__shoppingListID] + string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOSHOPPLIST";


        //121.30
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
		hResult["121.30"]=Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAddItemsToShoppingListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Items To Shopping List";
    NMCLog::Log("Add Items To Shopping List");
	dataLog =   string("Shopping List Id [") + hData[__shoppingListID] +
                string("] Shopping List Type [") + hData[__shoppingListType] +
                string("] Shopping List Item Id  [") + hData[__shoppingListItemId] +
                string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDITEMTOSHOLI";



        //121.30
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
		hResult["121.30"]=Temp;

        //121.152
        hResult["121.152"]=hData[__shoppingListType];

        //121.154
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListItemId]).c_str()));
        hResult["121.153"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.154"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessRemoveItemsToShoppingListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    NMCLog::Log("Remove Items To Shopping List");
    nameTransaction="Remove Items To Shopping List";
	dataLog = string("Item Shopping List ID [") + hData[__shoppingListItemId] + string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOITEMTOSHOLI";


        hResult["120.70"]=hData[__shoppingListItemId];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }

        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditShoppingListNameTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Edit Shopping List Name");
	log=true;
    nameTransaction="Edit Shopping List Name";
	dataLog =   string("Shopping list name  [") + hData[__shoppingListName] +
                string("] Shopping list Id  [") + hData[__shoppingListID] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDITNAMESHOLIST";

		//121.30
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
		hResult["121.30"]=Temp;

        //121.31
        hResult["121.31"]=hData[__shoppingListName];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetShoppingListByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Shopping List By Consumer Id");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETSHOLISTBYCONID";


        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetShoppingListByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessGetLoyaltyProgramsByRemoteItemIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Loyalty Programs By Remote Item Id");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETLOBYREID";


        //121.52
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
		hResult["121.52"]=Temp;

        NMCLog::Log(string("Remote Item Id [") + hData[__remoteItemId] + string("]"));

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetLoyaltyprogramsByRemoteitems?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessGetNameShoppingListByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Name Shopping List By Consumer Id");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETLOBYREID";


        //114.88
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetNameShoppingListByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessGetShoppingRemoteItemsFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Shopping Remote Items Filter");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETREMOITEFIL";

        //120.42
        if(hData[__dateExpire].length()>0)
        {
            hResult["120.42"]=hData[__dateExpire];
        }

        //120.45
        if(hData[__categoryName].length()>0)
        {
            hResult["120.45"]=hData[__categoryName];
        }


        //121.116
        if(hData[__subcategoryName].length()>0)
        {
            hResult["121.116"]=hData[__subcategoryName];
        }

        //121.115
        if(hData[__type].length()>0)
        {
            hResult["121.115"]=hData[__type];
        }

        //120.14
        if(hData[__zipCode].length()>0)
        {
            hResult["120.14"]=hData[__zipCode];
        }

        //121.30 shopping list id
        if(hData[__shoppingListID].length()>0)
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
            hResult["121.30"]=Temp;
        }

        //114.141
        if(hData[__merchantId].length()>0)
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
            hResult["114.141"]=Temp;
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetShoppingRemoteItemsFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessGetShoppingLoyaltyProgramsFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Shopping Loyalty Programs Filter");

    try
    {
		string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETSHOPLOPROFIL";


        //120.42
        if(hData[__dateExpire].length()>0)
        {
            hResult["120.42"]=hData[__dateExpire];
        }

        //120.45
        if(hData[__categoryName].length()>0)
        {
            hResult["120.45"]=hData[__categoryName];
        }


        //121.116
        if(hData[__subcategoryName].length()>0)
        {
            hResult["121.116"]=hData[__subcategoryName];
        }

        //121.115
        if(hData[__type].length()>0)
        {
            hResult["121.115"]=hData[__type];
        }

        //120.14
        if(hData[__zipCode].length()>0)
        {
            hResult["120.14"]=hData[__zipCode];
        }

        //121.30 shipping list id
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
		hResult["121.30"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetShoppingLoyaltyProgramsFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}


string ProcessGetRemoteItemsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Remote Items By Merchant Id");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETREITEBYMER";


        //114.141 MERCHANT ID
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetRemoteItemsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}


string ProcessAddNewRemoteItemTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add New Remote Item";
    NMCLog::Log("Add New Remote Item");
	dataLog =   string("Loyalty ID [") + hData[__couponId] +
                string("] Merchant ID [") + hData[__merchantId] +
                string("] Name [") + hData[__remoteItemName] +
                string("] Date Active [") + hData[__dateCreate] +
                string("] Date Cancel [") + hData[__dateEnd] +
                string("] Seller Can Accept or Stop Selling [") + hData[__sellerCanAcceptORstopSelling] +
                string("] Description[") + hData[__remoteItemDescription] +
                string("] Remote Items Terms And Conditions [") + hData[__remoteItemTermsAndCondition] +
                string("] Condition [") + hData[__condition] +
                string("] Regular Price Coin [") + hData[__priceCoin1] +
                string("] Price [") + hData[__price] +
                string("] Sale Price Coin [") + hData[__priceCoin2] +
                string("] Sale Price [") + hData[__priceSale] +
				string("] US Pstal Service [") + hData[__usPostalService] +
                string("] U P S[") + hData[__ups] +
                string("] FedEx [") + hData[__fedex] +
                string("] Generic Epeditet Overnight Shipping [") + hData[__genericEpeditetOvernightShipping] +
				string("] Us Shipping Services [") + hData[__usShippingServices] +
				string("] Shipping Terms and Condition[") + hData[__termsAndCondition] +
				string("] Free Shipping  [") + hData[__freeShipping] +
				string("] Shipping Cost To Buyer [") + hData[__shippingCost] +
				string("] Shipping Cost To Buyer Coin[") + hData[__priceCoin3] +
				string("] Aditional Charges [") + hData[__aditionalCharges] +
				string("] Aditional Charges Coin [") + hData[__priceCoin4] +
				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWREMOITEM";

		if((hData[__couponId]).length())
        {
            //120.30
            memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__couponId]).c_str()));
			hResult["120.30"]=Temp;

        }

		//114.141 merchant id
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        string merId(Temp,strlen(Temp));
        hResult["114.141"]=Temp;

		//121.98 remote item name
		if(hData[__remoteItemName].length()>0)
        hResult["121.98"]=hData[__remoteItemName];


		//120.31 Date create
		if(hData[__dateCreate].length()>0)
        hResult["120.31"]=hData[__dateCreate];


		//120.47 Date end
		if(hData[__dateEnd].length()>0)
        hResult["120.47"]=hData[__dateEnd];

		//121.171 seller can accept back order"/"stop selling after inventory sold
         if(hData[__sellerCanAcceptORstopSelling].length()>0)
        hResult["121.171"]=hData[__sellerCanAcceptORstopSelling];


		//114.94 remote item description
        if(hData[__remoteItemDescription].length()>0)
        hResult["114.94"]=hData[__remoteItemDescription];

		//114.95 remote item terms and condition
        if(hData[__remoteItemTermsAndCondition].length()>0)
        hResult["114.95"]=hData[__remoteItemTermsAndCondition];

		//121.172  conditions
		if(hData[__condition].length()>0)
        hResult["121.172"]=hData[__condition];

		//121.173  regular_price_coin
		if(hData[__priceCoin1].length()>0)
        hResult["121.173"]=hData[__priceCoin1];

		//120.84 price
		if(hData[__price].length()>0)
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__price]).c_str()));
            hResult["120.84"]=Temp;
        }

		//121.174  sale_price_coin
		if(hData[__priceCoin2].length()>0)
        hResult["121.174"]=hData[__priceCoin2];

		//121.95  sale_price
		if(hData[__priceSale].length()>0)
        hResult["121.95"]=hData[__priceSale];


		//121.175 shipping types
		memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__usPostalService].c_str());
        strcat(Temp,hData[__ups].c_str());
        strcat(Temp,hData[__fedex].c_str());
        strcat(Temp,hData[__genericEpeditetOvernightShipping].c_str());
        hResult["121.175"]=Temp;


		//121.27 Us Shipping Services
        if(hData[__usShippingServices].length()>0)
		hResult["121.27"]=hData[__usShippingServices];

		//121.28 Shipping Terms And Condition
		if(hData[__termsAndCondition].length()>0)
		hResult["121.28"]=hData[__termsAndCondition];

		//120.90 Free Shipping
		if(hData[__freeShipping].length()>0)
		hResult["120.90"]=hData[__freeShipping];

		//121.119 shipping cost to buyer
		if(hData[__shippingCost].length()>0)
		hResult["121.119"]=hData[__shippingCost];

		//121.176 shipping cost to buyer coin
		if(hData[__priceCoin3].length()>0)
		hResult["121.176"]=hData[__priceCoin3];

		//121.120 aditional charges
		if(hData[__aditionalCharges].length()>0)
		hResult["121.120"]=hData[__aditionalCharges];

		//121.177 aditional charges coin
		if(hData[__priceCoin4].length()>0)
		hResult["121.177"]=hData[__priceCoin4];


        //120.45
        if(hData[__categoryName].length()>0)
        hResult["120.45"] = hData[__categoryName];

        //121.116
        if(hData[__subcategoryName].length()>0)
        hResult["121.116"] = hData[__subcategoryName];

        //114.137
         if(hData[__aditionalCategoryName].length()>0)
        hResult["114.137"] = hData[__aditionalCategoryName];

        //121.181
         if(hData[__typeCategoryName].length()>0)
        hResult["121.181"] = hData[__typeCategoryName];


         //120.142
        if(hData[__type].length()>0)
        hResult["120.142"] = hData[__type];

        //114.149 flag_associated_loyalty
        if(hData[__loyaltyProgramsID].length()>0)
        hResult["114.149"] = hData[__loyaltyProgramsID];

        //121.103 flag_associated_catalog
		if(hData[__catalogId].length()>0)
        hResult["121.103"]=hData[__catalogId];

        //121.102 related_pos_sku
		if(hData[__remoteItemSKUCode].length()>0)
        hResult["121.102"]=hData[__remoteItemSKUCode];

        //121.101 related_loyalty
		if(hData[__loyaltyType].length()>0)
        hResult["121.101"]=hData[__loyaltyType];

        //121.108 related_catalog
		if(hData[__catalogName].length()>0)
        hResult["121.108"]=hData[__catalogName];

        //114.104 qrcode
        if(hData[__qrCodeImage].length()>0)
            hResult["114.104"] = hData[__qrCodeImage];



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.52"};
        string out[4];

               //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetShoppingListNameTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Shopping List Name");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SHOLISTNA";


        //114.88 MERCHANT ID
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetshoppinlistName?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;

    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}





string ProcessTotalSalesPerDayTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Total Sales Per Day");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="TOSALEPERDAY";


        //114.88 CONSUMER ID
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/TotalSalesPerDay?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessGetShippingOptionTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Shipping Option");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETSHIPPOPT";




        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetShippingOption?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessEditShippingOptionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Edit Shipping Options");
	log=true;
    nameTransaction="Edit Shipping Options";
	dataLog =   string("Shipping Options Id  [") + hData[__shippingOptionsId] +
                string("] Name  [") + hData[__name] +
                string("] Type  [") + hData[__type] +
                string("] Condition  [") + hData[__condition] +
                string("] Price  [") + hData[__price] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDITSHIPPOPT";

		//120.91 - 138
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__shippingOptionsId]).c_str()));
		hResult["120.91"]=Temp;

		//121.27 - 139
		hResult["121.27"]=hData[__name];

		//121.115 - 50
		hResult["121.115"]=hData[__type];

		//121.118 - 56
		hResult["121.118"]=hData[__condition];

		//121.95
		hResult["121.95"]=hData[__price];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessRemoveShippingOptionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Remove Shipping Options");
	log=true;
    nameTransaction="Remove Shipping Options";
	dataLog = string("Shipping Options Id  [") + hData[__shippingOptionsId] + string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="REMOSHIPPOPT";

        //120.91 - 138
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__shippingOptionsId]).c_str()));
		hResult["120.91"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetCouponByIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Coupon By ID");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCOUBYID";

        //120.30
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__couponId]).c_str()));
		hResult["120.30"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetCouponByID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}



string ProcessGetClubsAndMembershipsByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Clubs And Memberships By Id");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCLUBYID";

        //120.30
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__couponId]).c_str()));
		hResult["120.30"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetClubsAndMembershipsById?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}


string ProcessGetPromotionByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Promotion By Id");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETPROBYID";

        //120.30
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__couponId]).c_str()));
		hResult["120.30"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetPromotionById?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}



string ProcessIsFavoriteMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Is Favorite Merchant");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ISFAVOMER";


        //114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        hResult["114.88"] = Temp;

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {

			if(out[2].compare(string("Not Favorite")) == 0)
                return this->messageResponseFalse;

			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return "{123}";
#endif

}

string ProcessAddNewShippingOptionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Add New Shipping Options");
	log=true;
    nameTransaction="Add New Shipping Options";
	dataLog =   string("Shipping Options Id  [") + hData[__shippingOptionsId] +
                string("] Name [") + hData[__name] +
                string("] Type [") + hData[__type] +
                string("] Condition [") + hData[__condition] +
                string("] Price [") + hData[__price] +
                string("]");
    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWSHIPOP";

		//121.27 - 139
		hResult["121.27"]=hData[__name];

		//121.115 - 50
		hResult["121.115"]=hData[__type];

		//121.118 - 56
		hResult["121.118"]=hData[__condition];

		//121.95 - 124
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__price]).c_str()));
		hResult["121.95"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","120.91"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetInvoicesConsumerFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Invoices Consumer Filter");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETINVCOFIL";

		//P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		//P121.140
		 if((hData[__dateBegin]).length() > 0)
        {
			hResult["121.140"]=hData[__dateBegin];
		}

		//P121.141
		 if((hData[__dateEnd]).length() > 0)
        {
			hResult["121.141"]=hData[__dateEnd];
		}


		//121.155
		 if((hData[__fromAmount]).length() > 0)
        {
			hResult["121.155"]=hData[__fromAmount];
		}

		//121.156
		 if((hData[__toAmount]).length() > 0)
        {
			hResult["121.156"]=hData[__toAmount];
		}

		//120.90
		 if((hData[__type]).length() > 0)
        {
            hResult["120.90"] = hData[__type];
        }

		//120.120
        if((hData[__status]).length() > 0)
        {
            hResult["120.120"] = hData[__status];
		}

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {

            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetInvoicesConsumerFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessMoveItemBetweenShoppingListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Move Item Between Shopping List");
	log=true;
    nameTransaction="Move Item Between Shopping List";
	dataLog =   string("Shopping List Id [") + hData[__shoppingListID] +
                string("] Shopping List Item Id  [") + hData[__shoppingListItemId] +
                string("] New Shopping List Id [") + hData[__newShoppingList] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="MOITEMBESHOLI";



        //121.30
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
		hResult["121.30"]=Temp;

        //120.70
        hResult["120.70"]=hData[__listItemIdAndType];

        //121.154
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__newShoppingList]).c_str()));
        hResult["121.154"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetRatingsAndReviewsByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Ratings And Reviews By Consumer Id");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRATREVBYID";

        //114.88
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetRatingsAndReviewsByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}


string ProcessGetConsumerRatingsandReviewsFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Ratings and Reviews Filter");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GECONRAREVFIL";

		//P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		//P121.140
		if((hData[__dateBegin]).length() > 0)
        {
			hResult["121.140"]=hData[__dateBegin];
		}

		//P121.141
		if((hData[__dateEnd]).length() > 0)
        {
			hResult["121.141"]=hData[__dateEnd];
		}


		//121.78
		 if((hData[__rate]).length() > 0)
        {
			hResult["121.78"]=hData[__rate];
		}

		//121.157
		 if((hData[__toRate]).length() > 0)
        {
			hResult["121.157"]=hData[__toRate];
		}

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerRatingsandReviewsFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetCouponToExpireByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Coupon To Expire By Consumer Id");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCOUEXPIRBYID";

        //114.88
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetCouponToExpireByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}



string ProcessGetAddressByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Address By Consumer Id");
    try
    {

        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETADDBYCONID";

        //114.88
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetAddressByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}



string ProcessChangePasscodeTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Change Passcode");
	log=true;
    nameTransaction="Change Passcode";
	dataLog = string("Consumer Id [") + hData[__consumerId] + string("]");



    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="CHANPINCODE";


        //P52
        hResult["64"]=hData[__mobileAppPincode];

		//P114.88
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

        //114.27
        hResult["114.27"]=hData[__mobileAppPincodeOld];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessEditLanguageAndLockTimeTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Edit Language And Lock Time");
	log=true;
    nameTransaction="Edit Language And Lock Time";
	dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("] Language [") + hData[__language] +
                string("] Timer Lock [") + hData[__timeLock] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDITLATILO";


        //P114.88
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

        //121.158
        hResult["121.158"]=hData[__language];

        //121.129
        hResult["121.129"]=hData[__timeLock];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetLastCouponCreatedByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Last Coupon Created By Merchant Id");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETLASTCOUBYM";


        //P114.141
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;


        if(!ProceessComunicationHTTP(string("/serverList/services/GetLastCouponCreatedByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessRegisterUserMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Register User Merchant";
	NMCLog::Log("Register User Merchant");
    dataLog =   string("First Name [") + hData[__firstName] +
                string("] Middle Name [") + hData[__middleName] +
                string("] Last Name [") + hData[__lastName] +
                string("] Parent Id [") + hData[__parentid] +
                string("] Email [") + hData[__email] +
                string("] BirthDate [") + hData[__birthDate] +
                string("] Movile Number [") + hData[__movileNumber] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REGUSERMER";

		//114.150
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__parentid]).c_str()));
        hResult["114.150"] = Temp;

        //114.3
        hResult["114.3"]=hData[__firstName];

        //114.5
        hResult["114.5"]=hData[__lastName];

        if((hData[__middleName]).length())
        {
            //114.4
            hResult["114.4"]=hData[__middleName];
        }

         //114.26
        hResult["114.26"]=hData[__title];

         if((hData[__department]).length())
        {
            //121.144
            hResult["121.144"]=hData[__department];
        }

        //114.7
        hResult["114.7"]=hData[__email];

        //52
        hResult["52"]=hData[__password];

        //121.147
        hResult["121.147"]=hData[__officeNumber];

        //114.52
        hResult["114.52"]=hData[__movileNumber];

        //114.79
        hResult["114.79"]=hData[__homePhone];

        //114.106
        hResult["114.106"]=hData[__address1];

        if((hData[__addres2]).length())
        {
            //114.107
            hResult["114.107"]=hData[__addres2];
        }

        //120.73
        hResult["120.73"]=hData[__country];

        //114.108
        hResult["114.108"]=hData[__city];

        //120.13
        hResult["120.13"]=hData[__state];

        if((hData[__zipCode]).length())
        {
            //114.110
            hResult["114.110"]=hData[__zipCode];
        }

        //121.145
        hResult["121.145"]=hData[__supervisor];

        //121.168
        hResult["121.168"]=hData[__extension2];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.141"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetRatingsandReviewsbyIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Ratings and Reviews by Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTREANDREBYID";

		//121.80
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__ratingId]).c_str()));
        hResult["121.80"] = Temp;


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetRatingsandReviewsbyId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessReplayRatingsAndReviewsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Replay Ratings And Reviews");
	log=true;
    nameTransaction="Replay Ratings And Reviews";
	dataLog =   string("Parent Id [") + hData[__parentid] +
                string("] Title [") + hData[__title] +
                string("] Description [") + hData[__description] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REPLREANDRE";


        //P114.150
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__parentid]).c_str()));
		hResult["114.150"]=Temp;

        //120.83
        hResult["120.83"]=hData[__title];

        //120.157
        hResult["120.157"]=hData[__description];


		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.80"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return "{123}";
#endif
}


string ProcessReportToNMCTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Report To NMC");
	log=true;
    nameTransaction="Report To NMC";
	dataLog = string("Rating Id [") + hData[__ratingId] + string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REPTONMC";

		//121.80
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__ratingId]).c_str()));
        hResult["121.80"] = Temp;



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetRecentMessageSystemByMerchantIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Recent Message System By Merchant ID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTRECMESSYSBYMERID";

		//114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetRecentMessageSystemByMerchantID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewHelpTicketsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add New Help Tickets";
	NMCLog::Log("Add New Help Tickets");
    dataLog =   string("Name [") + hData[__name] +

                string("] Description [") + hData[__description] +
                string("] Merchant Id [") + hData[__merchantId] +
                string("] Section [") + hData[__section] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDHLPTICK";


        //114.26
        hResult["114.26"]=hData[__name];



        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;


        //120.32
        hResult["120.32"]=hData[__description];


        //121.188
        hResult["121.188"] = hData[__section];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.54"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetHelpTicketsByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Help Tickets By Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTHLPTICKBYID";

		//121.54
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__helpTicketId]).c_str()));
        hResult["121.54"] = Temp;


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetHelpTicketsById?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetTicketsByParentIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Tickets By Parent Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTTICKBYPID";

		//114.150
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__parentid]).c_str()));
        hResult["114.150"] = Temp;


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTicketsByParentId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessAddNewActionTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add New Action";
	NMCLog::Log("Add New Action");
    dataLog =   string("Parent Id [") + hData[__parentid] +
                string("] Assigned To [") + hData[__assignedTo] +
                string("] State [") + hData[__state] +
                string("] Description [") + hData[__description] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWACT";

		//114.150
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__parentid]).c_str()));
        hResult["114.150"] = Temp;

        //114.26
        hResult["114.26"]=hData[__assignedTo];


        //120.13
        hResult["120.13"]=hData[__state];

        //120.32
        hResult["121.175"]=hData[__action];




        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.54"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetInvoicesByDateAndMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Invoices By Date And Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETINVBYMER";

		//114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		//114.146
        hResult["114.146"]=hData[__transactionDate];


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetInvoicesByDateAndMerchantId?isInp=")+ISOb64,dataIn))
        {
			return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetListResellerCompanyNameTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get List Reseller Company Name");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETLISTRECONAME";



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetListResellerCompanyName?isInp=")+ISOb64,dataIn))
        {
			return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetRatingsandReviewsbyParentIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Ratings and Reviews by Parent Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTRADRVBYPID";

		//114.150
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__parentid]).c_str()));
        hResult["114.150"] = Temp;


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetRatingsandReviewsbyParentId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetCategoryOfBusinessListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Category Of Business List");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCAOFBULI";

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCategoryOfBusinessList?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetSubcategoryOfBusinessByParentIdListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Category Of Business List");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCAOFBULI";

        //114.150
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__categoryBusinessParentId]).c_str()));
        hResult["114.150"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetSubcategoryBusinessByParentIdList?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessValidateRartingAndReviewIsReportedToNMCTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Validate Rarting And Review Is Reported To NMC");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="VARARERENMC";

		//121.80
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__ratingId]).c_str()));
        hResult["121.80"] = Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"0001",4)==0)
        {
            return this->messageResponseFalse;
        }

		return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessAddNewMerchantPermissionLoyaltyTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add New Merchant Permission Loyalty");
    log=true;
    nameTransaction="Add New Merchant Permission Loyalty";
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("] Supervisor [") + hData[__supervisor] +
                string("] Coupons Permission [") + hData[__couponsPermissions] +
                string("] Coupons Permission HT [") + hData[__couponsPermissionsHT] +
                string("] Promotions Permission [") + hData[__promotionsPermissions] +
                string("] Promotions Permission HT [") + hData[__promotionsPermissionsHT] +
                string("] Membership Clubs Permission [") + hData[__membershipClubsPermissions] +
                string("] Membership Clubs Permission HT [") + hData[__membershipClubsPermissionsHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] + string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEMELOPE";

        //permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__couponsPermissions].c_str());
        strcat(Temp,hData[__couponsPermissionsHT].c_str());
        strcat(Temp,hData[__promotionsPermissions].c_str());
        strcat(Temp,hData[__promotionsPermissionsHT].c_str());
        strcat(Temp,hData[__membershipClubsPermissions].c_str());
        strcat(Temp,hData[__membershipClubsPermissionsHT].c_str());
        strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
			 return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.128"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewMerchantPermissionRemoteTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add New Merchant Permission Remote");
    log=true;
    nameTransaction="Add New Merchant Permission Remote";
	dataLog =   string(" Merchant Id [") + hData[__merchantId] +
                string("] Supervisor [") + hData[__supervisor] +
                string("] Products Permission [") + hData[__productsPermissions] +
                string("] Products Permission HT [") + hData[__productsPermissionsHT] +
                string("] Catalogs Permission [") + hData[__catalogsPermissions] +
                string("] Catalogs Permission HT [") + hData[__catalogsPermissionsHT] +
                string("] Promote Items Permission [") + hData[__promoteItemsPermissions] +
                string("] Promote Items Permission HT [") + hData[__promoteItemsPermissionsHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEMEREPE";

        //permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__productsPermissions].c_str());
        strcat(Temp,hData[__productsPermissionsHT].c_str());
        strcat(Temp,hData[__catalogsPermissions].c_str());
        strcat(Temp,hData[__catalogsPermissionsHT].c_str());
        strcat(Temp,hData[__promoteItemsPermissions].c_str());
        strcat(Temp,hData[__promoteItemsPermissionsHT].c_str());
        strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;

        if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.128"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewMerchantPermissionAccountingTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add New Merchant Permission Accounting");
    log=true;
    nameTransaction="Add New Merchant Permission Accounting";
	dataLog =   string(" Merchant Id [") + hData[__merchantId] +
                string("] Supervisor [") + hData[__supervisor] +
                string("] Accounts Payable Permission [") + hData[__accountsPayablePermissions] +
                string("] Accounts Payable Permission HT [") + hData[__accountsPayablePermissionsHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEMEACPE";

        //permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__accountsPayablePermissions].c_str());
        strcat(Temp,hData[__accountsPayablePermissionsHT].c_str());
        strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;


        if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.128"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewMerchantPermissionTransactionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add New Merchant Permission Transactions");
    log=true;
    nameTransaction="Add New Merchant Permission Transactions";
	dataLog =   string(" Merchant Id [") + hData[__merchantId] +
                string("] Supervisor [") + hData[__supervisor] +
                string("] View Transactions [") + hData[__viewTransactions] +
                string("] View Transactions HT [") + hData[__viewTransactionsHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEMETRPE";

        //permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__viewTransactions].c_str());
        strcat(Temp,hData[__viewTransactionsHT].c_str());
        strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.128"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewMerchantPermissionSubscriptionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add New Merchant Permission Subscriptions");
    log=true;
    nameTransaction="Add New Merchant Permission Subscriptions";
	dataLog =   string(" Merchant Id [") + hData[__merchantId] +
                string("] Supervisor [") + hData[__supervisor] +
                string("] Subscriptions Permissions [") + hData[__subscriptionsPermissions] +
                string("] Subscriptions Permissions HT [") + hData[__subscriptionsPermissionsHT] +
				string("] Subscriptions Permissions Edit[") + hData[__subscriptionsPermissionsEdit] +
                string("] Subscriptions Permissions Edit HT [") + hData[__subscriptionsPermissionsEditHT] +
				string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] + string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEMESUPE";

        //permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__subscriptionsPermissions].c_str());
        strcat(Temp,hData[__subscriptionsPermissionsHT].c_str());
        strcat(Temp,hData[__subscriptionsPermissionsEdit].c_str());
        strcat(Temp,hData[__subscriptionsPermissionsEditHT].c_str());
		strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.128"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewMerchantPermissionReviewsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add New Merchant Permission Reviews");
    log=true;
    nameTransaction="Add New Merchant Permission Reviews";
	dataLog =   string(" Merchant Id [") + hData[__merchantId] +
                string("] Supervisor [") + hData[__supervisor] +
                string("] Can Read Review [") + hData[__canReadReview] +
                string("] Can Read Review HT [") + hData[__canReadReviewHT] +
                string("] Can Respond Review [") + hData[__canRespondReview] +
                string("] Can Respond Review HT [") + hData[__canRespondReviewHT] +
                string("] Can Post Review [") + hData[__canPostReview] +
                string("] Can Post Review HT [") + hData[__canPostReviewHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] + string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEMEREVIPE";

        //permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__canReadReview].c_str());
        strcat(Temp,hData[__canReadReviewHT].c_str());
        strcat(Temp,hData[__canRespondReview].c_str());
        strcat(Temp,hData[__canRespondReviewHT].c_str());
        strcat(Temp,hData[__canPostReview].c_str());
        strcat(Temp,hData[__canPostReviewHT].c_str());
        strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.128"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewMerchantPermissionUsersTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add New Merchant Permission Users");
    log=true;
    nameTransaction="Add New Merchant Permission Users";
	dataLog =   string(" Merchant Id [") + hData[__merchantId] +
                string("] Supervisor [") + hData[__supervisor] +
                string("] User Permissions [") + hData[__userPermission] +
                string("] User Suspend [") + hData[__userSuspend] +
                string("] User Permissions HT [") + hData[__userPermissionHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEMEUSPE";

        //permisions
        /*memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__userPermission].c_str());
        strcat(Temp,hData[__userSuspend].c_str());
        strcat(Temp,hData[__userPermissionHT].c_str());
        strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;*/

        hResult["121.169"]= hData[__userPermission] +
                            hData[__userSuspend] +
                            hData[__userPermissionHT] +
                            hData[__requiresSupervisorApproval] +
                            hData[__canProvideSupervisorApproval] +
                            hData[__ableToPrintReports] +
                            hData[__ableToDownloadReports];

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.128"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetPermissionTransactionsByMerchantIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Permission Transactions By Merchant ID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETPERTRANBYMID";

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetPermissionTransactionsByMerchantID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetPermissionSubscriptionsByMerchantIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Permission Subscriptions By MerchantID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETPERSUBSBYMID";

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetPermissionSubscriptionsByMerchantID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetPermissionReviewsByMerchantIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Permission Reviews By MerchantID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETPERREVBYMID";

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetPermissionReviewsByMerchantID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetPermissionLoyaltyByMerchantIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Permission Loyalty By MerchantID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETPERLOYBYMID";

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetPermissionLoyaltyByMerchantID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetPermissionAccountingByMerchantIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Permission Accounting By Merchant ID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETPERACCBYMID";

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetPermissionAccountingByMerchantID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetPermissionRemoteByMerchantIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Permission Remote By Merchant ID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETPERREMBYMID";

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetPermissionRemoteByMerchantID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetPermissionUserByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Permission User By Merchant ID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETPERUSBYMID";

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetPermissionUserByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetImagesByLoyaltyIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Images By Loyalty ID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETIMBYLOYID";

        //47.21
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__couponId]).c_str()));
        hResult["47.21"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetImagesByLoyaltyID?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetLoyaltyProgramsByUserMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Loyalty Programs By User Merchant");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETLOYPROBYUSMER";

          //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetLoyaltyProgramsByUserMerchant?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetCategoryByParentIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Category By Parent Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCATBYPARID";

        //114.150
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__parentid]).c_str()));
        hResult["114.150"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCategoryByParentId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetCategoryByTypeTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Category By Type");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCATBYTY";

        //47.21

		if(hData[__couponId].length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__couponId]).c_str()));
            hResult["47.21"] = Temp;
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCategoryByType?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetTypesOfCategoriesTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Types Of Categories");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETTYOFCAT";



		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTypesOfCategories?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetLocationsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Locations By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETLOCABYMERID";

        //P114.141 MERCHANT id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetLocationsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAddImagesToLoyaltyProgramsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Images To Loyalty Programs";
	NMCLog::Log("Add Images To Loyalty Programs");
    dataLog =   string("Loyalty Id [") + hData[__couponId] +
                string("] Images [") + hData[__image] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDIMATOLOY";

		//47.21
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__couponId]).c_str()));
        hResult["47.21"] = Temp;

        //121.170
        hResult["121.170"]=hData[__image];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddlocationsToLoyaltyProgramsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Locations To Loyalty Programs";
	NMCLog::Log("Add Locations To Loyalty Programs");
    dataLog =   string("Loyalty Id [") + hData[__couponId] +
                string("] Locations Id [") + hData[__location] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDLOCTOLOY";

		//47.21 - 80
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__couponId]).c_str()));
        hResult["47.21"] = Temp;

        //120.105 - 13
        hResult["120.105"]=hData[__location];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetCountryCurrencyCodeTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Country Currency Code");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCOUNCUCO";



		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {

            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCountryCurrencyCode?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddImagesToRemoteItemsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Images To Remote Items";
	NMCLog::Log("Add Images To Remote Items");
    dataLog =   string("Remote item Id [") + hData[__remoteItemId] +
                string("] Images [") + hData[__image] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDIMATOREMO";

		//121.52
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
        hResult["121.52"] = Temp;

        //121.170
        hResult["121.170"]=hData[__image];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetCompanyNameByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Company Name By Merchant Id");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCONABYMEID";

		//47.21 - 80
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.70"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewCatalogTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add New Catalog");
    log=true;
    nameTransaction="Add New Catalog";
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("] Catalog Name [") + hData[__catalogName] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWCATA";

		//114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        string merId(Temp,strlen(Temp));
        hResult["114.141"] = Temp;

        //121.178
        //P114.99
		if(hData[__catalogName].length())
        {
            hResult["121.178"] = hData[__catalogName];
        }

        //P114.99
		if(hData[__image].length())
        {
			hResult["114.99"]=hData[__image];
		}


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.27"};
        string out[4];

               //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetChoicesByOptionIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Choices By Option Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCHOBYOPID";

        //121.179
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__optionid]).c_str()));
        hResult["121.179"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetChoicesByOptionId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetOptionsByRemoteIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Options By Remote Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETOPTBYREMOID";

        //121.52
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
        hResult["121.52"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetOptionsByRemoteId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetTotalByOptionIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Total By Option Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETOTBYOPTID";

        //121.179
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__optionid]).c_str()));
        hResult["121.179"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTotalByOptionId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewChoiceTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add New Choice");
    log=true;
    nameTransaction="Add New Choice";
	dataLog =   string("Option Id [") + hData[__optionid] +
                string("] Choice Name [") + hData[__choiceName] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWCHOI";

		//121.179
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__optionid]).c_str()));
        hResult["121.179"] = Temp;

        //121.105
        hResult["121.105"] = hData[__choiceName];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.180"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewOptionTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add New Option");
    log=true;
    nameTransaction="Add New Option";
	dataLog =   string("Remote Item Id [") + hData[__remoteItemId] +
                string("] Option Name [") + hData[__optionName] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWOPTION";

		//121.52
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
        hResult["121.52"] = Temp;

         if((hData[__optionName]).length())
        {
            //121.104
            hResult["121.104"] = hData[__optionName];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.179"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAddTotalByOptionIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Total By Option Id";
	NMCLog::Log("Add Total By Option Id");
    dataLog =   string("Option id [") + hData[__optionid] +
                string("] Total [") + hData[__total] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDTOTBYOPT";

        if((hData[__optionid]).length())
        {
            //121.179
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__optionid]).c_str()));
            hResult["121.179"] = Temp;
        }

        if((hData[__total]).length())
        {
            //114.156
            hResult["114.156"]=hData[__total];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetCatalogsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Catalogs By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCATABYMERID";

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCatalogsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




string ProcessGetCitiesByStateIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Cities By State Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCITYBYSTATE";

        //120.64 - 42
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__state]).c_str()));
        hResult["120.64"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {

            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCitiesByStateId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessRemoveCatalogTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Remove Catalog");
	log=true;
    nameTransaction="Remove Catalog";
	dataLog =   string("Catalog Id [") + hData[__catalogId] +

                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOCATAL";


        //P121.27
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__catalogId]).c_str()));
		hResult["121.27"]=Temp;

		 //121.27
        //hResult["121.27"]=hData[__catalogId];




        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessMoveToCatalogTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Move To Catalog";
	NMCLog::Log("Move To Catalog");
    dataLog =   string("Catalog Id [") + hData[__catalogId] +
                string("Remote Item Id [") + hData[__remoteItemId] +

				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="MOVETOCAT";

		//121.27 - 206
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__catalogId]).c_str()));
        hResult["121.27"] = Temp;

        //121.175 - 118
        hResult["121.175"]=hData[__remoteItemId];

        //121.178 - catalog remote id
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__productId]).c_str()));
        hResult["121.178"] = Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
		   return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;

    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}


string ProcessRemoveItemsFromCatalogTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Remove Items From Catalog";
	NMCLog::Log("Remove Items From Catalog");
    dataLog =   string("Catalog Id [") + hData[__catalogId] +
                string("Remote Item Id [") + hData[__remoteItemId] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMITEMFRMCAT";


        //121.27 - 206
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__catalogId]).c_str()));
        hResult["121.27"] = Temp;

        //121.175 - 118
        hResult["121.175"]=hData[__remoteItemId];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
		   return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;

    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else

        return this->messageResponseTrue;
#endif

}

string ProcessGetRemoteItemsByCatalogIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Remote Items By Catalog Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETREITEBYCA";

        //114.141
        hResult["121.27"] = hData[__catalogId];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetRemoteItemsByCatalogId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




string ProcessGetMessageByInvoiceIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Message By Invoice Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETMESBYINVID";

        //121.75
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__invoiceNumber]).c_str()));
        hResult["121.75"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetMessageByInvoiceId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




string ProcessGetMessageByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Message By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETMEBYMEID";

       //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetMessageByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




string ProcessGetTransactionsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Transactions By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRABYMERID";

      //114.141
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTransactionsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}






string ProcessAddNewInvoiceMessageTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
	nameTransaction="Add New Invoice Message";
	NMCLog::Log("Add New Invoice Message");
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("Invoice Number [") + hData[__invoiceNumber] +
				string("Subject [") + hData[__subject] +
				string("description [") + hData[__description] +
				string("created By [") + hData[__createdBy] +
				string("]") ;


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWINME";

		//114.141
		if(hData[__merchantId].length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
            hResult["114.141"] = Temp;
        }

        //121.75
        if(hData[__invoiceNumber].length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__invoiceNumber]).c_str()));
            hResult["121.75"] = Temp;
        }

        //121.55
		if(hData[__subject].length())
        {
            hResult["121.55"] = hData[__subject];
        }


        //120.157
        if(hData[__description].length())
        {
            hResult["120.157"] = hData[__description];
        }

        //114.53
         if(hData[__createdBy].length())
        {
            hResult["114.53"] = hData[__createdBy];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.84"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewInvoiceNoteTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
	nameTransaction="Add New Invoice Note";
	NMCLog::Log("Add New Invoice Note");
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("Invoice Number [") + hData[__invoiceNumber] +
				string("Subject [") + hData[__subject] +
				string("description [") + hData[__description] +
				string("flag [") + hData[__flag] +
                string("Create by [") + hData[__createdBy] +
                string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWINNO";

		//114.141
		if(hData[__merchantId].length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
            hResult["114.141"] = Temp;
        }

        //121.75
        if(hData[__invoiceNumber].length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__invoiceNumber]).c_str()));
            hResult["121.75"] = Temp;
        }

        //121.55
        if(hData[__subject].length())
        {
            hResult["121.55"] = hData[__subject];
        }

        //120.157
        if(hData[__description].length())
        {
            hResult["120.157"] = hData[__description];
        }


        //114.35
        if(hData[__flag].length())
        {
            hResult["114.35"] = hData[__flag];
        }

        //114.53
        if(hData[__createdBy].length())
        {
            hResult["114.53"] = hData[__createdBy];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.84"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetSeqImagesNameTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Seq Images Name");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETSEQIMAGES";


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {

            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetSeqImagesName?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetInvoiceDetailsCatalogByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Invoice Details Catalog By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GEINVDETCATMERID";

      //114.141
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		//114.150
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__transactionNumber]).c_str()));
		hResult["114.150"]=Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetInvoiceDetailsCatalogByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetInvoiceDetailsLoyaltyByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Invoice Details Loyalty By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GEINVDETLOYMERID";

      //114.141
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetInvoiceDetailsLoyaltyByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetInvoiceDetailsRemoteItemsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Invoice Details Remote Items By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GEINVDETREMOMERID";

      //114.141
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetInvoiceDetailsRemoteItemsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetNotesByInvoiceIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Notes By Invoice Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETNIBYIN";

       //121.75
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__invoiceNumber]).c_str()));
        hResult["121.75"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetNotesByInvoiceId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessUpdateShippingStatusTransactionTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Update Shipping Status Transaction");
    log=true;
    nameTransaction="Update Shipping Status Transaction";
	dataLog =   string("Invoice Id [") + hData[__invoiceNumber] +
                string("] Shipping Status [") + hData[__shippingStatus] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="UPSHISTATA";

		//121.75
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__invoiceNumber]).c_str()));
        hResult["121.75"] = Temp;

        //121.182
        hResult["121.182"] = hData[__shippingStatus];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

        return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetTerminalsByLocationIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Terminals By Location Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETTERBYLOID";

       //114.47
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__locationId]).c_str()));
        hResult["114.47"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTerminalsByLocationId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSetFavoriteCreditCardMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Set Favorite Credit Card Merchant";
    NMCLog::Log("Set Favorite Credit Card Merchant");
	dataLog =   string("Credit Card Id [") + hData[__creditCardId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SETFACREME";

        //P120.49
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__creditCardId]).c_str()));
		hResult["120.49"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}


string ProcessProfileGetMerchantByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Profile Get Merchant By ID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROGETMERBYID";

       //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/ProfileGetMerchantById?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAddNewTerminalTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add  New Terminal");
    log=true;
    nameTransaction="Add  New Terminal";
	dataLog =   string("Terminal name [") + hData[__terminalName] +
                string("] Location Id [") + hData[__locationId] +
                string("] Pos Id [") + hData[__posId] +
                string("] Pos Type [") + hData[__posType] +
                string("] Provider [") + hData[__provider] +
                string("] Pos Internal [") + hData[__posInternal] +
                string("] Reference [") + hData[__reference] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNETER";

        //114.48
        hResult["114.48"] = hData[__terminalName];

		//114.47
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__locationId]).c_str()));
        hResult["114.47"] = Temp;

        //121.183
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__posId]).c_str()));
        hResult["121.183"] = Temp;

        //121.184
        hResult["121.184"] = hData[__posType];

        //121.185
        hResult["121.185"] = hData[__provider];

        //121.186
        hResult["121.186"] = hData[__posInternal];

        //121.187
        hResult["121.187"] = hData[__reference];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","120.69"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

        return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessDeleteCreditCardMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Delete Credit Card Merchant";
    NMCLog::Log("Delete Credit Card Merchant");
	dataLog =   string("Credit Card Id [") + hData[__creditCardId] +
                string("Merchant Id [") + hData[__merchantId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="DECREME";

        //P120.49
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__creditCardId]).c_str()));
		hResult["120.49"]=Temp;

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //P52
		hResult["52"]=hData[__password];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}

string ProcessDeleteTerminalsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Delete Terminals";
    NMCLog::Log("Delete Terminals");
	dataLog =   string("Terminal Id [") + hData[__terminalId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOTERMI";

        //120.97
        hResult["120.97"] = hData[__terminalId];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {


		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}

string ProcessEnableLocationsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Enable Locations";
    NMCLog::Log("Enable Locations");
	dataLog =   string("Locations Id [") + hData[__locationId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ENALOCATI";

        //114.60
        hResult["114.59"] = hData[__locationId];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {


		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}

string ProcessGetCreditCardByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Credit Card By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCRECABYMERID";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCreditCardByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetBillingHistoryMerchantByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Billing History Merchant By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETBIHIMEID";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetBillingHistoryMerchantByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetInactiveLocationsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Inactive Locations By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETINLOCBYMERID";

       //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetInactiveLocationsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetPaymentMethodByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Payment Method By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETPAYMEBYMERID";

        //P114.141 MERCHANT id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetPaymentMethodByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetTypeOfBusinessByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Type Of Business By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETTOBBYMERID";

        //P114.141 MERCHANT id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTypeOfBusinessByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessProfileAddPaymentMethodTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
    nameTransaction="Add Payment Method";
	NMCLog::Log("Add Payment Method");
    dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("] Issuer [") + hData[__issuer] +
				string("] Contact name [") + hData[__contactName] +
				string("] Payment Method type [") + hData[__type] +

				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROADDPAY";

		//114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

        //121.71
        hResult["121.71"]=hData[__issuer];//223
        //114.53
        hResult["114.53"]=hData[__contactName]; //219
        //121.72
        hResult["121.72"]=hData[__type];//50


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.70"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }



#else
     return "{123}";
#endif
}


string ProcessProfileRemovePaymentMethodTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Remove Payment Method");
    log=true;
    nameTransaction="Remove Payment Method";
    dataLog = string("Seller payment method Id [") + hData[__sellerPaymentMethodId] + string("]");

    try
    {

        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMPAYMET";

        //121.70
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__sellerPaymentMethodId]).c_str()));
        hResult["121.70"] = Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return this->messageResponseTrue;
#endif
}



//TRANSACTIONS.CPP
string ProcessProfileEditUserMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit User Merchant";
	NMCLog::Log("Edit User Merchant");
    dataLog =   string("First Name [") + hData[__firstName] +
                string("] Merchant id [") + hData[__merchantId] +
				string("] Middle Name [") + hData[__middleName] +
				string("] Last Name [") + hData[__lastName] +
                string("] Email [") + hData[__email] +
                string("] Mobile Number [") + hData[__movileNumber] +
                string("] Title [") + hData[__title] +
                string("] Category Name [") + hData[__categoryName] +
                string("] SubCategory Name [") + hData[__subcategoryName] +
                string("] Companny Name [") + hData[__companyName] +
                string("] Home phone [") + hData[__homePhone] +
                string("] DBA Name [") + hData[__DBAName] +
                string("] Office Number [") + hData[__officeNumber] +
                string("] Years in Bussines [") + hData[__yearsinBussines] +
                string("] Type Bussines [") + hData[__typeBussines] +
				string("] Password [") + hData[__password] +
				string("] Confirm Password [") + hData[__conParword] +
				string("] Address1 [") + hData[__address1] +
				string("] Address2 [") + hData[__addres2] +
				string("] Country [") + hData[__country] +
				string("] City [") + hData[__city] +
				string("] State [") + hData[__state] +
				string("] Zip [") + hData[__zipCode] +
				string("] Flag Qaantity location [") + hData[__quantityLocation] +
				string("] Flag Merchant Account [") + hData[__merchantAccount] +
				string("] Merchant Account Provider [") + hData[__merchantAccountProvider] +
				string("] Contact name provider [") + hData[__contactName] +
                string("] Contact Phone [") + hData[__contactNamePhone] +
				string("] Extension for provider [") + hData[__extension1] +
				string("] Extension for merchant office [") + hData[__extension2] +

				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="PROEDTMER";




		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"] = Temp;


        if((hData[__email]).length())
        {
            //114.7
            hResult["114.7"]=hData[__email];
        }

        if((hData[__password]).length())
        {
            //52
            hResult["52"]=hData[__password];

            //121.127
            hResult["121.127"]=hData[__oldpasword];
        }


        if((hData[__companyName]).length())
        {
            //114.70
            hResult["114.70"]=hData[__companyName];
        }

		if((hData[__DBAName]).length())
        {
            //114.71
            hResult["114.71"]=hData[__DBAName];
        }

        if((hData[__title]).length())
        {
            //114.26
            hResult["114.26"]=hData[__title];
        }

        if((hData[__lastName]).length())
        {
            //114.5
            hResult["114.5"]=hData[__lastName];
        }


		if((hData[__middleName]).length())
        {
            //114.4
            hResult["114.4"]=hData[__middleName];
        }


        if((hData[__firstName]).length())
        {
            //114.3
            hResult["114.3"]=hData[__firstName];
        }

         if((hData[__officeNumber]).length())
        {
            //121.147
            hResult["121.147"]=hData[__officeNumber];
        }

        if((hData[__movileNumber]).length())
        {
            //114.52
            hResult["114.52"]=hData[__movileNumber];
        }

        if((hData[__homePhone]).length())
        {
            //114.79
            hResult["114.79"]=hData[__homePhone];
        }




        if((hData[__categoryName]).length())
        {
            //114.137
            hResult["114.137"]=hData[__categoryName];
        }

         if((hData[__subcategoryName]).length())
        {
            //121.111
            hResult["121.111"]=hData[__subcategoryName];
        }

         if((hData[__address1]).length())
        {
            //114.106
            hResult["114.106"]=hData[__address1];
        }

        if((hData[__addres2]).length())
        {
            //114.107
            hResult["114.107"]=hData[__addres2];
        }


        if((hData[__country]).length())
        {
            //120.73
            hResult["120.73"]=hData[__country];
        }

        if((hData[__city]).length())
        {
            //114.108
            hResult["114.108"]=hData[__city];
        }

		if((hData[__state]).length())
        {
            //120.13
            hResult["120.13"]=hData[__state];
        }

        if((hData[__zipCode]).length())
        {
            //114.110
            hResult["114.110"]=hData[__zipCode];
        }

        if((hData[__quantityLocation]).length())
        {
            //121.165
            hResult["121.165"]=hData[__quantityLocation];
        }

        if((hData[__merchantAccount]).length())
        {
            //121.166
            hResult["121.166"]=hData[__merchantAccount];
        }

        if((hData[__merchantAccountProvider]).length())
        {
            //121.150
            hResult["121.150"]=hData[__merchantAccountProvider];
        }

		//120.57
		if((hData[__contactName]).length())
        {
			hResult["120.57"]=hData[__contactName];
		}

		//120.56
		if((hData[__contactNamePhone]).length())
        {
			hResult["120.56"]=hData[__contactNamePhone];
		}

		//121.167 extension for provider
		if((hData[__extension1]).length())
        {
			hResult["121.167"]=hData[__extension1];
		}

		//121.168 extension for merchant
		if((hData[__extension2]).length())
        {
			hResult["121.168"]=hData[__extension2];
		}


        //121.175
        hResult["121.175"]=hData[__typeBussines];




        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetUsersMerchantByParentIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Profile Get Users Merchant By Parent Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETUSMERBYPARID";

       //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__parentid]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetUsersMerchantByParentId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessAddNewContactUsMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add New Contact Us Merchant";
	NMCLog::Log("Add New Contact Us Merchant");
    dataLog =   string("Subject [") + hData[__subject] +
                string("] Description [") + hData[__description] +
                string("] Merchant Id [") + hData[__merchantId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNCONTUSMER";


        //114.26
        hResult["114.26"]=hData[__subject];


        //120.32
        hResult["120.32"]=hData[__description];

        //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.54"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetHelpTicketsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Help Tickets By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETHTBYMERID";

        //P114.141 MERCHANT id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetHelpTicketsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSuspendUsersMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Suspend Users Merchant";
    NMCLog::Log("Suspend Users Merchant");
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SUUSEMER";

        //114.60
        hResult["114.59"] = hData[__merchantId];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {


		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}

string ProcessDeleteLoyaltyProgramByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Delete Loyalty Program By Id";
    NMCLog::Log("Delete Loyalty Program By Id");
	dataLog =   string("Loyalty Program Id [") + hData[__loyaltyProgramsID] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="RELOPROBYID";

        //114.60
        hResult["114.59"] = hData[__loyaltyProgramsID];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {


		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}


string ProcessDeleteRemoteItemByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Delete Remote Item By Id";
    NMCLog::Log("Delete Remote Item By Id");
	dataLog =   string("Remote Item Id [") + hData[__remoteItemId] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REREMOITEBYID";

        //114.59
        hResult["114.59"] = hData[__remoteItemId];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {


		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}


string ProcessEditLoyaltyProgramsByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Loyalty Programs By Id";
	NMCLog::Log("Edit Loyalty Programs By Id");
    dataLog =   string("Merchant Id [") + hData[__merchantId] +
				string("] Title [") + hData[__title] +
				string("] SKU Code [") + hData[__remoteItemSKUCode] +
                string("] Date Active [") + hData[__dateActive] +
				string("] Date Expire [") + hData[__dateExpire] +
                string("] Type [") + hData[__type] +
                string("] Condition [") + hData[__condition] +
                string("] Original Price [") + hData[__originalPric] +
                string("] Sale Price [") + hData[__salePrace] +

                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDILOYTBID";


		//47.21
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__couponId]).c_str()));
        hResult["47.21"] = Temp;

		//114.141 - 25
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;

		if((hData[__title]).length())
        {
            //120.83 - 12
            hResult["120.83"] = hData[__title];
        }

        if((hData[__remoteItemSKUCode]).length())
        {
            //121.102 - 12
            hResult["121.102"] = hData[__remoteItemSKUCode];
        }

        if((hData[__type]).length())
        {
        //121.115 - 50
        hResult["121.115"] = hData[__type];
        }

        if((hData[__dateActive]).length())
        {
		//121.117 - 54
        hResult["121.117"] = hData[__dateActive];
        }

        if((hData[__dateExpire]).length())
        {
            //120.42 - 55
            hResult["120.42"] = hData[__dateExpire];
        }

        if((hData[__weekDays]).length())
        {
            //121.175 - 188
            hResult["121.175"] = hData[__weekDays];
        }

        if((hData[__dateBegin]).length())
        {
            //121.140 - 91
            hResult["121.140"] = hData[__dateBegin];
        }

		if((hData[__dateEnd]).length())
        {
		//121.141 - 92
        hResult["121.141"] = hData[__dateEnd];
        }

        if((hData[__name]).length())
        {
		//114.26 - 141
        hResult["114.26"] = hData[__name];
        }

        if((hData[__description]).length())
        {
		//120.32 - 73
        hResult["120.32"] = hData[__description];
        }

        if((hData[__condition]).length())
        {
        //121.118 - 56
        hResult["121.118"] = hData[__condition];
        }

        if((hData[__originalPric]).length())
        {
            //121.119 - 57
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__originalPric]).c_str()));
            hResult["121.119"] = Temp;
        }

        if((hData[__salePrace]).length())
        {
            //121.120 - 58
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__salePrace]).c_str()));
            hResult["121.120"] = Temp;
        }

        if((hData[__priceCoin1]).length())
        {
		//121.173 - 190
        hResult["121.173"] = hData[__priceCoin1];
        }

        if((hData[__priceCoin2]).length())
        {
            //121.173 - 191
            hResult["121.174"] = hData[__priceCoin2];
        }

        if((hData[__categoryName]).length())
        {
            //120.45
            hResult["120.45"] = hData[__categoryName];
        }

        if((hData[__subcategoryName]).length())
        {
            //121.116
            hResult["121.116"] = hData[__subcategoryName];
        }

        if((hData[__aditionalCategoryName]).length())
        {
            //114.137
            hResult["114.137"] = hData[__aditionalCategoryName];
        }

        if((hData[__typeCategoryName]).length())
        {
            //121.181
            hResult["121.181"] = hData[__typeCategoryName];
        }

		//120.103 barcode provider
        if(hData[__remoteItemBarCodeImage].length())
        {
            hResult["120.103"] = hData[__remoteItemBarCodeImage];
        }


		//114.104 barcode if available
        if(hData[__barCode].length())
        {
            hResult["114.104"] = hData[__barCode];
        }

		//121.172 discount percentaje
        if(hData[__taxes].length())
        {
            hResult["121.172"] = hData[__taxes];
        }

		//121.137 discount amount
        if(hData[__taxable].length())
        {
            hResult["121.137"] = hData[__taxable];
        }


          if(hData[__remoteItemId].length())
        {
            //121.52
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
            hResult["121.52"] = Temp;
        }

        //121.136
        if(hData[__recurringChargeAmount].length())
        {
            hResult["121.136"] = hData[__recurringChargeAmount];
        }

         //121.132
        if(hData[__recurringChargesCurrency].length())
        {
            hResult["121.132"] = hData[__recurringChargesCurrency];
        }

         //121.121
        if(hData[__recuring].length())
        {
            hResult["121.121"] = hData[__recuring];
        }

        //121.101 id barcode
        if(hData[__productId].length())
        {
            hResult["121.101"] = hData[__productId];
        }

        //120.127 qrcode
        if(hData[__qrCodeImage].length())
        {
            hResult["120.127"] = hData[__qrCodeImage];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {


		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}


string ProcessEditRemoteItemByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Remote Item By Id";
    NMCLog::Log("Edit Remote Item By Id");
	dataLog =   string("Loyalty ID [") + hData[__couponId] +
                string("] Remote Item ID [") + hData[__remoteItemId] +
				string("] Merchant ID [") + hData[__merchantId] +
                string("] Name [") + hData[__remoteItemName] +
                string("] Date Active [") + hData[__dateCreate] +

                string("] Date Cancel [") + hData[__dateEnd] +
                string("] Seller Can Accept or Stop Selling [") + hData[__sellerCanAcceptORstopSelling] +
                string("] Description[") + hData[__remoteItemDescription] +
                string("] Remote Items Terms And Conditions [") + hData[__remoteItemTermsAndCondition] +
                string("] Condition [") + hData[__condition] +
                string("] Regular Price Coin [") + hData[__priceCoin1] +
                string("] Price [") + hData[__price] +
                string("] Sale Price Coin [") + hData[__priceCoin2] +
                string("] Sale Price [") + hData[__priceSale] +
				string("] US Pstal Service [") + hData[__usPostalService] +
                string("] U P S[") + hData[__ups] +
                string("] FedEx [") + hData[__fedex] +
                string("] Generic Epeditet Overnight Shipping [") + hData[__genericEpeditetOvernightShipping] +
				string("] Us Shipping Services [") + hData[__usShippingServices] +
				string("] Shipping Terms and Condition[") + hData[__termsAndCondition] +
				string("] Free Shipping  [") + hData[__freeShipping] +
				string("] Shipping Cost To Buyer [") + hData[__shippingCost] +
				string("] Shipping Cost To Buyer Coin[") + hData[__priceCoin3] +
				string("] Aditional Charges [") + hData[__aditionalCharges] +
				string("] Aditional Charges Coin [") + hData[__priceCoin4] +
				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      		//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDIREMOTBID";

		//121.52 remote item id
        hResult["121.52"]=hData[__remoteItemId];

		if((hData[__couponId]).length())
        {
            //120.30
            memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__couponId]).c_str()));
			hResult["120.30"]=Temp;
        }

		//114.141 merchant id
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        string merId(Temp,strlen(Temp));
        hResult["114.141"]=Temp;

        if((hData[__remoteItemName]).length())
        {
            //121.98 remote item name
            hResult["121.98"]=hData[__remoteItemName];
        }

        if((hData[__dateCreate]).length())
        {
            //120.31 Date create
            hResult["120.31"]=hData[__dateCreate];
        }



		if((hData[__dateEnd]).length())
        {
            //120.47 Date end
            hResult["120.47"]=hData[__dateEnd];
        }

        if((hData[__sellerCanAcceptORstopSelling]).length())
        {
            //121.171 seller can accept back order"/"stop selling after inventory sold
            hResult["121.171"]=hData[__sellerCanAcceptORstopSelling];
        }

        if((hData[__remoteItemDescription]).length())
        {
            //121.99 remote item description
            hResult["114.94"]=hData[__remoteItemDescription];
        }

		if((hData[__remoteItemTermsAndCondition]).length())
        {
            //121.100 remote item terms and condition
            hResult["114.95"]=hData[__remoteItemTermsAndCondition];
        }

        if((hData[__condition]).length())
        {
            //121.172  conditions
            hResult["121.172"]=hData[__condition];
        }

        if((hData[__priceCoin1]).length())
        {
            //121.173  regular_price_coin
            hResult["121.173"]=hData[__priceCoin1];
        }

		if((hData[__price]).length())
        {
            //120.84 price
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__price]).c_str()));
            hResult["120.84"]=Temp;
        }

        if((hData[__priceCoin2]).length())
        {
            //121.174  sale_price_coin
            hResult["121.174"]=hData[__priceCoin2];
        }

        if((hData[__priceSale]).length())
        {
            //121.95  sale_price
            hResult["121.95"]=hData[__priceSale];
        }

		//121.175 shipping types
		memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__usPostalService].c_str());
        strcat(Temp,hData[__ups].c_str());
        strcat(Temp,hData[__fedex].c_str());
        strcat(Temp,hData[__genericEpeditetOvernightShipping].c_str());
        hResult["121.175"]=Temp;

        if((hData[__usShippingServices]).length())
        {
            //121.27 Us Shipping Services
            hResult["121.27"]=hData[__usShippingServices];
        }

        if((hData[__termsAndCondition]).length())
        {
            //121.28 Shipping Terms And Condition
            hResult["121.28"]=hData[__termsAndCondition];
        }

        if((hData[__freeShipping]).length())
        {
            //120.90 Free Shipping
            hResult["120.90"]=hData[__freeShipping];
        }

        if((hData[__shippingCost]).length())
        {
            //121.119 shipping cost to buyer
            hResult["121.119"]=hData[__shippingCost];
        }

        if((hData[__priceCoin3]).length())
        {
            //121.176 shipping cost to buyer coin
            hResult["121.176"]=hData[__priceCoin3];
        }

        if((hData[__aditionalCharges]).length())
        {
            //121.120 aditional charges
            hResult["121.120"]=hData[__aditionalCharges];
        }

        if((hData[__priceCoin4]).length())
        {
            //121.177 aditional charges coin
            hResult["121.177"]=hData[__priceCoin4];
        }

        if((hData[__categoryName]).length())
        {
            //120.45
            hResult["120.45"] = hData[__categoryName];
        }

        if((hData[__subcategoryName]).length())
        {
            //121.116
            hResult["121.116"] = hData[__subcategoryName];
        }

        if((hData[__aditionalCategoryName]).length())
        {
            //114.137
            hResult["114.137"] = hData[__aditionalCategoryName];
        }

        if((hData[__typeCategoryName]).length())
        {
            //121.181
            hResult["121.181"] = hData[__typeCategoryName];
        }

        //120.142
        if(hData[__type].length()>0)
			hResult["120.142"] = hData[__type];

        //114.149 flag_associated_loyalty
        if(hData[__loyaltyProgramsID].length()>0)
			hResult["114.149"] = hData[__loyaltyProgramsID];

        //121.103 flag_associated_catalog
		if(hData[__catalogId].length()>0)
        hResult["121.103"]=hData[__catalogId];

        //121.102 related_pos_sku
		if(hData[__remoteItemSKUCode].length()>0)
        hResult["121.102"]=hData[__remoteItemSKUCode];

        //121.101 related_loyalty
		if(hData[__loyaltyType].length()>0)
        hResult["121.101"]=hData[__loyaltyType];

        //121.108 related_catalog
		if(hData[__catalogName].length()>0)
        hResult["121.108"]=hData[__catalogName];

        //114.104 qrcode
        if(hData[__qrCodeImage].length()>0)
            hResult["114.104"] = hData[__qrCodeImage];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }


		return this->messageResponseTrue;
    }
    catch(...)
    {


		return this->messageFailedException;
    }

#else
     return this->messageResponseTrue;
#endif
}


string ProcessGetBillingHistoryListMerchantByMerchantIdFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Billing History Merchant By Merchant Id Filter");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETBIHIMEIDFIL";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }

        //121.145
        if(hData[__transactionNumber].length() > 0)
        {
            hResult["121.145"] = hData[__transactionNumber];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetBillingHistoryMerchantByMerchantIdFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetHelpTticketsByMerchantIdFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Help Ticket By Merchant Id Filter");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETBIHIMEIDFIL";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;



        //114.143
        if(hData[__status].length() > 0)
        {
            hResult["114.143"] = hData[__status];
        }

        //120.31
        if(hData[__dateCreate].length() > 0)
        {
            hResult["120.31"] = hData[__dateCreate];
        }

        //121.83
        if(hData[__dateLastActivity].length() > 0)
        {
            hResult["121.83"] = hData[__dateLastActivity];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetHelpTticketsByMerchantIdFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSearchHelpTticketsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Help Ticket By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEAHELTIMEID";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //114.127
        hResult["114.127"] = hData[__search];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchHelpTticketsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSearchLoyaltyProgramsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Loyalty Programs By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEARLPBYMERID";

        //P114.141 MERCHANT id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		 //114.127 -- 37
        hResult["114.127"]=hData[__search];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchLoyaltyProgramsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditMerchantPermissionAccountingTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Edit Merchant Permission Accounting");
	log=true;
	nameTransaction="Edit Merchant Permission Accounting";
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("] Supervisor [") + hData[__supervisor] +
				string("] Permission Id [") + hData[__permissionId] +
				string("] Accounts Payable Permission [") + hData[__accountsPayablePermissions] +
                string("] Accounts Payable Permission HT [") + hData[__accountsPayablePermissionsHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDMERPERMACC";

		//121.128
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__permissionId]).c_str()));
        hResult["121.128"] = Temp;

		//permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__accountsPayablePermissions].c_str());
        strcat(Temp,hData[__accountsPayablePermissionsHT].c_str());
        strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"0001",4)==0)
        {
            return this->messageResponseFalse;
        }

		return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessEditMerchantPermissionLoyaltyTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Edit Merchant Permission Loyalty");
	log=true;
	nameTransaction="Edit Merchant Permission Loyalty";
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
				string("] Supervisor [") + hData[__supervisor] +
				string("] Permission Id [") + hData[__permissionId] +
				string("] Coupons Permission [") + hData[__couponsPermissions] +
                string("] Coupons Permission HT [") + hData[__couponsPermissionsHT] +
                string("] Promotions Permission [") + hData[__promotionsPermissions] +
                string("] Promotions Permission HT [") + hData[__promotionsPermissionsHT] +
                string("] Membership Clubs Permission [") + hData[__membershipClubsPermissions] +
                string("] Membership Clubs Permission HT [") + hData[__membershipClubsPermissionsHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] + string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDMERPERMLOY";

		//121.128
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__permissionId]).c_str()));
        hResult["121.128"] = Temp;

		//permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__couponsPermissions].c_str());
        strcat(Temp,hData[__couponsPermissionsHT].c_str());
        strcat(Temp,hData[__promotionsPermissions].c_str());
        strcat(Temp,hData[__promotionsPermissionsHT].c_str());
        strcat(Temp,hData[__membershipClubsPermissions].c_str());
        strcat(Temp,hData[__membershipClubsPermissionsHT].c_str());
        strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"0001",4)==0)
        {
            return this->messageResponseFalse;
        }

		return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessEditMerchantPermissionRemoteTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Edit Merchant Permission Remote");
	log=true;
	nameTransaction="Edit Merchant Permission Remote";
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
				string("] Supervisor [") + hData[__supervisor] +
				string("] Permission Id [") + hData[__permissionId] +
				string("] Products Permission [") + hData[__productsPermissions] +
                string("] Products Permission HT [") + hData[__productsPermissionsHT] +
                string("] Catalogs Permission [") + hData[__catalogsPermissions] +
                string("] Catalogs Permission HT [") + hData[__catalogsPermissionsHT] +
                string("] Promote Items Permission [") + hData[__promoteItemsPermissions] +
                string("] Promote Items Permission HT [") + hData[__promoteItemsPermissionsHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] +
                string("]");



    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDMERPERMREM";

		//121.128
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__permissionId]).c_str()));
        hResult["121.128"] = Temp;

		//permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__productsPermissions].c_str());
        strcat(Temp,hData[__productsPermissionsHT].c_str());
        strcat(Temp,hData[__catalogsPermissions].c_str());
        strcat(Temp,hData[__catalogsPermissionsHT].c_str());
        strcat(Temp,hData[__promoteItemsPermissions].c_str());
        strcat(Temp,hData[__promoteItemsPermissionsHT].c_str());
        strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"0001",4)==0)
        {
            return this->messageResponseFalse;
        }

		return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditMerchantPermissionReviewsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Edit Merchant Permission Reviews");
	log=true;
	nameTransaction="Edit Merchant Permission Reviews";
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
				string("] Supervisor [") + hData[__supervisor] +
				string("] Permission Id [") + hData[__permissionId] +
				string("] Can Read Review [") + hData[__canReadReview] +
                string("] Can Read Review HT [") + hData[__canReadReviewHT] +
                string("] Can Respond Review [") + hData[__canRespondReview] +
                string("] Can Respond Review HT [") + hData[__canRespondReviewHT] +
                string("] Can Post Review [") + hData[__canPostReview] +
                string("] Can Post Review HT [") + hData[__canPostReviewHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] +
				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDMERPERMREVI";

		//121.128
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__permissionId]).c_str()));
        hResult["121.128"] = Temp;

		//permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__canReadReview].c_str());
        strcat(Temp,hData[__canReadReviewHT].c_str());
        strcat(Temp,hData[__canRespondReview].c_str());
        strcat(Temp,hData[__canRespondReviewHT].c_str());
        strcat(Temp,hData[__canPostReview].c_str());
        strcat(Temp,hData[__canPostReviewHT].c_str());
        strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"0001",4)==0)
        {
            return this->messageResponseFalse;
        }

		return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditMerchantPermissionSubscriptionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Edit Merchant Permission Subscriptions");
	log=true;
	nameTransaction="Edit Merchant Permission Subscriptions";
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
				string("] Supervisor [") + hData[__supervisor] +
				string("] Permission Id [") + hData[__permissionId] +
				string("] Subscriptions Permissions [") + hData[__subscriptionsPermissions] +
                string("] Subscriptions Permissions HT [") + hData[__subscriptionsPermissionsHT] +
				string("] Subscriptions Permissions Edit[") + hData[__subscriptionsPermissionsEdit] +
                string("] Subscriptions Permissions Edit HT [") + hData[__subscriptionsPermissionsEditHT] +
				string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] +
				string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDMERPERMSUBS";

		//121.128
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__permissionId]).c_str()));
        hResult["121.128"] = Temp;

		//permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__subscriptionsPermissions].c_str());
        strcat(Temp,hData[__subscriptionsPermissionsHT].c_str());
        strcat(Temp,hData[__subscriptionsPermissionsEdit].c_str());
        strcat(Temp,hData[__subscriptionsPermissionsEditHT].c_str());
		strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"0001",4)==0)
        {
            return this->messageResponseFalse;
        }

		return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditMerchantPermissionTransactionsTransactions::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Edit Merchant Permission Transactions");
	log=true;
	nameTransaction="Edit Merchant Permission Transactions";
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
				string("] Supervisor [") + hData[__supervisor] +
				string("] Permission Id [") + hData[__permissionId] +
				string("] View Transactions [") + hData[__viewTransactions] +
                string("] View Transactions HT [") + hData[__viewTransactionsHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] +
                string("]");



    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDMERPERTRANS";

		//121.128
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__permissionId]).c_str()));
        hResult["121.128"] = Temp;

		//permisions
        //permisions
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__viewTransactions].c_str());
        strcat(Temp,hData[__viewTransactionsHT].c_str());
        strcat(Temp,hData[__requiresSupervisorApproval].c_str());
        strcat(Temp,hData[__canProvideSupervisorApproval].c_str());
        strcat(Temp,hData[__ableToPrintReports].c_str());
        strcat(Temp,hData[__ableToDownloadReports].c_str());
        hResult["121.169"]=Temp;

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"0001",4)==0)
        {
            return this->messageResponseFalse;
        }

		return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditMerchantPermissionUsersTransactions::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Edit Merchant Permission Users");
	log=true;
	nameTransaction="Edit Merchant Permission Users";
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
                string("] Supervisor [") + hData[__supervisor] +
				string("] User Permissions [") + hData[__userPermission] +
                string("] User Suspend [") + hData[__userSuspend] +
                string("] User Permissions HT [") + hData[__userPermissionHT] +
                string("] Requires Supervisor Approval [") + hData[__requiresSupervisorApproval] +
                string("] Can Provide Supervisor Approval [") + hData[__canProvideSupervisorApproval] +
                string("] Able to Print Reports [") + hData[__ableToPrintReports] +
                string("] Able to Download Reports [") + hData[__ableToDownloadReports] +
                string("]");





    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDMERPERUSE";

		//121.128
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__permissionId]).c_str()));
        hResult["121.128"] = Temp;

		//121.169 permisions
         hResult["121.169"]= hData[__userPermission] +
                            hData[__userSuspend] +
                            hData[__userPermissionHT] +
                            hData[__requiresSupervisorApproval] +
                            hData[__canProvideSupervisorApproval] +
                            hData[__ableToPrintReports] +
                            hData[__ableToDownloadReports];

		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"0001",4)==0)
        {
            return this->messageResponseFalse;
        }

		return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetCatalogLoyaltyRemoteByMerchantIdForAddTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Catalog Loyalty Remote By Merchant Id For Add");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCALOREBYMERID";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;



		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCatalogLoyaltyRemoteByMerchantIdForAdd?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetRemoteItemsByMerchantIdFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Remote Items By Merchant Id Filter");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETREMOBYMERIDFIL";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //121.175
        if(hData[__type].length() > 0)
        {
            hResult["121.175"] = hData[__type];
        }

        //120.45
        if(hData[__categoryName].length() > 0)
        {
            hResult["120.45"] = hData[__categoryName];
        }

        //121.116
        if(hData[__subcategoryName].length() > 0)
        {
            hResult["121.116"] = hData[__subcategoryName];
        }

        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetRemoteItemsByMerchantIdFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSearchRemoteItemsByCatalogIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Remote Items By Catalog Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEAREITBTCATID";

        //P121.27 catalog id
		hResult["121.27"]=hData[__catalogId];

        //114.127
        hResult["114.127"] = hData[__search];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchRemoteItemsByCatalogId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSearchRemoteItemsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Remote Items By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEAREMOITBYMERID";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //114.127
        hResult["114.127"] = hData[__search];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchRemoteItemsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetRemoteItemsByCatalogIdFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Remote Items By Catalog Id Filter");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETREMOCATIDFIL";

        //P121.27 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__catalogId]).c_str()));
		hResult["121.27"]=Temp;

        //121.175
        if(hData[__type].length() > 0)
        {
            hResult["121.175"] = hData[__type];
        }

        //120.45
        if(hData[__categoryName].length() > 0)
        {
            hResult["120.45"] = hData[__categoryName];
        }

        //121.116
        if(hData[__subcategoryName].length() > 0)
        {
            hResult["121.116"] = hData[__subcategoryName];
        }

        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetRemoteItemsByCatalogIdFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSearchUsersMerchantByParentIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Users Merchant By Parent Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEAUSMERBYPID";

        //P114.141 parent id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__parentid]).c_str()));
		hResult["114.141"]=Temp;

        //114.127
        hResult["114.127"] = hData[__search];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchUsersMerchantByParentId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetUsersMerchantByParentIdFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Users Merchant By Parent Id Filter");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETUSMERBYPIDFIL";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__parentid]).c_str()));
		hResult["114.141"]=Temp;

        //114.26
        if(hData[__title].length() > 0)
        {
            hResult["114.26"] = hData[__title];
        }

        //120.96
        if(hData[__status].length() > 0)
        {
            hResult["120.96"] = hData[__status];
        }

        //121.144
        if(hData[__department].length() > 0)
        {
            hResult["121.144"] = hData[__department];
        }

        //121.145
        if(hData[__supervisor].length() > 0)
        {
            hResult["121.145"] = hData[__supervisor];
        }

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetUsersMerchantByParentIdFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSearchMerchantRatingsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Merchant Ratings");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEAMERRAT";

        //P114.141 parent id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //114.127
        hResult["114.127"] = hData[__search];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchMerchantRatings?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetMerchantRatingsFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Merchant Ratings Filter");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETMERRATFIL";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //121.78
        if(hData[__fromRate].length() > 0)
        {
            hResult["121.78"] = hData[__fromRate];
        }

        //121.157
        if(hData[__toRate].length() > 0)
        {
            hResult["121.157"] = hData[__toRate];
        }

        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetMerchantRatingsFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAcceptNewTransactionTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
	nameTransaction="Accept Product Transaction ";
	NMCLog::Log(" Accept Product Transaction ");
	dataLog =   string("Transaction Id [") + hData[__invoiceNumber] +

				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ACCNEWTRA";

		 //121.75
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__invoiceNumber]).c_str()));
        hResult["121.75"] = Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

         if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"0001",4)==0)
        {
            return this->messageResponseFalse;
        }

		return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAddNewProductTransactionTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
	nameTransaction="Add New Product Transaction ";
	NMCLog::Log(" Add New Product Transaction ");
	dataLog =   string("Transaction Id [") + hData[__invoiceNumber] +
                string("Product Id [") + hData[__productId] +
				string("isActive [") + hData[__isActive] +
				string("Product type [") + hData[__type] +
				string(" quantity [") + hData[__quantity] +
				string(" cost [") + hData[__priceSale] +
				string(" taxes [") + hData[__taxes] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWPROTRA";

		 //121.75
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__invoiceNumber]).c_str()));
        hResult["121.75"] = Temp;

		//114.144
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__productId]).c_str()));
        hResult["114.144"] = Temp;


        //120.96
        hResult["120.96"] = hData[__isActive];

        //120.24
        hResult["120.24"] = hData[__type];

        //121.49
        hResult["121.49"] = hData[__quantity];

		//121.50
        hResult["121.50"] = hData[__priceSale];


		if((hData[__taxes]).length())
        {
            //121.97
			hResult["121.97"] = hData[__taxes];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.75"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewTemporalTransactionTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
	nameTransaction="Add New Temporal Transaction";
	NMCLog::Log(" Add New Temporal Transaction");
	dataLog =   string("Transaction Id [") + hData[__invoiceNumber] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWTEMPTRA";

		 //121.75
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__invoiceNumber]).c_str()));
        hResult["121.75"] = Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.75"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAddRefundByTransactionProductIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
	nameTransaction="Add Refund By Transaction Product Id ";
	NMCLog::Log(" Add Refund By Transaction Product Id ");
	dataLog =   string("Transaction Id [") + hData[__invoiceNumber] +
				string("] Cash Refund [") + hData[__cashRefund] +
				string("] Store Credit [") + hData[__storeCredit] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDREFPROTRAPROID";

		 //121.75
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__invoiceNumber]).c_str()));
        hResult["121.75"] = Temp;

		//fields chash Refund- Store credit
        memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__cashRefund].c_str());
        strcat(Temp,hData[__storeCredit].c_str());
        hResult["121.175"]=Temp;

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

         if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"0001",4)==0)
        {
            return this->messageResponseFalse;
        }

		return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetTransactionsByMerchantIdFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log(" Get Transactions By Merchant Id Filter ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRANBYMIDFIL";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //120.90
        if(hData[__type].length() > 0)
        {
            hResult["120.90"] = hData[__type];
        }

       //121.155
		 if((hData[__fromAmount]).length() > 0)
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__fromAmount]).c_str()));
            hResult["121.155"]=Temp;

		}

		//121.156
		 if((hData[__toAmount]).length() > 0)
        {
			memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__toAmount]).c_str()));
            hResult["121.156"]=Temp;

		}

        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTransactionsByMerchantIdFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessSearchTransactionsByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Transactions By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEATRABYMERID";

        //P114.141 parent id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

        //114.127
        hResult["114.127"] = hData[__search];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchTransactionsByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessConfirmMerchantPasswordTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Confirm Merchant Password ");
	log=true;
	nameTransaction="Confirm Merchant Password ";
	dataLog =   string("Merchant Id [") + hData[__merchantId] +
				string("] Password [") + hData[__password] +

                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="CONMERPASS";


		//P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;



		//P121.127
        hResult["121.127"]=hData[__password];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"0001",4)==0)
        {
            return this->messageResponseFalse;
        }

		return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetTransactionByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Transaction By Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETTRABYID";

        //121.75
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__invoiceNumber]).c_str()));
        hResult["121.75"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTransactionById?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetHelpTicketsByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Help Tickets By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETHTBYCONID";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetHelpTicketsByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetRecentInvoicesByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Recent Invoices By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRECINVCONID";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetRecentInvoicesByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessSearchInvoicesByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Invoices By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEAINVBYCONID";

        //P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}


        //114.127
		if(hData[__search].length())
			hResult["114.127"] = hData[__search];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchInvoicesByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessEditTerminalTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Edit Terminal");
    log=true;
    nameTransaction="Edit Terminal";
    dataLog =   string("Terminal name [") + hData[__terminalName] +
                string("] Pos Id [") + hData[__posId] +
                string("] Pos Type [") + hData[__posType] +
                string("] Provider [") + hData[__provider] +
                string("] Pos Internal [") + hData[__posInternal] +
                string("] Reference [") + hData[__reference] +
				string("]") ;

    try
    {

        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDITTERM";


        if((hData[__terminalName]).length())
        {
            //114.48
            hResult["114.48"] = hData[__terminalName];
        }

        //120.69
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__terminalId]).c_str()));
        hResult["120.69"] = Temp;


        if((hData[__posId]).length())
        {
            //121.183
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__posId]).c_str()));
            hResult["121.183"] = Temp;
        }

        if((hData[__posType]).length())
        {
            //121.184
            hResult["121.184"] = hData[__posType];
        }

        if((hData[__provider]).length())
        {
            //121.185
            hResult["121.185"] = hData[__provider];
        }

        if((hData[__posInternal]).length())
        {
            //121.186
            hResult["121.186"] = hData[__posInternal];
        }

        if((hData[__posInternal]).length())
        {
            //121.187
            hResult["121.187"] = hData[__reference];
        }



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return this->messageResponseTrue;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return this->messageResponseTrue;
#endif
}

string ProcessGetTransactionsByCardTockenTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Transactions By Card Tocken");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRABYCATO";

        //P120.4
		hResult["120.4"]=hData[__cardTocken];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTransactionsByCardTocken?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessSearchTransactionsByCardTockenTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Transactions By Card Tocken");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEATRABYCARTO";

        //P114.141 merchant id
        //memset(Temp,0,sizeof(Temp));
		//sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		//hResult["114.141"]=Temp;

        //114.127
		if(hData[__search].length())
			hResult["114.127"] = hData[__search];

        //P120.4
		if(hData[__cardTocken].length())
			hResult["120.4"]=hData[__cardTocken];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchTransactionsByCardTocken?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetTransactionsByCardTockenFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log(" Get Transactions By Card Tocken Filter ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRANBYCARTOFIL";

        //P120.4
		hResult["120.4"]=hData[__cardTocken];

        //114.147
        if(hData[__type].length() > 0)
        {
            hResult["114.147"] = hData[__type];
        }

       //121.155
		 if((hData[__fromAmount]).length() > 0)
        {

			//121.155
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__fromAmount]).c_str()));
            hResult["121.155"] = Temp;

		}

		//121.156
		 if((hData[__toAmount]).length() > 0)
        {
			//121.155
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__toAmount]).c_str()));
            hResult["121.156"] = Temp;
		}

        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTransactionsByCardTockenFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewCreditCardMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Add New Credit Card Merchant");
	log=true;
    nameTransaction="Add New Shipping Options";
	dataLog =   string("Merchant Id  [") + hData[__merchantId] +
                string("] Date Expire [") + hData[__dateExpire] +
                string("] Issuer [") + hData[__issuer] +
                string("] Contact Name [") + hData[__contactName] +
                string("] Merchant Account [") + hData[__merchantAccount] +
				string("] Account type [") + hData[__typeOfCard] +
				string("] Address [") + hData[__address1] +
				string("] Cvv [") + hData[__cvv] +
				string("]");
    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWCRECAMER";

		//114.141
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		//121.141
		hResult["121.141"]=hData[__dateExpire];

		//121.71
		hResult["121.71"]=hData[__issuer];

		//120.57
		hResult["120.57"]=hData[__contactName];

		//121.44
		hResult["121.44"]=hData[__typeOfCard];

		//120.97
		hResult["120.97"]=hData[__merchantAccount];


		//120.74
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%05d",atoi((hData[__cvv]).c_str()));
		hResult["120.74"]=Temp;

		//120.71
		hResult["120.71"]=hData[__address1];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","120.49"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }


        return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessCounterAccountsByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Counter Accounts By Consumer Id");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="COUACCBYCOID";


		//P114.88
		if((hData[__name]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.175"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetClubAndMembershipByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Club And Membership By Consumer Id ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCLUANMEMBYCONID";

        //114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetClubAndMembershipByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetClubAndMembershipByConsumerIdFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log(" Get Club And Membership By Consumer Id Filter ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCLUMEMCONIDFIL";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //120.45
        if(hData[__categoryName].length())
        {
            hResult["120.45"] = hData[__categoryName];
        }

       //121.116
		 if((hData[__subcategoryName]).length())
        {
			hResult["121.116"]=hData[__subcategoryName];
		}



        //121.140
        if(hData[__dateBegin].length())
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length())
        {
            hResult["121.141"] = hData[__dateEnd];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetClubAndMembershipByConsumerIdFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetClubAndMembershipByShoppingListIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Club And Membership By Shopping list Id ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCLUANMEMSHOP";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		//P121.30
		if(hData[__shoppingListID].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
			hResult["121.30"]=Temp;
		}

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetClubAndMembershipByShoppingListId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetClubAndMembershipInShoppingListByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Club And Membership In Shopping List By Consumer Id ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCLUMEMSHOPBYCONID";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}



		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetClubAndMembershipInShoppingListByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetConsumerCouponFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log(" Get Consumer Coupon Filter ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCONCOUPFIL";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //120.45
        if(hData[__categoryName].length() > 0)
        {
            hResult["120.45"] = hData[__categoryName];
        }

       //121.116
		 if((hData[__subcategoryName]).length() > 0)
        {
			hResult["121.116"]=hData[__subcategoryName];
		}



        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }


        //121.133
        if(hData[__dateStart].length() > 0)
        {
            hResult["121.133"] = hData[__dateStart];
        }

        //121.135
        if(hData[__dateEnd2].length() > 0)
        {
            hResult["121.135"] = hData[__dateEnd2];
        }

		//120.96
        if(hData[__status].length() > 0)
        {
            hResult["120.96"] = hData[__status];
        }


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerCouponFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetConsumerCouponFilterByShoppingListIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log(" Get Consumer Coupon Filter By Shopping List Id ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCONCOUPFILSHOPID";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //P121.30
		if(hData[__shoppingListID].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
			hResult["121.30"]=Temp;
		}

        //120.45
        if(hData[__categoryName].length() > 0)
        {
            hResult["120.45"] = hData[__categoryName];
        }

       //121.116
		 if((hData[__subcategoryName]).length() > 0)
        {
			hResult["121.116"]=hData[__subcategoryName];
		}



        //121.140
        if(hData[__dateStart].length() > 0)
        {
            hResult["121.140"] = hData[__dateStart];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];

        }

        //120.96
        if(hData[__status].length() > 0)
        {
            hResult["120.96"] = hData[__status];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerCouponFilterByShoppingListId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetConsumerCouponTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Coupon ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCONCOU";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerCoupon?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetStatusFacebookTwitterByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Status Facebook Twitter By Consumer Id");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETSFTBYCONID";


		//P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.41","114.42"};
        string out[5];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,5,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + out[4] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetConsumerPromotionFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log(" Get Consumer Promotion Filter ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCONPROMOFIL";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //120.45
        if(hData[__categoryName].length() > 0)
        {
            hResult["120.45"] = hData[__categoryName];
        }

       //121.116
		 if((hData[__subcategoryName]).length() > 0)
        {
			hResult["121.116"]=hData[__subcategoryName];
		}



        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }


        //121.133
        if(hData[__dateStart].length() > 0)
        {
            hResult["121.133"] = hData[__dateStart];
        }

        //121.135
        if(hData[__dateEnd2].length() > 0)
        {
            hResult["121.135"] = hData[__dateEnd2];
        }

		//120.96
        if(hData[__status].length() > 0)
        {
            hResult["120.96"] = hData[__status];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerPromotionFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetConsumerPromotionFilterByShoppingListIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log(" Get Consumer Promotion Filter By Shopping List Id ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCONPROMFILSHOPID";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //P121.30
		if(hData[__shoppingListID].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
			hResult["121.30"]=Temp;
		}

        //120.45
        if(hData[__categoryName].length() > 0)
        {
            hResult["120.45"] = hData[__categoryName];
        }

       //121.116
		 if((hData[__subcategoryName]).length() > 0)
        {
			hResult["121.116"]=hData[__subcategoryName];
		}



        //121.140
        if(hData[__dateStart].length() > 0)
        {
            hResult["121.140"] = hData[__dateStart];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];

        }

        //120.96
        if(hData[__status].length() > 0)
        {
            hResult["120.96"] = hData[__status];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerPromotionFilterByShoppingListId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetConsumerPromotionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Promotions ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCONPROM";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerPromotions?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetConsumerRemoteItemTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Remote item ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCONREMIT";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerRemoteItem?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetCouponByShoppingListIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Coupon By Shopping list Id ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCOUPBTSHOPID";

        //P114.88 CONSUMERID
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

		//P121.30
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
		hResult["121.30"]=Temp;


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCouponByShoppingListId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetCreditCardByConsumerIDTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Credit Card By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCRECABYCONID";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}




		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetCreditCardByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetExpiringInSevenDaysClubAndMembershipByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Expiring In Seven Days Club And Membership By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTEXPSEVDCLUMEM";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}




		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetExpiringInSevenDaysClubAndMembershipByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetJoinedClubAndMembershipByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Joined Club And Membership By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTJOCLUMEMCONID";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}




		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetJoinedClubAndMembershipByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetJoinNowClubAndMembershipByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Join Now And Membership By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTJONOCLUMEMCONID";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}




		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetJoinNowClubAndMembershipByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetPromotionsByShoppingListIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Promotions By Shopping list Id ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTPROMBYSHOPID";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		//P121.30
		if(hData[__shoppingListID].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
			hResult["121.30"]=Temp;
		}

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetPromotionsByShoppingListId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetRemoteItemByShoppingListIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Remote Item By Shopping List Id ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTREITBYSHOPID";

        //P114.88 CONSUMERID
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

		//P121.30
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
		hResult["121.30"]=Temp;


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetRemoteItemByShoppingListId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSearchConsumerCouponAndPromotionTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Consumer Coupon And Promotion");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEACONCOUPRO";

        //P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //114.127
		if(hData[__search].length())
			hResult["114.127"] = hData[__search];



		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchConsumerCouponAndPromotion?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessSearchConsumerCouponAndPromotionByShoppingListIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Consumer Coupon And Promotion by Shopping List ID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SECONCOPROSHOPID";

        //P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		//P121.30
		if(hData[__shoppingListID].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
			hResult["121.30"]=Temp;
		}

        //114.127
		if(hData[__search].length())
			hResult["114.127"] = hData[__search];



		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchConsumerCouponAndPromotionByShoppingListId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSearchGetClubAndMembershipByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Get Club And Membership By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEACLUBMEMBYCOID";

        //P114.88
		if(hData[__search].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //114.127
		if(hData[__search].length())
			hResult["114.127"] = hData[__search];



		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchGetClubAndMembershipByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessSearchRemoteItemByShoppingListIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Remote Item By Shopping List Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEREMOSHOPID";

       //P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		//P121.30
		if(hData[__shoppingListID].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
			hResult["121.30"]=Temp;
		}

        //114.127
		if(hData[__search].length())
			hResult["114.127"] = hData[__search];



		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchRemoteItemByShoppingListId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetConsumerClubAndMembershipFilterByShoppingListIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log(" Get Consumer Club And Membership Filter By Shopping List Id ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTCONCLUBFILSHOPID";

        //P114.88
		if(hData[__userId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__userId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //P121.30
		if(hData[__shoppingListID].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__shoppingListID]).c_str()));
			hResult["121.30"]=Temp;
		}

        //120.45
        if(hData[__categoryName].length() > 0)
        {
            hResult["120.45"] = hData[__categoryName];
        }

       //121.116
		 if((hData[__subcategoryName]).length() > 0)
        {
			hResult["121.116"]=hData[__subcategoryName];
		}



        //121.140
        if(hData[__dateStart].length() > 0)
        {
            hResult["121.140"] = hData[__dateStart];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];

        }

        //120.96
        if(hData[__status].length() > 0)
        {
            hResult["120.96"] = hData[__status];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerClubAndMembershipFilterByShoppingListId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSaveSecretQuestionByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Save Secret Question By Consumer Id");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SASEQUEBYCO";


		//P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.170
		if(hData[__note].length())
			hResult["121.170"]=hData[__note];

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAddPaymentAccountConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Add Payment Account Consumer");
	log=true;
	nameTransaction="Add Payment Account Consumer";
	dataLog =   string("Consumer Id [") + hData[__consumerId] +
				string("] Type of Card [") + hData[__typeOfCard] +
				string("] Account Type [") + hData[__accountType] +
				string("] Card Nickname [") + hData[__cardNickname] +
				string("] Card Holder Name [") + hData[__cardHolderName] +
				string("] Address Card Holder [") + hData[__addressCardHolder] +
                string("]");
    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDACCCON";


		//P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //2
		if(hData[__pan].length())
			hResult["2"]=hData[__pan];

        //121.44
		if(hData[__typeOfCard].length())
			hResult["121.44"]=hData[__typeOfCard];

        //121.72
		if(hData[__accountType].length())
			hResult["121.72"]=hData[__accountType];

        //48.6
		if(hData[__addressCardHolder].length())
			hResult["48.6"]=hData[__cardNickname];

        //48.2
		if(hData[__cardHolderName].length())
			hResult["48.2"]=hData[__cardHolderName];

        //14
        if(hData[__dateExpire].length())
            hResult["14"]=hData[__dateExpire];

        //48.4
        if(hData[__cvv].length())
        {
            memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%05d",atoi((hData[__cvv]).c_str()));
			hResult["48.4"] = Temp;
        }

        //120.71
        if(hData[__addressCardHolder].length())
			hResult["120.71"]=hData[__addressCardHolder];


		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","120.49"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] +string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditPaymentAccountConsumerByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Edit Payment Account Consumer By Id");
	log=true;
	nameTransaction="Edit Payment Account Consumer By Id";
	dataLog =   string("] Card Nickname [") + hData[__cardNickname] +
				string("] Address Card Holder [") + hData[__addressCardHolder] +
                string("]");
    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDACCCONBYID";


		//P120.49
		if(hData[__creditCardId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__creditCardId]).c_str()));
			hResult["120.49"]=Temp;
		}

        //48.6
        if(hData[__cardNickname].length()>0)
        {
            hResult["48.6"]=hData[__cardNickname];
        }


        //120.154
        if(hData[__dateExpire].length()>0)
        {
            hResult["120.154"]=hData[__dateExpire];
        }


        //48.4
        if(hData[__cvv].length()>0)
        {
           hResult["48.4"]=hData[__cvv];
        }


        //120.71
        if(hData[__addressCardHolder].length()>0)
        {
            hResult["120.71"]=hData[__addressCardHolder];
        }


		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddImagesToProductByConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Images To Product By Consumer";
	NMCLog::Log("Add Images To Product By Consumer");
    dataLog =   string("Product Id [") + hData[__remoteItemId] +
                string("] Images [") + hData[__image] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDIMATOPROBYCO";

		//114.144
		if(hData[__productId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__productId]).c_str()));
			hResult["114.144"] = Temp;
		}

        //121.170
		if(hData[__image].length())
			hResult["121.170"]=hData[__image];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessValidateConsumerPasswordTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Validate Consumer Password");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="VACONPASS";


		//P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //52
		if(hData[__password].length())
			hResult["52"]=hData[__password];

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"9999",4)==0)
        {
            return this->messageResponseFalse;
        }


        return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessValidateConsumerPincodeTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Validate Consumer Pincode");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="VACONPINCO";


		//P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //52
		if(hData[__mobileAppPincode].length())
			hResult["52"]=hData[__mobileAppPincode];

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)==0)
        {
            return this->messageResponseTrue;
        }
        else if(memcmp(out[0].c_str(),"9999",4)==0)
        {
            return this->messageResponseFalse;
        }


        return out[2]+string(" - ")+out[1];
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessRemovePaymentAccountConsumerByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Remove Payment Account Consumer By Id");
	log=true;
	nameTransaction="Remove Payment Account Consumer By Id";
	dataLog =   string("] Credit Card id [") + hData[__creditCardId] +
                string("]");
    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REACCCONBYID";


		//121.175
		if(hData[__creditCardId].length())
			hResult["121.175"]=hData[__creditCardId];

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetSaleItemsByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log(" Get Sale Items By Consumer Id ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTSAITBYCONID";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetSaleItemsByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




string ProcessSearchSaleItemsByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Sale Items By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SESAITBYCOID";

        //P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //114.127
		if(hData[__search].length())
			hResult["114.127"] = hData[__search];



		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchSaleItemsByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetSaleItemsByConsumerIdFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log(" Get Sale Items By Consumer Id Filter ");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTSAITBYCONFIL";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}



        //120.45
        if(hData[__categoryName].length() > 0)
        {
            hResult["120.45"] = hData[__categoryName];
        }

       //121.116
		 if((hData[__subcategoryName]).length() > 0)
        {
			hResult["121.116"]=hData[__subcategoryName];
		}


        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];

        }

        //120.120
        if(hData[__status].length() > 0)
        {
            hResult["120.120"] = hData[__status];
        }

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetSaleItemsByConsumerIdFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAddNewConsumerAddressTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Add New Consumer Address");
	log=true;
	nameTransaction="Add New Consumer Address";
	dataLog =   string("] Name Address [") + hData[__name] +
                string("] Address 1 [") + hData[__address1] +
                string("] Address 2 [") + hData[__addres2] +
                string("] Address Type [") + hData[__addressType] +
                string("] Country [") + hData[__country] +
                string("] Phone Number [") + hData[__phoneNumber] +
                string("] City [") + hData[__city] +
                string("] State [") + hData[__state] +
                string("] Zip [") + hData[__zipCode] +
                string("] Is Favorite [") + hData[__isFavorite] +
                string("] Consumer Id [") + hData[__consumerId] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWCONADD";

        //114.26
		if((hData[__name]).length())
			hResult["114.26"]=hData[__name];


        //114.12
		if((hData[__address1]).length())
			hResult["114.12"]=hData[__address1];

        //114.13
		if((hData[__addres2]).length())
			hResult["114.13"]=hData[__addres2];

        //121.45
		if((hData[__addressType]).length())
			hResult["121.45"]=hData[__addressType];

        //120.73
		if((hData[__country]).length())
			hResult["121.61"]=hData[__country];

        //114.52
		if((hData[__phoneNumber]).length())
			hResult["114.52"]=hData[__phoneNumber];

        //120.12
		if((hData[__city]).length())
			hResult["114.31"]=hData[__city];

        //120.13
		if((hData[__state]).length())
			hResult["121.81"]=hData[__state];

        //120.14
		if((hData[__zipCode]).length())
			hResult["120.14"]=hData[__zipCode];

        //120.15
        if(hData[__isFavorite].length())
            hResult["120.15"]=hData[__isFavorite];

        //P114.88
		if((hData[__name]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.115"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessSetDefaultConsumerAddressTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Set Default Consumer Address");
	log=true;
	nameTransaction="Set Default Consumer Address";
	dataLog =   string("] Address Id [") + hData[__addressId] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SETDECONADD";

        //P114.115
		if(hData[__addressId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__addressId]).c_str()));
			hResult["114.115"]=Temp;
		}

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditConsumerAddressTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Edit Consumer Address");
	log=true;
	nameTransaction="Edit Consumer Address";
	dataLog =   string("] Name Address [") + hData[__name] +
                string("] Address 1 [") + hData[__address1] +
                string("] Address 2 [") + hData[__addres2] +
                string("] Address Type [") + hData[__addressType] +
                string("] Country [") + hData[__country] +
                string("] Phone Number [") + hData[__phoneNumber] +
                string("] City [") + hData[__city] +
                string("] State [") + hData[__state] +
                string("] Zip [") + hData[__zipCode] +
                string("] Address Id [") + hData[__addressId] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDITCONADD";

        //114.26
        if(hData[__name].length()>0)
            hResult["114.26"]=hData[__name];

        //114.12
        if(hData[__address1].length()>0)
            hResult["114.12"]=hData[__address1];

        //114.13
        if(hData[__addres2].length()>0)
            hResult["114.13"]=hData[__addres2];

        //121.45
        if(hData[__addressType].length()>0)
            hResult["121.45"]=hData[__addressType];

        //121.15
        if(hData[__country].length()>0)
            hResult["121.15"]=hData[__country];

        //114.52
        if(hData[__phoneNumber].length()>0)
            hResult["114.52"]=hData[__phoneNumber];

        //121.12
        if(hData[__city].length()>0)
            hResult["121.12"]=hData[__city];

        //121.13
        if(hData[__state].length()>0)
            hResult["121.13"]=hData[__state];

        //120.14
        if(hData[__zipCode].length()>0)
            hResult["120.14"]=hData[__zipCode];

        //P114.115
		if(hData[__zipCode].length()>0)
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__addressId]).c_str()));
			hResult["114.115"]=Temp;
		}

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessRemoveConsumerAddressByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Remove Consumer Address By Id");
	log=true;
	nameTransaction="Remove Payment Account Consumer By Id";
	dataLog =   string("] Address id [") + hData[__creditCardId] +
                string("]");
    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="RECONADDBYID";


		//121.175
		if(hData[__addressId].length())
			hResult["121.175"]=hData[__addressId];

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetConsumerAddressByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Address By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GECONADDBYCONID";

        //P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerAddressByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewOptionConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Add New Option Comsumer");
    log=true;
    nameTransaction="Add New Option";
	dataLog =   string("product id [") + hData[__productId] +
                string("] Option Name [") + hData[__optionName] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADNEWOPTCONS";

		//114.144
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__productId]).c_str()));
        hResult["114.144"] = Temp;

        //121.104
        hResult["121.104"] = hData[__optionName];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.179"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessAddTotalByOptionIdConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Total By Option Id";
	NMCLog::Log("Add Total By Option Id");
    dataLog =   string("Option id [") + hData[__optionid] +
                string("] Total [") + hData[__total] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADTOBYOPIDCONS";

		//121.179
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__optionid]).c_str()));
        hResult["121.179"] = Temp;

        //114.156
        hResult["114.156"]=hData[__total];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessSetStatusFacebookTwitterByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Set Status Facebook Twitter By Consumer Id");
    log=true;
	nameTransaction="Set Status Facebook Twitter By Consumer Id";
	dataLog =   string("Consumer id [") + hData[__creditCardId] +
                string("] Facebook [") + hData[__facebook] +
                string("] Twitter [") + hData[__twitter] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SETSFTBYCONID";


		//P114.88
		if(hData[__search].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //114.41
		if(hData[__search].length())
			hResult["114.41"]=hData[__twitter];

        //114.42
		if(hData[__search].length())
			hResult["114.42"]=hData[__facebook];

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetLanguageScreenLockTimeByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Language Screen Lock Time By Consumer Id");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GELLSTBYCONID";


		//P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.129","121.158"};
        string out[5];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,5,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("|") + out[4] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSetLanguageScreenLockTimeByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Set Language Screen Lock Time By Consumer Id");
    log=true;
	nameTransaction="Set Language Screen Lock Time By Consumer Id";
	dataLog =   string("Consumer id [") + hData[__consumerId] +
                string("] Language [") + hData[__language] +
                string("] Time Lock [") + hData[__timeLock] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SETLANSCLTBYCOID";


		//P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.129
		if(hData[__timeLock].length())
			hResult["121.129"]=hData[__timeLock];

        //114.42
		if(hData[__language].length())
			hResult["121.158"]=hData[__language];

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessChangeMailConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Change Mail Consumer");
    log=true;
	nameTransaction="Change Mail Consumer";
	dataLog =   string("Consumer id [") + hData[__consumerId] +
                string("] Old Email [") + hData[__oldEmail] +
                string("] New Email [") + hData[__newEmail] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="CHAEMACON";


		//P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //120.126
		if(hData[__oldEmail].length())
			hResult["120.126"]=hData[__oldEmail];

        //114.7
		if(hData[__newEmail].length())
			hResult["114.7"]=hData[__newEmail];

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessContactNMCConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Contact NMC Consumer");
    log=true;
	nameTransaction="Change Mail Consumer";
	dataLog =   string("Consumer id [") + hData[__consumerId] +
                string("] Subject [") + hData[__subject] +
                string("] Comment [") + hData[__description] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="CONTNMCCON";


		//P114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //120.83
		if(hData[__subject].length())
			hResult["120.83"]=hData[__subject];

        //120.157
		if(hData[__description].length())
			hResult["120.157"]=hData[__description];

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.54"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessAddNewSaleItemTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add New Sale Item";
    NMCLog::Log("Add New Sale Item");
	dataLog =   string("Consumer ID [") + hData[__consumerId] +
                string("] Name [") + hData[__name] +
                string("] Date Active [") + hData[__dateCreate] +
                string("] Date Expire [") + hData[__dateExpire] +
                string("] Date Cancel [") + hData[__dateEnd] +
                string("] Seller Can Accept or Stop Selling [") + hData[__sellerCanAcceptORstopSelling] +
                string("] Description[") + hData[__description] +
                string("] Remote Items Terms And Conditions [") + hData[__remoteItemTermsAndCondition] +
                string("] Condition [") + hData[__condition] +
                string("] Regular Price Coin [") + hData[__priceCoin1] +
                string("] Price [") + hData[__price] +
                string("] Sale Price Coin [") + hData[__priceCoin2] +
                string("] Sale Price [") + hData[__priceSale] +
				string("] US Pstal Service [") + hData[__usPostalService] +
                string("] U P S[") + hData[__ups] +
                string("] FedEx [") + hData[__fedex] +
                string("] Generic Epeditet Overnight Shipping [") + hData[__genericEpeditetOvernightShipping] +
				string("] Us Shipping Services [") + hData[__usShippingServices] +
				string("] Shipping Terms and Condition[") + hData[__termsAndCondition] +
				string("] Free Shipping  [") + hData[__freeShipping] +
				string("] Shipping Cost To Buyer [") + hData[__shippingCost] +
				string("] Shipping Cost To Buyer Coin[") + hData[__priceCoin3] +
				string("] Aditional Charges [") + hData[__aditionalCharges] +
				string("] Aditional Charges Coin [") + hData[__priceCoin4] +
				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWSALEITEM";



		//114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        string merId(Temp,strlen(Temp));
        hResult["114.88"]=Temp;

        //121.181
        hResult["121.181"] = hData[__typeCategoryName];

        //120.45
        hResult["120.45"] = hData[__categoryName];

        //121.116
        hResult["121.116"] = hData[__subcategoryName];

        //114.137
        hResult["114.137"] = hData[__aditionalCategoryName];


		//121.98
        hResult["121.98"]=hData[__name];


		//120.31 Date create
        hResult["120.31"]=hData[__dateCreate];


		//120.47 Date end
		if(hData[__dateEnd].length()>0)
        hResult["120.47"]=hData[__dateEnd];

		//121.171 seller can accept back order"/"stop selling after inventory sold
        hResult["121.171"]=hData[__sellerCanAcceptORstopSelling];


		//121.99
        hResult["121.99"]=hData[__description];

		//121.100
        hResult["121.100"]=hData[__remoteItemTermsAndCondition];

		//121.172  conditions
        hResult["121.172"]=hData[__condition];

		//121.173  regular_price_coin
        hResult["121.173"]=hData[__priceCoin1];

		//120.84 price
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__price]).c_str()));
        hResult["120.84"]=Temp;

		//121.174  sale_price_coin
        hResult["121.174"]=hData[__priceCoin2];

		//121.95  sale_price
        hResult["121.95"]=hData[__priceSale];


		//121.175 shipping types
		memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__usPostalService].c_str());
        strcat(Temp,hData[__ups].c_str());
        strcat(Temp,hData[__fedex].c_str());
        strcat(Temp,hData[__genericEpeditetOvernightShipping].c_str());
        hResult["121.175"]=Temp;


		//121.27 Us Shipping Services
		hResult["121.27"]=hData[__usShippingServices];

		//121.28 Shipping Terms And Condition
		hResult["121.28"]=hData[__termsAndCondition];

		//120.90 Free Shipping
		hResult["120.90"]=hData[__freeShipping];

		//121.119 shipping cost to buyer
		hResult["121.119"]=hData[__shippingCost];

		//121.176 shipping cost to buyer coin
		 if(hData[__priceCoin3].length()>0)
		hResult["121.176"]=hData[__priceCoin3];

		//121.120 aditional charges
		if(hData[__aditionalCharges].length()>0)
		hResult["121.120"]=hData[__aditionalCharges];

		//121.177 aditional charges coin
		hResult["121.177"]=hData[__priceCoin4];



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.52"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditSaleItemTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Sale Item";
    NMCLog::Log("Edit Sale Item");
	dataLog =   string("Consumer ID [") + hData[__consumerId] +
                string("] Name [") + hData[__name] +
                string("] Date Active [") + hData[__dateCreate] +
                string("] Date Expire [") + hData[__dateExpire] +
                string("] Date Cancel [") + hData[__dateEnd] +
                string("] Seller Can Accept or Stop Selling [") + hData[__sellerCanAcceptORstopSelling] +
                string("] Description[") + hData[__description] +
                string("] Remote Items Terms And Conditions [") + hData[__remoteItemTermsAndCondition] +
                string("] Condition [") + hData[__condition] +
                string("] Regular Price Coin [") + hData[__priceCoin1] +
                string("] Price [") + hData[__price] +
                string("] Sale Price Coin [") + hData[__priceCoin2] +
                string("] Sale Price [") + hData[__priceSale] +
				string("] US Pstal Service [") + hData[__usPostalService] +
                string("] U P S[") + hData[__ups] +
                string("] FedEx [") + hData[__fedex] +
                string("] Generic Epeditet Overnight Shipping [") + hData[__genericEpeditetOvernightShipping] +
				string("] Us Shipping Services [") + hData[__usShippingServices] +
				string("] Shipping Terms and Condition[") + hData[__termsAndCondition] +
				string("] Free Shipping  [") + hData[__freeShipping] +
				string("] Shipping Cost To Buyer [") + hData[__shippingCost] +
				string("] Shipping Cost To Buyer Coin[") + hData[__priceCoin3] +
				string("] Aditional Charges [") + hData[__aditionalCharges] +
				string("] Aditional Charges Coin [") + hData[__priceCoin4] +
				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDITSALEITEM";


        //121.52
		if(hData[__productId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__productId]).c_str()));
			string merId(Temp,strlen(Temp));
			hResult["121.52"]=Temp;
		}


		//114.88
		if(hData[__consumerId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.181
        if(hData[__typeCategoryName].length())
			hResult["121.181"] = hData[__typeCategoryName];

        //120.45
        if(hData[__categoryName].length())
			hResult["120.45"] = hData[__categoryName];

        //121.116
        if(hData[__subcategoryName].length())
			hResult["121.116"] = hData[__subcategoryName];

        //114.137
        if(hData[__aditionalCategoryName].length())
			hResult["114.137"] = hData[__aditionalCategoryName];


		//121.98
		if(hData[__name].length())
			hResult["121.98"]=hData[__name];


		//120.31 Date create
		if(hData[__dateCreate].length())
			hResult["120.31"]=hData[__dateCreate];


		//120.47 Date end
		if(hData[__dateEnd].length())
			hResult["120.47"]=hData[__dateEnd];

		//121.171 seller can accept back order"/"stop selling after inventory sold
        if(hData[__sellerCanAcceptORstopSelling].length())
			hResult["121.171"]=hData[__sellerCanAcceptORstopSelling];


		//120.157
        if(hData[__description].length())
			hResult["120.157"]=hData[__description];

		//121.28
        if(hData[__remoteItemTermsAndCondition].length())
			hResult["121.28"]=hData[__remoteItemTermsAndCondition];

		//121.172  conditions
		if(hData[__condition].length())
			hResult["121.172"]=hData[__condition];

		//121.173  regular_price_coin
        if(hData[__priceCoin1].length())
			hResult["121.173"]=hData[__priceCoin1];

		//120.84 price
        if(hData[__price].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__price]).c_str()));
			hResult["120.84"]=Temp;
        }


		//121.174  sale_price_coin
        if(hData[__priceCoin2].length()>0)
			hResult["121.174"]=hData[__priceCoin2];

		//121.95  sale_price
		if(hData[__priceSale].length()>0)
			hResult["121.95"]=hData[__priceSale];


		//121.175 shipping types
		memset(Temp,0,sizeof(Temp));
        strcat(Temp,hData[__usPostalService].c_str());
        strcat(Temp,hData[__ups].c_str());
        strcat(Temp,hData[__fedex].c_str());
        strcat(Temp,hData[__genericEpeditetOvernightShipping].c_str());
        hResult["121.175"]=Temp;


		//121.27 Us Shipping Services
		if(hData[__usShippingServices].length())
			hResult["121.27"]=hData[__usShippingServices];

		//121.28 Shipping Terms And Condition
		if(hData[__termsAndCondition].length())
			hResult["121.28"]=hData[__termsAndCondition];

		//120.90 Free Shipping
		if(hData[__freeShipping].length())
			hResult["120.90"]=hData[__freeShipping];

		//121.119 shipping cost to buyer
		if(hData[__shippingCost].length())
			hResult["121.119"]=hData[__shippingCost];

		//121.176 shipping cost to buyer coin
		if(hData[__priceCoin3].length()>0)
			hResult["121.176"]=hData[__priceCoin3];

		//121.120 aditional charges
		if(hData[__aditionalCharges].length()>0)
			hResult["121.120"]=hData[__aditionalCharges];

		//121.177 aditional charges coin
		if(hData[__priceCoin4].length()>0)
			hResult["121.177"]=hData[__priceCoin4];



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessRemoveSaleItemTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Remove Sale Item";
    NMCLog::Log("Remove Sale Item");
	dataLog =   string("Item ID [") + hData[__productId] +

				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOSALEITEM";


        //121.52
		if(hData[__productId].length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__productId]).c_str()));
			string merId(Temp,strlen(Temp));
			hResult["121.52"]=Temp;
		}





        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessSaveStatusLostPhoneTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Save Status Lost Phone");
    log=true;
	nameTransaction="Save Status Lost Phone";
	dataLog =   string("Consumer id [") + hData[__consumerId] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SASTALOPHO";


		//P114.88
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;

		  //121.62 LOST PHONE
		 if((hData[__phoneNumber]).length() > 0)
        {
			hResult["121.62"]=hData[__phoneNumber];
		}

		  //121.172 PURCHASE
		 if((hData[__price]).length() > 0)
        {
			hResult["121.172"]=hData[__price];
		}


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.101"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetConsumerNotificationSettingsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Get Consumer Notification Settings");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GECONOTSE";


		//P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.179"};
        string out[5];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,8,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return  string("{") + out[3] +
                string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessEditConsumerNotificationSettingsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Edit Consumer Notification Settings");
    log=true;
	nameTransaction="Edit Consumer Notification Settings";
	dataLog =   string("Consumer id [") + hData[__consumerId] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDCONNOTSET";


		//114.88
		if((hData[__consumerId]).length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"] = Temp;
		}


		 //114.35
        if(hData[__receivePushNotification].length()>0)
            hResult["114.35"]=hData[__receivePushNotification];

		 //121.90
        if(hData[__whenPromotionExpireTomorrow].length()>0)
            hResult["121.90"]=hData[__whenPromotionExpireTomorrow];

        //47.5
        if(hData[__autoDeleteUsedAndExpired].length()>0)
            hResult["47.5"]=hData[__autoDeleteUsedAndExpired];

        //121.140
        if(hData[__startHour].length()>0)
            hResult["121.140"]=hData[__startHour];

         //121.141
        if(hData[__closingHour].length()>0)
            hResult["121.141"]=hData[__closingHour];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessDeleteUserMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Delete User Merchant");
    log=true;
	nameTransaction="Delete User Merchant";
	dataLog =   string("Merchant id [") + hData[__merchantId] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="DELUSMERCH";


		//P114.141
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;




        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditCreditCardMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Edit Credit Card Merchant");
	log=true;
    nameTransaction="Edit Credit Card Merchant";
	dataLog =   string("Card Id  [") + hData[__creditCardId] +
                string("] Date Expire [") + hData[__dateExpire] +
                string("] Issuer [") + hData[__issuer] +
                string("] Contact Name [") + hData[__contactName] +
                string("] Merchant Account [") + hData[__merchantAccount] +
				string("] Account type [") + hData[__typeOfCard] +
				string("] Address [") + hData[__address1] +
				string("] Cvv [") + hData[__cvv] +
				string("]");
    try
    {
        string dataIn;
        string sFormatedRsp;


        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDICRECAMER";

		//120.49
        memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__creditCardId]).c_str()));
		hResult["120.49"]=Temp;

		 //121.141
        if(hData[__dateExpire].length()>0)
		{
		    hResult["121.141 "]=hData[__dateExpire];

            //120.74
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%05d",atoi((hData[__cvv]).c_str()));
            hResult["120.74"]=Temp;

		}


		//121.71
		if(hData[__issuer].length()>0)
		hResult["121.71"]=hData[__issuer];

		//120.57
		if(hData[__contactName].length()>0)
		hResult["120.57"]=hData[__contactName];

		//121.44
		if(hData[__typeOfCard].length()>0)
		hResult["121.44"]=hData[__typeOfCard];

		//120.97
		if(hData[__merchantAccount].length()>0)
		hResult["120.97"]=hData[__merchantAccount];


		//120.71
		if(hData[__address1].length()>0)
		hResult["120.71"]=hData[__address1];


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
            return NULL;
        }

        if(dataIn.length()<=2)
        {
            return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessContactNMCResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Contact NMC Reseller");
    log=true;
	nameTransaction="Contact NMC Reseller";
	dataLog =   string("Reseller id [") + hData[__resellerId] +
                string("] Subject [") + hData[__subject] +
                string("] Comment [") + hData[__description] +
                string("]");


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="CONTNMCRES";


		//P121.159
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__resellerId]).c_str()));
		hResult["121.159"]=Temp;

        //120.83
        hResult["120.83"]=hData[__subject];

        //120.157
        hResult["120.157"]=hData[__description];

		string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.54"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
            return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
            return out[2]+string(" - ")+out[1];
        }



		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetResellerRatingsAndReviewsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Reseller Ratings And Reviews");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTRESRATANDREV";

		//114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
        hResult["114.141"] = Temp;


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetResellerRatingsAndReviews?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessSearchResellerRatingsAndReviewsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Reseller Ratings And Reviews");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SEARESRATANDREV";

		//114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
        hResult["114.141"] = Temp;

        //114.127
        hResult["114.127"]=hData[__search];

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchResellerRatingsAndReviews?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetResellerRatingsFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Reseller Ratings Filter");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRERATFIL";

		//114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
        hResult["114.141"] = Temp;

        //121.78
        if(hData[__fromRate].length() > 0)
        {
            hResult["121.78"] = hData[__fromRate];
        }

        //121.157
        if(hData[__toRate].length() > 0)
        {
            hResult["121.157"] = hData[__toRate];
        }

        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetResellerRatingsFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetResellerHelpTicketsfromMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Reseller Help Tickets from Merchant");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRESHELTICFROMER";

        //P121.159 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
		hResult["121.159"]=Temp;


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetResellerHelpTicketsfromMerchant?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetResellerHelpTicketsfromMerchantFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Reseller Help Tickets from Merchant Filter");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTHELTIFROMERFIL";

		//114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
        hResult["114.141"] = Temp;

        //114.143
        if(hData[__status].length() > 0)
        {
            hResult["114.143"] = hData[__status];
        }


        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }

        //121.83
        if(hData[__dateEnd2].length() > 0)
        {
            hResult["121.83"] = hData[__dateEnd2];
        }

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetResellerHelpTicketsfromMerchantFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetResellerHelpTicketsToAdminTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Reseller Help Tickets To Admin");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRESHELTICTOAD";

        //P121.159 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
		hResult["121.159"]=Temp;


		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetResellerHelpTicketsToAdmin?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetResellerHelpTicketsToAdminFilterTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Reseller Help Tickets To Admin Filter");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTHELTITOADMFIL";

		//114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
        hResult["114.141"] = Temp;

        //114.143
        if(hData[__status].length() > 0)
        {
            hResult["114.143"] = hData[__status];
        }


        //121.140
        if(hData[__dateBegin].length() > 0)
        {
            hResult["121.140"] = hData[__dateBegin];
        }

        //121.141
        if(hData[__dateEnd].length() > 0)
        {
            hResult["121.141"] = hData[__dateEnd];
        }

        //121.83
        if(hData[__dateEnd2].length() > 0)
        {
            hResult["121.83"] = hData[__dateEnd2];
        }

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetResellerHelpTicketsToAdminFilter?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessSearchResellerHelpTicketsFromMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Reseller Help Tickets From Merchant");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SERESHETIFROMER";

		//114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
        hResult["114.141"] = Temp;


        hResult["114.127"] = hData[__search];




        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchResellerHelpTicketsFromMerchant?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessSearchResellerHelpTicketsToAdminTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Search Reseller Help Tickets To Admin");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="SERESHETITOAD";

		//114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__resellerId]).c_str()));
        hResult["114.141"] = Temp;


        hResult["114.127"] = hData[__search];




        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/SearchResellerHelpTicketsToAdmin?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewHelpTicketsResellerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add New Help Tickets Reseller";
	NMCLog::Log("Add New Help Tickets Reseller");
    dataLog =   string("Name [") + hData[__name] +

                string("] Description [") + hData[__description] +
                string("] Reseller Id [") + hData[__resellerId] +
                string("] Section [") + hData[__section] +
                string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADNEHLPTIKRES";


        //114.26
        hResult["114.26"]=hData[__name];



        //121.159
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__resellerId]).c_str()));
        hResult["121.159"] = Temp;


        //120.32
        hResult["120.32"]=hData[__description];


        //121.188
        hResult["121.188"] = hData[__section];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","121.54"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetResellersTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Resellers");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRESS";


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetResellers?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetImagesByRemoteItemIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Images By Remote Item ID");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETIMBYREMID";

        //121.52
        //memset(Temp,0,sizeof(Temp));
        //sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
        //hResult["121.52"] = Temp;

        //121.52 remote item id
        hResult["121.52"]=hData[__remoteItemId];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetImagesByRemoteItemId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessEditManagementUserMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Management User Merchant";
	NMCLog::Log("Edit Management User Merchant");
    dataLog =   string("First Name [") + hData[__firstName] +
                string("] Merchant id [") + hData[__merchantId] +
				string("] Middle Name [") + hData[__middleName] +
				string("] Last Name [") + hData[__lastName] +
                string("] Title [") + hData[__title] +
                string("] Department [") + hData[__department] +
                string("] Status [") + hData[__status] +
                string("] Email [") + hData[__email] +
                string("] Password [") + hData[__password] +
                string("] Office Number [") + hData[__officeNumber] +
                string("] Mobile Number [") + hData[__movileNumber] +
                string("] Home phone [") + hData[__homePhone] +
                string("] Extension [") + hData[__extension2] +
                string("] Address1 [") + hData[__address1] +
				string("] Address2 [") + hData[__addres2] +
                string("] Country [") + hData[__country] +
				string("] City [") + hData[__city] +
				string("] State [") + hData[__state] +
				string("] Zip [") + hData[__zipCode] +
                string("] Supervisor [") + hData[__supervisor] +
				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDTMANAUSMER";



		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"] = Temp;



        if((hData[__firstName]).length())
        {
            //114.3
            hResult["114.3"]=hData[__firstName];
        }

		if((hData[__middleName]).length())
        {
            //114.4
            hResult["114.4"]=hData[__middleName];
        }

        if((hData[__lastName]).length())
        {
            //114.5
            hResult["114.5"]=hData[__lastName];
        }


        if((hData[__title]).length())
        {
            //114.26
            hResult["114.26"]=hData[__title];
        }


        if((hData[__department]).length())
        {
            //121.144
            hResult["121.144"]=hData[__department];
        }

        if((hData[__status]).length())
        {
            //114.143
            hResult["114.143"]=hData[__status];
        }


        if((hData[__email]).length())
        {
            //114.7
            hResult["114.7"]=hData[__email];
        }

        if((hData[__password]).length())
        {
            //52
            hResult["52"]=hData[__password];

        }



         if((hData[__officeNumber]).length())
        {
            //121.147
            hResult["121.147"]=hData[__officeNumber];
        }

        if((hData[__movileNumber]).length())
        {
            //114.52
            hResult["114.52"]=hData[__movileNumber];
        }

        if((hData[__homePhone]).length())
        {
            //114.79
            hResult["114.79"]=hData[__homePhone];
        }


         if((hData[__address1]).length())
        {
            //114.106
            hResult["114.106"]=hData[__address1];
        }

        if((hData[__addres2]).length())
        {
            //114.107
            hResult["114.107"]=hData[__addres2];
        }


        if((hData[__country]).length())
        {
            //120.73
            hResult["120.73"]=hData[__country];
        }

        if((hData[__city]).length())
        {
            //114.108
            hResult["114.108"]=hData[__city];
        }

		if((hData[__state]).length())
        {
            //120.13
            hResult["120.13"]=hData[__state];
        }

        if((hData[__zipCode]).length())
        {
            //114.110
            hResult["114.110"]=hData[__zipCode];
        }

        if((hData[__supervisor]).length())
        {
            //121.145
            hResult["121.145"]=hData[__supervisor];
        }



		//121.168 extension for merchant
		if((hData[__extension2]).length())
        {
			hResult["121.168"]=hData[__extension2];
		}




        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetSupervisorMerchantByParentIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Profile Get Supervisor Merchant By Parent Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETSUPMERBYPARID";

       //114.141
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__parentid]).c_str()));
        hResult["114.141"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetSupervisorMerchantByParentId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetPathByNameTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Get Path By Name ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GEPABYNA";


		//P114.156
		if(hData[__name].length())
        {
			hResult["114.156"]=hData[__name];
		}

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","120.159"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditPathTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{

#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Edit Path Transaction";
	NMCLog::Log("Edit Path Transaction");
    dataLog =   string("Name [") + hData[__name] +
                string("] Path [") + hData[__section] +
				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDTPANA";




        if((hData[__name]).length())
        {
            //114.156
            hResult["114.156"]=hData[__name];
        }

		if((hData[__section]).length())
        {
            //120.159
            hResult["120.159"]=hData[__section];
        }



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewPathTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Add New Path ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWPATH";


		//P114.156
		if(hData[__name].length())
        {
			hResult["114.156"]=hData[__name];
		}

		if((hData[__section]).length())
        {
            //120.159
            hResult["120.159"]=hData[__section];
        }

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.101"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessValidateNamePathTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{

#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Validate Name Path ";
	NMCLog::Log("Validate Name Path ");
    dataLog =   string("Name [") + hData[__name] +

				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="VALPATHNAME";




        if((hData[__name]).length())
        {
            //114.156
            hResult["114.156"]=hData[__name];
        }





        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetTerminalByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Profile Get Terminal By Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETTERMBYID";

       //120.69
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__terminalId]).c_str()));
        hResult["120.69"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetTerminalById?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetZipCodeByCityTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Profile Get Zip Code By City");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETZIPBYC";

        //114.94
        hResult["114.94"]=hData[__city];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetZipCodeByCity?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessRegisterTemporalUserTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Register Temporal User ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REGTEMPUS";


		//P121.184
		if(hData[__userType].length())
        {
			hResult["121.184"]=hData[__userType];
		}

        //P114.70
		if(hData[__companyName].length())
        {
			hResult["114.70"]=hData[__companyName];
		}


        //114.3
		if((hData[__firstName]).length())
        {

            hResult["114.3"]=hData[__firstName];
        }

        //114.5
		if((hData[__lastName]).length())
        {

            hResult["114.5"]=hData[__lastName];
        }

        //114.7
		if((hData[__email]).length())
        {

            hResult["114.7"]=hData[__email];
        }

        //121.127
		if((hData[__password]).length())
        {

            hResult["121.127"]=hData[__password];
        }






        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.179"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddNewPinCodeTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Add New PinCode ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDNEWPINC";


		//P114.7
		if(hData[__email].length())
        {
			hResult["114.7"]=hData[__email];
		}

        //114.138
		if((hData[__mobileAppPincode]).length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%008d",atoi((hData[__mobileAppPincode]).c_str()));
            hResult["114.138"] = Temp;

            // hResult["114.138"]=hData[__mobileAppPincode];
        }




        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessForgotPasswordConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Forgot Password Consumer");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="FORGPASSCON";


		//P114.7
		if(hData[__email].length())
        {
			hResult["114.7"]=hData[__email];
		}

        //114.138
		if((hData[__mobileAppPincode]).length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%008d",atoi((hData[__mobileAppPincode]).c_str()));
            hResult["114.138"] = Temp;

            // hResult["114.138"]=hData[__mobileAppPincode];
        }


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.88"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetTemporalUserTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Temporal User");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETTEMPUS";

        	//P114.7
		if(hData[__email].length())
        {
			hResult["114.7"]=hData[__email];
		}


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetTemporalUser?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}


string ProcessRegisterUserTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Register  User ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REGUSER";




        //114.7
		if((hData[__email]).length())
        {

            hResult["114.7"]=hData[__email];
        }

        //121.127
		if((hData[__password]).length())
        {

            hResult["121.127"]=hData[__password];
        }


         string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.179"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}





string ProcessValidateTemporalEmailTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Validate Temporal Email ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="VALTEMPEMA";


		//P114.7
		if(hData[__email].length())
        {
			hResult["114.7"]=hData[__email];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

 //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[2] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessValidateTemporalUserTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Validate Temporal User ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="VALIDETEMUS";


		//P114.7
		if(hData[__email].length())
        {
			hResult["114.7"]=hData[__email];
		}

        //P121.127
		if(hData[__password].length())
        {
			hResult["121.127"]=hData[__password];
		}





        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[2] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessConfirmPaymentMethodConsumerTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Confirm Payment Method Consumer ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="CONFPAYMETCON";


		//P114.7
		if(hData[__email].length())
        {
			hResult["114.7"]=hData[__email];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetSecurityQuestionsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Security Questions");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETSECQU";



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetSecurityQuestions?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}




string ProcessGetSecurityQuestionsByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Security Question By ID");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETSECQUBYID";

        //P121.170
		if(hData[__action].length())
        {
			hResult["121.170"]=hData[__action];
		}


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetSecurityQuestionsById?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}

string ProcessValidateAnswersByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Validate Answers By Consumer Id ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="VALANSBYCOID";


		//P114.88
		if((hData[__consumerId]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.175 SECRET QUESTION ID
		if((hData[__name]).length())
        {

            hResult["121.175"]=hData[__name];
        }

         //121.170 answers
		if((hData[__action]).length())
        {

            hResult["121.170"]=hData[__action];
        }



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetRandomSecurityQuestionsByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Random Security Question By Consumer ID");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETRANSECQUBYCONID";

        //P114.88
		if((hData[__consumerId]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetRandomSecurityQuestionsByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}



string ProcessGetRemoteItemsToRecommendByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Remote Items To Recommend By Merchant Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTREMITRECMERID";

        //P114.141 merchant id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"]=Temp;

		   //121.98 Remote item recomend
		if((hData[__remoteItemId]).length())
        {

            hResult["121.98"]=hData[__remoteItemId];
        }


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetRemoteItemsToRecommendByMerchantId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




string ProcessEditRecommendedItemsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("  Edit Recommended Items ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDRECOMITE";


		   //121.175 Remote item recomend
		if((hData[__remoteItemId]).length())
        {

            memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
			hResult["121.52"]=Temp;


        }


		//P121.159
		if((hData[__merchantId]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
			hResult["121.159"]=Temp;
		}

        //121.175 Remote item recomend
		if((hData[__name]).length())
        {

            hResult["121.175"]=hData[__name];
        }



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessAddLocationsToRemoteItemsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Add Locations To Loyalty Programs";
	NMCLog::Log("Add Locations To Loyalty Programs");
    dataLog =   string("Remote Item Id [") + hData[__remoteItemId] +
                string("] Locations Id [") + hData[__location] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDLOCTOREMO";

		//121.52 - 118
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
        hResult["121.52"] = Temp;

        //120.105 - 13
        hResult["120.105"]=hData[__location];

        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetRemoteItemsByIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Remote Items  By  Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTREMBYID";



        //121.98
        hResult["121.98"]=hData[__remoteItemId];


        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetRemoteItemsById?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetBarcodeListTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_
    NMCLog::Log("Get Barcode List");

    try
    {
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETBARCLST";


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }

        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetBarcodeList?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

         return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }

#else
        return "{123}";

#endif
}



string ProcessRemoveLoyaltyProgramTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Remove Loyalty Programs";
	NMCLog::Log("Remove Loyalty Programs");
    dataLog =   string("Loyalty Id [") + hData[__couponId] +
                string("] Merchant Id [") + hData[__merchantId] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOLOYAPRO";

		//120.30 -
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__couponId]).c_str()));
        hResult["120.30"] = Temp;

        //114.141 -
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




string ProcessRemoveRemoteItemTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Remove Remote Item";
	NMCLog::Log("Remove Remote Item");
    dataLog =   string("Remote item Id [") + hData[__remoteItemId] +
                string("] Merchant Id [") + hData[__merchantId] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMREMITEM";

		//121.52 -
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
        hResult["121.52"] = Temp;

        //114.141 -
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
        hResult["114.141"] = Temp;


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetLocationsByCouponIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Locations By Coupon Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTLOCBYCPNID";

        //P120.30 coupon id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__couponId]).c_str()));
		hResult["120.30"]=Temp;



        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetLocationsByCouponId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessRegisterMerchant3Transaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	log=true;
    nameTransaction="Register Merchant 3";
	NMCLog::Log("Register Merchant 3");
    dataLog =   string(" Merchant id [") + hData[__merchantId] +
				string("] Middle Name [") + hData[__middleName] +
                string("] Mobile Number [") + hData[__movileNumber] +
                string("] Title [") + hData[__title] +
                string("] Category Name [") + hData[__categoryName] +
                string("] SubCategory Name [") + hData[__subcategoryName] +
                string("] Home phone [") + hData[__homePhone] +
                string("] Office Number [") + hData[__officeNumber] +
                string("] Type Bussines [") + hData[__typeBussines] +
				string("] Address1 [") + hData[__address1] +
				string("] Address2 [") + hData[__addres2] +
				string("] Country [") + hData[__country] +
				string("] City [") + hData[__city] +
				string("] State [") + hData[__state] +
				string("] Zip [") + hData[__zipCode] +

				string("] Flag Qaantity location [") + hData[__quantityLocation] +

				string("] Flag Merchant Account [") + hData[__merchantAccount] +
				string("] Merchant Account Provider [") + hData[__merchantAccountProvider] +
				string("] Contact name provider [") + hData[__contactName] +
                string("] Contact Phone [") + hData[__contactNamePhone] +

				string("] Extension for provider [") + hData[__extension1] +
				string("] Extension for merchant office [") + hData[__extension2] +

				string("]");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REGMETHREE";




		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
		hResult["114.141"] = Temp;

         if((hData[__title]).length())
        {
            //114.26
            hResult["114.26"]=hData[__title];
        }


        if((hData[__middleName]).length())
        {
            //114.4
            hResult["114.4"]=hData[__middleName];
        }


        if((hData[__officeNumber]).length())
        {
            //121.147
            hResult["121.147"]=hData[__officeNumber];
        }


        //121.168 extension for merchant
		if((hData[__extension2]).length())
        {
			hResult["121.168"]=hData[__extension2];
		}

         if((hData[__movileNumber]).length())
        {
            //114.52
            hResult["114.52"]=hData[__movileNumber];
        }

        if((hData[__homePhone]).length())
        {
            //114.79
            hResult["114.79"]=hData[__homePhone];
        }


        // customer service number
        if((hData[__workNumber]).length())
        {
            //114.79
            hResult["120.97"]=hData[__workNumber];
        }

          if((hData[__country]).length())
        {
            //120.73
            hResult["120.73"]=hData[__country];
        }


          if((hData[__address1]).length())
        {
            //114.106
            hResult["114.106"]=hData[__address1];
        }

        if((hData[__addres2]).length())
        {
            //114.107
            hResult["114.107"]=hData[__addres2];
        }


        if((hData[__state]).length())
        {
            //120.13
            hResult["120.13"]=hData[__state];
        }

        if((hData[__city]).length())
        {
            //114.108
            hResult["114.108"]=hData[__city];
        }


        if((hData[__zipCode]).length())
        {
            //114.110
            hResult["114.110"]=hData[__zipCode];
        }

        if((hData[__typeBussines]).length())
        {
            //121.175
            hResult["121.175"]=hData[__typeBussines];

        }

        if((hData[__categoryName]).length())
        {
            //114.137
            hResult["114.137"]=hData[__categoryName];
        }

         if((hData[__subcategoryName]).length())
        {
            //121.111
            hResult["121.111"]=hData[__subcategoryName];
        }


         if((hData[__quantityLocation]).length())
        {
            //121.165
            hResult["121.165"]=hData[__quantityLocation];
        }

        // Flag pos system
        if((hData[__flag]).length())
        {
            //121.184
            hResult["121.184"]=hData[__flag];
        }


        // pos provider name
        if((hData[__posInternal]).length())
        {
            //121.184
            hResult["121.27"]=hData[__posInternal];
        }

        // pos contact name
        if((hData[__name]).length())
        {
            //114.53
            hResult["114.53"]=hData[__name];
        }

        // pos contact number
        if((hData[__posId]).length())
        {
            //121.184
            hResult["121.186"]=hData[__posId];
        }

        if((hData[__merchantAccount]).length())
        {
            //121.166
            hResult["121.166"]=hData[__merchantAccount];
        }

        if((hData[__merchantAccountProvider]).length())
        {
            //121.150
            hResult["121.150"]=hData[__merchantAccountProvider];
        }

		//120.57
		if((hData[__contactName]).length())
        {
			hResult["120.57"]=hData[__contactName];
		}

		//120.56
		if((hData[__contactNamePhone]).length())
        {
			hResult["120.56"]=hData[__contactNamePhone];
		}

		//121.167 extension for provider
		if((hData[__extension1]).length())
        {
			hResult["121.167"]=hData[__extension1];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetInvoicesConsumerByTransactionIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Invoices Consumer By Transaction Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTINVCONSID";

		//P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

		//P114.145 invoiceNumber
		if(hData[__invoiceNumber].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__invoiceNumber]).c_str()));
			hResult["114.145"]=Temp;
		}

        string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetInvoicesConsumerByTransactionId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetMessageCountByInvoiceIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Message By Invoice Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETMESBYINVID";

		//P114.88
		if(hData[__consumerId].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.75
		if(hData[__invoiceNumber].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__invoiceNumber]).c_str()));
			hResult["121.75"] = Temp;
		}

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetMessageCountByInvoiceId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetConsumerByPincodeTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer By Pincode");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETCONSUBYPIN";

		//114.138
		if(hData[__mobileAppPincode].length())
        {
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__mobileAppPincode]).c_str()));
			hResult["114.138"]=Temp;
		}

		//114.7
        if((hData[__email]).length())
            hResult["114.7"]=hData[__email];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetConsumerByPincode?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetFirstUserTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get First User");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GEFIRSUS";

		//120.158
        if((hData[__userType]).length())
            hResult["120.158"]=hData[__userType];

		//114.7
        if((hData[__userId]).length())
            hResult["114.7"]=hData[__userId];

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetFirstUser?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessEditTemporalPasswordByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Edit Temporal Password By Consumer Id ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDTEMPASS";


		//114.88
		if((hData[__consumerId]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.127
		if(hData[__password].length())
        {
			hResult["121.127"]=hData[__password];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetMessageByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Message By Invoice Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GETMESBYCONSID";

        //114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        hResult["114.88"] = Temp;

		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetMessageByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




string ProcessForgotPasswordMerchantTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Forgot Password Merchant");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="FORPSSMER";


		//P114.7
		if(hData[__email].length())
        {
			hResult["114.7"]=hData[__email];
		}




        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.141"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessEditPasswordTemporalByMerchantIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Edit Temporal Password By Merchant Id ");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="EDITEMPASMERID";


		//114.141
		if((hData[__merchantId]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__merchantId]).c_str()));
			hResult["114.141"]=Temp;
		}

        //121.127
		if(hData[__password].length())
        {
			hResult["121.127"]=hData[__password];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}




string ProcessAddShippingStatusToTransactionTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_


	log=true;
    nameTransaction="Add Shipping Status To Transaction ";
	NMCLog::Log("Add Shipping Status To Transaction ");
    dataLog =   string("Transaction number[") + hData[__transactionNumber] +
                string("] Shipping Status [") + hData[__shippingStatus] +
				string("]") ;

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADSHIPSTATRA";


		//114.145
		if((hData[__transactionNumber]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__transactionNumber]).c_str()));
			hResult["114.145"]=Temp;
		}

        //121.182
		if(hData[__shippingStatus].length())
        {
			hResult["121.182"]=hData[__shippingStatus];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetInvoiceDetailsByConsumerIdTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Invoice Details By Consumer Id");
    try
    {
        hasresult hResult;
        string sFormatedRsp;
        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="GTINVDETBYCONID";

        //114.88
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
        hResult["114.88"] = Temp;

        //114.150
        memset(Temp,0,sizeof(Temp));
        sprintf_s(Temp,sizeof(Temp)-1,"%010d",atoi((hData[__transactionNumber]).c_str()));
        hResult["114.150"] = Temp;



		string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!this->ProceessComunicationHTTP(string("/serverList/services/GetInvoiceDetailsByConsumerId?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }

        return dataIn;
    }
    catch(...)
    {

        return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}



string ProcessGetConsumerRemoteByFavoriteCategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Remote By Favorite Category");

 try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GTCONREMOBYFAVCA";

        //P114.88 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;


        //121.140
		 if((hData[__price]).length() > 0)
        {
			hResult["121.140"]=hData[__price];
		}

        //121.141
		 if((hData[__priceSale]).length() > 0)
        {
			hResult["121.141"]=hData[__priceSale];
		}


         string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetConsumerRemoteByFavoriteCategory?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

string ProcessGetConsumerFavoriteRemoteTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Favorite Remote");

 try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETCONFAVREMO";

        //P114.88 CONSUMER id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;


        //121.140
		 if((hData[__price]).length() > 0)
        {
			hResult["121.140"]=hData[__price];
		}

        //121.141
		 if((hData[__priceSale]).length() > 0)
        {
			hResult["121.141"]=hData[__priceSale];
		}


         string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetConsumerFavoriteRemote?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}



string ProcessAddFavoriteRemoteTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Add Favorite Remote");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDFAVREMIT";


		//114.88
		if((hData[__consumerId]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.175
		if(hData[__remoteItemId].length())
        {
			hResult["121.175"]=hData[__remoteItemId];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessRemoveFavoriteRemoteTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Remove Favorite Remote");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOFAVREMIT";


		//114.88
		if((hData[__consumerId]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.175
		if(hData[__remoteItemId].length())
        {
			hResult["121.175"]=hData[__remoteItemId];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetConsumerCouponsByFavoriteCategoryTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Coupons By Favorite Category");

 try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GTCONCOBTFAVCA";

        //P114.88 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;


        //121.140
		 if((hData[__dateBegin]).length() > 0)
        {
			hResult["121.140"]=hData[__dateBegin];
		}

        //121.141
		 if((hData[__dateEnd]).length() > 0)
        {
			hResult["121.141"]=hData[__dateEnd];
		}

         //114.137
		 if((hData[__typeCategoryName]).length() > 0)
        {
			hResult["114.137"]=hData[__typeCategoryName];
		}

        //121.81
		 if((hData[__category]).length() > 0)
        {
			hResult["121.81"]=hData[__category];
		}



         string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetConsumerCouponsByFavoriteCategory?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

string ProcessAddFavoriteCatalogTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Add Favorite Catalog");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDFAVCATA";


		//114.88
		if((hData[__consumerId]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.175
		if(hData[__catalogId].length())
        {
			hResult["121.175"]=hData[__catalogId];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessRemoveFavoriteCatalogTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log("Remove Favorite Catalog");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMFAVCATA";


		//114.88
		if((hData[__consumerId]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.175
		if(hData[__catalogId].length())
        {
			hResult["121.175"]=hData[__catalogId];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessGetFavoriteCatalogTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Favorite Catalog");

 try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETFAVCATA";

        //P114.88 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;



         string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetFavoriteCatalog?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}


string ProcessGetRemoteItemsByCatalogIdPortalTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Remote Items By Catalog Id Portal");

 try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GTREMITCATIDPO";

        //121.27
		 if((hData[__catalogId]).length() > 0)
        {
			hResult["121.27"]=hData[__catalogId];
		}

        //121.140
		 if((hData[__price]).length() > 0)
        {
			hResult["121.140"]=hData[__price];
		}

        //121.141
		 if((hData[__priceSale]).length() > 0)
        {
			hResult["121.141"]=hData[__priceSale];
		}


         string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetRemoteItemsByCatalogIdPortal?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}


string ProcessAddFavoriteCouponTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Add Favorite Coupon");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="ADDFAVCOUP";


		//114.88
		if((hData[__consumerId]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.175
		if(hData[__couponId].length())
        {
			hResult["121.175"]=hData[__couponId];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessRemoveFavoriteCouponTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    NMCLog::Log(" Remove Favorite Coupon");

    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOFAVCOUP";


		//114.88
		if((hData[__consumerId]).length())
		{
			memset(Temp,0,sizeof(Temp));
			sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
			hResult["114.88"]=Temp;
		}

        //121.175
		if(hData[__couponId].length())
        {
			hResult["121.175"]=hData[__couponId];
		}



        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44"};
        string out[3];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,3,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return this->messageResponseTrue;
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


string ProcessGetConsumerFavoriteClubsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Favorite Clubs");

 try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GETCONFAVCLU";

        //P114.88 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;


        //121.140
		 if((hData[__dateBegin]).length() > 0)
        {
			hResult["121.140"]=hData[__dateBegin];
		}

        //121.141
		 if((hData[__dateEnd]).length() > 0)
        {
			hResult["121.141"]=hData[__dateEnd];
		}

         //114.137
		 if((hData[__typeCategoryName]).length() > 0)
        {
			hResult["114.137"]=hData[__typeCategoryName];
		}

        //121.81
		 if((hData[__category]).length() > 0)
        {
			hResult["121.81"]=hData[__category];
		}



         string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetConsumerFavoriteClubs?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}

string ProcessGetConsumerFavoriteCouponsTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

	NMCLog::Log("Get Consumer Favorite Coupons");

 try
    {
        hasresult hResult;
        string sFormatedRsp;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;

		//P101
		hResult["101"]="GTCONFAVCOU";

        //P114.88 consumer id
		memset(Temp,0,sizeof(Temp));
		sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
		hResult["114.88"]=Temp;


        //121.140
		 if((hData[__dateBegin]).length() > 0)
        {
			hResult["121.140"]=hData[__dateBegin];
		}

        //121.141
		 if((hData[__dateEnd]).length() > 0)
        {
			hResult["121.141"]=hData[__dateEnd];
		}

         //114.137
		 if((hData[__typeCategoryName]).length() > 0)
        {
			hResult["114.137"]=hData[__typeCategoryName];
		}

        //121.81
		 if((hData[__category]).length() > 0)
        {
			hResult["121.81"]=hData[__category];
		}



         string mti="0305";


        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
            return this->messageFailedPackISO;
        }


        string ISOb64;
        tools *objTools;
        objTools = new tools;

        ISOb64=objTools->base64_encode((unsigned char *)sFormatedRsp.c_str(),sFormatedRsp.length() , true);

        delete objTools;

        string dataIn;
        if(!ProceessComunicationHTTP(string("/serverList/services/GetConsumerFavoriteClubs?isInp=")+ISOb64,dataIn))
        {
            return NULL;
        }


        return dataIn;
    }
    catch(...)
    {
        return this->messageFailedException;
    }




#else
     return "{123}";
#endif
}


string ProcessRemoveSelectCouponTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
	nameTransaction="Remove Select Coupon";
	NMCLog::Log("Remove Select Coupon");
	dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("Loyaltyid[") + hData[__couponId] +

				string("]") ;


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOSELECO";

		//114.88
		if(hData[__consumerId].length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
            hResult["114.88"] = Temp;
        }

        //121.88
        if(hData[__couponId].length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__couponId]).c_str()));
            hResult["121.88"] = Temp;
        }


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.101"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}

string ProcessRemoveSelectRemoteTransaction::Transaction(hasresult &hData,bool &log,string &nameTransaction,string &dataLog)
{
#ifndef __TRANSACTIONS_DEBUG_

    log=true;
	nameTransaction="Remove Select Remote";
	NMCLog::Log("Remove Select Remote");
	dataLog =   string("Consumer Id [") + hData[__consumerId] +
                string("remote item id[") + hData[__remoteItemId] +

				string("]") ;


    try
    {
        string dataIn;
        string sFormatedRsp;

        hasresult hResult;

        //get current date
		struct tm *tmPtr;
		time_t now = time(NULL);
		tmPtr = localtime(&now);

        char Temp[255];

      	//P7
		memset(Temp,0,sizeof(Temp));
		strftime(Temp, 11, "%m%d%H%M%S", tmPtr);
		hResult["7"]=Temp;

		//P12
		memset(Temp,0,sizeof(Temp));
		strftime(&Temp[2], 13, "%y%m%d%H%M%S", tmPtr);
		memcpy(Temp,"21",2);
		hResult["12"]=Temp;


		//P101
		hResult["101"]="REMOSELREMO";

		//114.88
		if(hData[__consumerId].length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__consumerId]).c_str()));
            hResult["114.88"] = Temp;
        }

        //121.52
        if(hData[__remoteItemId].length())
        {
            memset(Temp,0,sizeof(Temp));
            sprintf_s(Temp,sizeof(Temp)-1,"%011d",atoi((hData[__remoteItemId]).c_str()));
            hResult["121.52"] = Temp;
        }


        string mti="0305";

        if(!this->BuildISOFormater(hResult,sFormatedRsp,mti))
        {
			return this->messageFailedPackISO;
        }

        if(!ProceessComunication(sFormatedRsp,3000,dataIn,true))
        {
			return NULL;
        }

        if(dataIn.length()<=2)
        {
			return this->messageFailedInvalidResponse;
        }

        string Fields[]={"39","18","44","114.101"};
        string out[4];

        //unpack iso
        if(!this->GetFieldsFromISO(dataIn,Fields,4,out))
        {
			return this->messageFailedUnpackISO;
        }

        //validate response
        if(memcmp(out[0].c_str(),"0000",4)!=0)
        {
			return out[2]+string(" - ")+out[1];
        }

		return string("{") + out[3] + string("}");
    }
    catch(...)
    {
		return this->messageFailedException;
    }


#else
     return "{123}";
#endif
}


